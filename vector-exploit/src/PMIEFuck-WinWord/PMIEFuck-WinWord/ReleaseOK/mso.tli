// Created by Microsoft (R) C/C++ Compiler Version 11.00.60315.1 (9ab2a32d).
//
// d:\sources\pmiefuck-winword\pmiefuck-winword\releaseok\mso.tli
//
// Wrapper implementations for Win32 type library C:\Program Files (x86)\Common Files\Microsoft Shared\OFFICE14\MSO.DLL
// compiler-generated file created 06/03/13 at 16:10:09 - DO NOT EDIT!


//
// interface IAccessible wrapper method implementations
//

#pragma implementation_key(1)
inline IDispatchPtr Office::IAccessible::GetaccParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_accParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2)
inline long Office::IAccessible::GetaccChildCount ( ) {
    long _result = 0;
    HRESULT _hr = get_accChildCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline IDispatchPtr Office::IAccessible::GetaccChild ( const _variant_t & varChild ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_accChild(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(4)
inline _bstr_t Office::IAccessible::GetaccName ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accName(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(5)
inline _bstr_t Office::IAccessible::GetaccValue ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accValue(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(6)
inline _bstr_t Office::IAccessible::GetaccDescription ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDescription(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(7)
inline _variant_t Office::IAccessible::GetaccRole ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accRole(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(8)
inline _variant_t Office::IAccessible::GetaccState ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accState(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(9)
inline _bstr_t Office::IAccessible::GetaccHelp ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accHelp(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(10)
inline long Office::IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild ) {
    long _result = 0;
    HRESULT _hr = get_accHelpTopic(pszHelpFile, varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline _bstr_t Office::IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accKeyboardShortcut(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(12)
inline _variant_t Office::IAccessible::GetaccFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(13)
inline _variant_t Office::IAccessible::GetaccSelection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(14)
inline _bstr_t Office::IAccessible::GetaccDefaultAction ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDefaultAction(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(15)
inline HRESULT Office::IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild ) {
    HRESULT _hr = raw_accSelect(flagsSelect, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(16)
inline HRESULT Office::IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild ) {
    HRESULT _hr = raw_accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(17)
inline _variant_t Office::IAccessible::accNavigate ( long navDir, const _variant_t & varStart ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accNavigate(navDir, varStart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(18)
inline _variant_t Office::IAccessible::accHitTest ( long xLeft, long yTop ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accHitTest(xLeft, yTop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(19)
inline HRESULT Office::IAccessible::accDoDefaultAction ( const _variant_t & varChild ) {
    HRESULT _hr = raw_accDoDefaultAction(varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline void Office::IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName ) {
    HRESULT _hr = put_accName(varChild, pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(21)
inline void Office::IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue ) {
    HRESULT _hr = put_accValue(varChild, pszValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IMsoDispObj wrapper method implementations
//

#pragma implementation_key(22)
inline IDispatchPtr Office::_IMsoDispObj::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(23)
inline long Office::_IMsoDispObj::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IMsoOleAccDispObj wrapper method implementations
//

#pragma implementation_key(24)
inline IDispatchPtr Office::_IMsoOleAccDispObj::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(25)
inline long Office::_IMsoOleAccDispObj::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(26)
inline IDispatchPtr Office::Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(27)
inline int Office::Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(28)
inline float Office::Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(29)
inline void Office::Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(30)
inline IDispatchPtr Office::CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(31)
inline HRESULT Office::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(32)
inline HRESULT Office::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(33)
inline HRESULT Office::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(34)
inline HRESULT Office::CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(35)
inline enum Office::MsoTriState Office::CalloutFormat::GetAccent ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(36)
inline void Office::CalloutFormat::PutAccent ( enum MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(37)
inline enum Office::MsoCalloutAngleType Office::CalloutFormat::GetAngle ( ) {
    enum MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline void Office::CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline enum Office::MsoTriState Office::CalloutFormat::GetAutoAttach ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void Office::CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline enum Office::MsoTriState Office::CalloutFormat::GetAutoLength ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline enum Office::MsoTriState Office::CalloutFormat::GetBorder ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline void Office::CalloutFormat::PutBorder ( enum MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(44)
inline float Office::CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline enum Office::MsoCalloutDropType Office::CalloutFormat::GetDropType ( ) {
    enum MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline float Office::CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void Office::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline float Office::CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline enum Office::MsoCalloutType Office::CalloutFormat::GetType ( ) {
    enum MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(50)
inline void Office::CalloutFormat::PutType ( enum MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(51)
inline IDispatchPtr Office::ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(52)
inline enum Office::MsoEditingType Office::ShapeNode::GetEditingType ( ) {
    enum MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline _variant_t Office::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(54)
inline enum Office::MsoSegmentType Office::ShapeNode::GetSegmentType ( ) {
    enum MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(55)
inline IDispatchPtr Office::ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(56)
inline int Office::ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline Office::ShapeNodePtr Office::ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(58)
inline IUnknownPtr Office::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(59)
inline HRESULT Office::ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(60)
inline HRESULT Office::ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(61)
inline HRESULT Office::ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(62)
inline HRESULT Office::ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(63)
inline HRESULT Office::ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Script wrapper method implementations
//

#pragma implementation_key(64)
inline IDispatchPtr Office::Script::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(65)
inline _bstr_t Office::Script::GetExtended ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(66)
inline void Office::Script::PutExtended ( _bstr_t Extended ) {
    HRESULT _hr = put_Extended(Extended);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(67)
inline _bstr_t Office::Script::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(68)
inline void Office::Script::PutId ( _bstr_t Id ) {
    HRESULT _hr = put_Id(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(69)
inline enum Office::MsoScriptLanguage Office::Script::GetLanguage ( ) {
    enum MsoScriptLanguage _result;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(70)
inline void Office::Script::PutLanguage ( enum MsoScriptLanguage Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(71)
inline enum Office::MsoScriptLocation Office::Script::GetLocation ( ) {
    enum MsoScriptLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(72)
inline HRESULT Office::Script::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(73)
inline IDispatchPtr Office::Script::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(74)
inline _bstr_t Office::Script::GetScriptText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(75)
inline void Office::Script::PutScriptText ( _bstr_t Script ) {
    HRESULT _hr = put_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Scripts wrapper method implementations
//

#pragma implementation_key(76)
inline IDispatchPtr Office::Scripts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(77)
inline long Office::Scripts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(78)
inline IUnknownPtr Office::Scripts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(79)
inline Office::ScriptPtr Office::Scripts::Item ( const _variant_t & Index ) {
    struct Script * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(80)
inline Office::ScriptPtr Office::Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText ) {
    struct Script * _result = 0;
    HRESULT _hr = raw_Add(Anchor, Location, Language, Id, Extended, ScriptText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(81)
inline HRESULT Office::Scripts::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(82)
inline IDispatchPtr Office::TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(83)
inline HRESULT Office::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(84)
inline enum Office::MsoTextEffectAlignment Office::TextEffectFormat::GetAlignment ( ) {
    enum MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void Office::TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline enum Office::MsoTriState Office::TextEffectFormat::GetFontBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline void Office::TextEffectFormat::PutFontBold ( enum MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline enum Office::MsoTriState Office::TextEffectFormat::GetFontItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void Office::TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline _bstr_t Office::TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(91)
inline void Office::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(92)
inline float Office::TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void Office::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline enum Office::MsoTriState Office::TextEffectFormat::GetKernedPairs ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline void Office::TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline enum Office::MsoTriState Office::TextEffectFormat::GetNormalizedHeight ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void Office::TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline enum Office::MsoPresetTextEffectShape Office::TextEffectFormat::GetPresetShape ( ) {
    enum MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(99)
inline void Office::TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline enum Office::MsoPresetTextEffect Office::TextEffectFormat::GetPresetTextEffect ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void Office::TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline enum Office::MsoTriState Office::TextEffectFormat::GetRotatedChars ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void Office::TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline _bstr_t Office::TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(105)
inline void Office::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline float Office::TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void Office::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(108)
inline IDispatchPtr Office::TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(109)
inline float Office::TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void Office::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline float Office::TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(112)
inline void Office::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(113)
inline float Office::TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(114)
inline void Office::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline float Office::TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline void Office::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(117)
inline enum Office::MsoTextOrientation Office::TextFrame::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(118)
inline void Office::TextFrame::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoDispCagNotifySink wrapper method implementations
//

#pragma implementation_key(119)
inline HRESULT Office::IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker ) {
    HRESULT _hr = raw_InsertClip(pClipMoniker, pItemMoniker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(120)
inline HRESULT Office::IMsoDispCagNotifySink::WindowIsClosing ( ) {
    HRESULT _hr = raw_WindowIsClosing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Balloon wrapper method implementations
//

#pragma implementation_key(121)
inline IDispatchPtr Office::Balloon::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(122)
inline IDispatchPtr Office::Balloon::GetCheckboxes ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Checkboxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(123)
inline IDispatchPtr Office::Balloon::GetLabels ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(124)
inline void Office::Balloon::PutBalloonType ( enum MsoBalloonType pbty ) {
    HRESULT _hr = put_BalloonType(pbty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(125)
inline enum Office::MsoBalloonType Office::Balloon::GetBalloonType ( ) {
    enum MsoBalloonType _result;
    HRESULT _hr = get_BalloonType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void Office::Balloon::PutIcon ( enum MsoIconType picn ) {
    HRESULT _hr = put_Icon(picn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline enum Office::MsoIconType Office::Balloon::GetIcon ( ) {
    enum MsoIconType _result;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline void Office::Balloon::PutHeading ( _bstr_t pbstr ) {
    HRESULT _hr = put_Heading(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline _bstr_t Office::Balloon::GetHeading ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Heading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(130)
inline void Office::Balloon::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline _bstr_t Office::Balloon::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(132)
inline void Office::Balloon::PutMode ( enum MsoModeType pmd ) {
    HRESULT _hr = put_Mode(pmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline enum Office::MsoModeType Office::Balloon::GetMode ( ) {
    enum MsoModeType _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline void Office::Balloon::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline enum Office::MsoAnimationType Office::Balloon::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void Office::Balloon::PutButton ( enum MsoButtonSetType psbs ) {
    HRESULT _hr = put_Button(psbs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(137)
inline enum Office::MsoButtonSetType Office::Balloon::GetButton ( ) {
    enum MsoButtonSetType _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline void Office::Balloon::PutCallback ( _bstr_t pbstr ) {
    HRESULT _hr = put_Callback(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(139)
inline _bstr_t Office::Balloon::GetCallback ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Callback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(140)
inline void Office::Balloon::PutPrivate ( long plPrivate ) {
    HRESULT _hr = put_Private(plPrivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline long Office::Balloon::GetPrivate ( ) {
    long _result = 0;
    HRESULT _hr = get_Private(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline HRESULT Office::Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom ) {
    HRESULT _hr = raw_SetAvoidRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(143)
inline _bstr_t Office::Balloon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(144)
inline enum Office::MsoBalloonButtonType Office::Balloon::Show ( ) {
    enum MsoBalloonButtonType _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(145)
inline HRESULT Office::Balloon::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BalloonCheckboxes wrapper method implementations
//

#pragma implementation_key(146)
inline _bstr_t Office::BalloonCheckboxes::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(147)
inline IDispatchPtr Office::BalloonCheckboxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(148)
inline IDispatchPtr Office::BalloonCheckboxes::GetItem ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(149)
inline int Office::BalloonCheckboxes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void Office::BalloonCheckboxes::PutCount ( int pccbx ) {
    HRESULT _hr = put_Count(pccbx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline IUnknownPtr Office::BalloonCheckboxes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonCheckbox wrapper method implementations
//

#pragma implementation_key(152)
inline _bstr_t Office::BalloonCheckbox::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(153)
inline _bstr_t Office::BalloonCheckbox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(154)
inline IDispatchPtr Office::BalloonCheckbox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(155)
inline void Office::BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked ) {
    HRESULT _hr = put_Checked(pvarfChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline VARIANT_BOOL Office::BalloonCheckbox::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline void Office::BalloonCheckbox::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(158)
inline _bstr_t Office::BalloonCheckbox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface BalloonLabels wrapper method implementations
//

#pragma implementation_key(159)
inline _bstr_t Office::BalloonLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(160)
inline IDispatchPtr Office::BalloonLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(161)
inline IDispatchPtr Office::BalloonLabels::GetItem ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(162)
inline int Office::BalloonLabels::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void Office::BalloonLabels::PutCount ( int pcwz ) {
    HRESULT _hr = put_Count(pcwz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline IUnknownPtr Office::BalloonLabels::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonLabel wrapper method implementations
//

#pragma implementation_key(165)
inline _bstr_t Office::BalloonLabel::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(166)
inline _bstr_t Office::BalloonLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(167)
inline IDispatchPtr Office::BalloonLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(168)
inline void Office::BalloonLabel::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(169)
inline _bstr_t Office::BalloonLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface AnswerWizardFiles wrapper method implementations
//

#pragma implementation_key(170)
inline IDispatchPtr Office::AnswerWizardFiles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(171)
inline _bstr_t Office::AnswerWizardFiles::GetItem ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(172)
inline int Office::AnswerWizardFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline HRESULT Office::AnswerWizardFiles::Add ( _bstr_t FileName ) {
    HRESULT _hr = raw_Add(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline HRESULT Office::AnswerWizardFiles::Delete ( _bstr_t FileName ) {
    HRESULT _hr = raw_Delete(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AnswerWizard wrapper method implementations
//

#pragma implementation_key(175)
inline IDispatchPtr Office::AnswerWizard::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(176)
inline Office::AnswerWizardFilesPtr Office::AnswerWizard::GetFiles ( ) {
    struct AnswerWizardFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnswerWizardFilesPtr(_result, false);
}

#pragma implementation_key(177)
inline HRESULT Office::AnswerWizard::ClearFileList ( ) {
    HRESULT _hr = raw_ClearFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(178)
inline HRESULT Office::AnswerWizard::ResetFileList ( ) {
    HRESULT _hr = raw_ResetFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentProperty wrapper method implementations
//

#pragma implementation_key(179)
inline HRESULT Office::DocumentProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(180)
inline _bstr_t Office::DocumentProperty::GetName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(181)
inline void Office::DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal ) {
    HRESULT _hr = put_Name(lcid, pbstrRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(182)
inline _variant_t Office::DocumentProperty::GetValue ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(183)
inline void Office::DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal ) {
    HRESULT _hr = put_Value(lcid, pvargRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(184)
inline enum Office::MsoDocProperties Office::DocumentProperty::GetType ( long lcid ) {
    enum MsoDocProperties _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline void Office::DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal ) {
    HRESULT _hr = put_Type(lcid, ptypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(186)
inline VARIANT_BOOL Office::DocumentProperty::GetLinkToContent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinkToContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline void Office::DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal ) {
    HRESULT _hr = put_LinkToContent(pfLinkRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(188)
inline _bstr_t Office::DocumentProperty::GetLinkSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline void Office::DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal ) {
    HRESULT _hr = put_LinkSource(pbstrSourceRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(190)
inline IDispatchPtr Office::DocumentProperty::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(191)
inline long Office::DocumentProperty::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface __DocumentProperties wrapper method implementations
//

#pragma implementation_key(192)
inline Office::DocumentPropertyPtr Office::__DocumentProperties::GetItem ( const _variant_t & Index, long lcid ) {
    struct DocumentProperty * _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(193)
inline long Office::__DocumentProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(194)
inline Office::DocumentPropertyPtr Office::__DocumentProperties::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid ) {
    struct DocumentProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, LinkToContent, Type, Value, LinkSource, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

#pragma implementation_key(195)
inline IUnknownPtr Office::__DocumentProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(196)
inline IDispatchPtr Office::__DocumentProperties::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(197)
inline long Office::__DocumentProperties::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFoundFiles wrapper method implementations
//

#pragma implementation_key(198)
inline _bstr_t Office::IFoundFiles::GetItem ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(199)
inline int Office::IFoundFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(200)
inline IUnknownPtr Office::IFoundFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFind wrapper method implementations
//

#pragma implementation_key(201)
inline _bstr_t Office::IFind::Get__SearchPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get___SearchPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(202)
inline _bstr_t Office::IFind::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(203)
inline VARIANT_BOOL Office::IFind::GetSubDir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline _bstr_t Office::IFind::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(205)
inline _bstr_t Office::IFind::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(206)
inline _bstr_t Office::IFind::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(207)
inline _bstr_t Office::IFind::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(208)
inline enum Office::MsoFileFindOptions Office::IFind::GetOptions ( ) {
    enum MsoFileFindOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline VARIANT_BOOL Office::IFind::GetMatchCase ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline _bstr_t Office::IFind::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(211)
inline VARIANT_BOOL Office::IFind::GetPatternMatch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PatternMatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline _variant_t Office::IFind::GetDateSavedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(213)
inline _variant_t Office::IFind::GetDateSavedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(214)
inline _bstr_t Office::IFind::GetSavedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(215)
inline _variant_t Office::IFind::GetDateCreatedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(216)
inline _variant_t Office::IFind::GetDateCreatedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(217)
inline enum Office::MsoFileFindView Office::IFind::GetView ( ) {
    enum MsoFileFindView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline enum Office::MsoFileFindSortBy Office::IFind::GetSortBy ( ) {
    enum MsoFileFindSortBy _result;
    HRESULT _hr = get_SortBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline enum Office::MsoFileFindListBy Office::IFind::GetListBy ( ) {
    enum MsoFileFindListBy _result;
    HRESULT _hr = get_ListBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline int Office::IFind::GetSelectedFile ( ) {
    int _result = 0;
    HRESULT _hr = get_SelectedFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(221)
inline Office::IFoundFilesPtr Office::IFind::GetResults ( ) {
    struct IFoundFiles * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFoundFilesPtr(_result, false);
}

#pragma implementation_key(222)
inline int Office::IFind::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(223)
inline void Office::IFind::Put__SearchPath ( _bstr_t pbstr ) {
    HRESULT _hr = put___SearchPath(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(224)
inline void Office::IFind::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(225)
inline void Office::IFind::PutSubDir ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_SubDir(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline void Office::IFind::PutTitle ( _bstr_t pbstr ) {
    HRESULT _hr = put_Title(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(227)
inline void Office::IFind::PutAuthor ( _bstr_t pbstr ) {
    HRESULT _hr = put_Author(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(228)
inline void Office::IFind::PutKeywords ( _bstr_t pbstr ) {
    HRESULT _hr = put_Keywords(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(229)
inline void Office::IFind::PutSubject ( _bstr_t pbstr ) {
    HRESULT _hr = put_Subject(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(230)
inline void Office::IFind::PutOptions ( enum MsoFileFindOptions penmOptions ) {
    HRESULT _hr = put_Options(penmOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(231)
inline void Office::IFind::PutMatchCase ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_MatchCase(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(232)
inline void Office::IFind::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(233)
inline void Office::IFind::PutPatternMatch ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_PatternMatch(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(234)
inline void Office::IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom ) {
    HRESULT _hr = put_DateSavedFrom(pdatSavedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(235)
inline void Office::IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo ) {
    HRESULT _hr = put_DateSavedTo(pdatSavedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(236)
inline void Office::IFind::PutSavedBy ( _bstr_t pbstr ) {
    HRESULT _hr = put_SavedBy(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(237)
inline void Office::IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom ) {
    HRESULT _hr = put_DateCreatedFrom(pdatCreatedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline void Office::IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo ) {
    HRESULT _hr = put_DateCreatedTo(pdatCreatedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline void Office::IFind::PutView ( enum MsoFileFindView penmView ) {
    HRESULT _hr = put_View(penmView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(240)
inline void Office::IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy ) {
    HRESULT _hr = put_SortBy(penmSortBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(241)
inline void Office::IFind::PutListBy ( enum MsoFileFindListBy penmListBy ) {
    HRESULT _hr = put_ListBy(penmListBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(242)
inline void Office::IFind::PutSelectedFile ( int pintSelectedFile ) {
    HRESULT _hr = put_SelectedFile(pintSelectedFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(243)
inline HRESULT Office::IFind::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(244)
inline HRESULT Office::IFind::Load ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Load(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(245)
inline HRESULT Office::IFind::Save ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Save(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(246)
inline HRESULT Office::IFind::Delete ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Delete(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(247)
inline long Office::IFind::GetFileType ( ) {
    long _result = 0;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline void Office::IFind::PutFileType ( long plFileType ) {
    HRESULT _hr = put_FileType(plFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FoundFiles wrapper method implementations
//

#pragma implementation_key(249)
inline _bstr_t Office::FoundFiles::GetItem ( int Index, long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(250)
inline long Office::FoundFiles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline IUnknownPtr Office::FoundFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PropertyTest wrapper method implementations
//

#pragma implementation_key(252)
inline _bstr_t Office::PropertyTest::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(253)
inline enum Office::MsoCondition Office::PropertyTest::GetCondition ( ) {
    enum MsoCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline _variant_t Office::PropertyTest::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(255)
inline _variant_t Office::PropertyTest::GetSecondValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(256)
inline enum Office::MsoConnector Office::PropertyTest::GetConnector ( ) {
    enum MsoConnector _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PropertyTests wrapper method implementations
//

#pragma implementation_key(257)
inline Office::PropertyTestPtr Office::PropertyTests::GetItem ( int Index, long lcid ) {
    struct PropertyTest * _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestPtr(_result, false);
}

#pragma implementation_key(258)
inline long Office::PropertyTests::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline HRESULT Office::PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector ) {
    HRESULT _hr = raw_Add(Name, Condition, Value, SecondValue, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(260)
inline HRESULT Office::PropertyTests::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(261)
inline IUnknownPtr Office::PropertyTests::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface COMAddIn wrapper method implementations
//

#pragma implementation_key(262)
inline _bstr_t Office::COMAddIn::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(263)
inline void Office::COMAddIn::PutDescription ( _bstr_t RetValue ) {
    HRESULT _hr = put_Description(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline _bstr_t Office::COMAddIn::GetProgId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(265)
inline _bstr_t Office::COMAddIn::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(266)
inline VARIANT_BOOL Office::COMAddIn::GetConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(267)
inline void Office::COMAddIn::PutConnect ( VARIANT_BOOL RetValue ) {
    HRESULT _hr = put_Connect(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(268)
inline IDispatchPtr Office::COMAddIn::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(269)
inline void Office::COMAddIn::PutObject ( IDispatch * RetValue ) {
    HRESULT _hr = put_Object(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(270)
inline IDispatchPtr Office::COMAddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface COMAddIns wrapper method implementations
//

#pragma implementation_key(271)
inline Office::COMAddInPtr Office::COMAddIns::Item ( VARIANT * Index ) {
    struct COMAddIn * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return COMAddInPtr(_result, false);
}

#pragma implementation_key(272)
inline long Office::COMAddIns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(273)
inline IUnknownPtr Office::COMAddIns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(274)
inline HRESULT Office::COMAddIns::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(275)
inline IDispatchPtr Office::COMAddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(276)
inline HRESULT Office::COMAddIns::SetAppModal ( VARIANT_BOOL varfModal ) {
    HRESULT _hr = raw_SetAppModal(varfModal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LanguageSettings wrapper method implementations
//

#pragma implementation_key(277)
inline int Office::LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id ) {
    int _result = 0;
    HRESULT _hr = get_LanguageID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline VARIANT_BOOL Office::LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LanguagePreferredForEditing(lid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline IDispatchPtr Office::LanguageSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface _CommandBarsEvents wrapper method implementations
//

#pragma implementation_key(280)
inline HRESULT Office::_CommandBarsEvents::OnUpdate ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _CommandBarComboBoxEvents wrapper method implementations
//

#pragma implementation_key(281)
inline HRESULT Office::_CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Ctrl);
}

//
// dispinterface _CommandBarButtonEvents wrapper method implementations
//

#pragma implementation_key(282)
inline HRESULT Office::_CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Ctrl, CancelDefault);
}

//
// interface WebPageFont wrapper method implementations
//

#pragma implementation_key(283)
inline _bstr_t Office::WebPageFont::GetProportionalFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProportionalFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(284)
inline void Office::WebPageFont::PutProportionalFont ( _bstr_t pstr ) {
    HRESULT _hr = put_ProportionalFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline float Office::WebPageFont::GetProportionalFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_ProportionalFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void Office::WebPageFont::PutProportionalFontSize ( float pf ) {
    HRESULT _hr = put_ProportionalFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline _bstr_t Office::WebPageFont::GetFixedWidthFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FixedWidthFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(288)
inline void Office::WebPageFont::PutFixedWidthFont ( _bstr_t pstr ) {
    HRESULT _hr = put_FixedWidthFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline float Office::WebPageFont::GetFixedWidthFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FixedWidthFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void Office::WebPageFont::PutFixedWidthFontSize ( float pf ) {
    HRESULT _hr = put_FixedWidthFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebPageFonts wrapper method implementations
//

#pragma implementation_key(291)
inline int Office::WebPageFonts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline Office::WebPageFontPtr Office::WebPageFonts::GetItem ( enum MsoCharacterSet Index ) {
    struct WebPageFont * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebPageFontPtr(_result, false);
}

#pragma implementation_key(293)
inline IUnknownPtr Office::WebPageFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface HTMLProjectItem wrapper method implementations
//

#pragma implementation_key(294)
inline _bstr_t Office::HTMLProjectItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(295)
inline VARIANT_BOOL Office::HTMLProjectItem::GetIsOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline HRESULT Office::HTMLProjectItem::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(297)
inline HRESULT Office::HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(298)
inline HRESULT Office::HTMLProjectItem::SaveCopyAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveCopyAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(299)
inline _bstr_t Office::HTMLProjectItem::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline void Office::HTMLProjectItem::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline IDispatchPtr Office::HTMLProjectItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProjectItems wrapper method implementations
//

#pragma implementation_key(302)
inline Office::HTMLProjectItemPtr Office::HTMLProjectItems::Item ( VARIANT * Index ) {
    struct HTMLProjectItem * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemPtr(_result, false);
}

#pragma implementation_key(303)
inline long Office::HTMLProjectItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline IUnknownPtr Office::HTMLProjectItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(305)
inline IDispatchPtr Office::HTMLProjectItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProject wrapper method implementations
//

#pragma implementation_key(306)
inline enum Office::MsoHTMLProjectState Office::HTMLProject::GetState ( ) {
    enum MsoHTMLProjectState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline HRESULT Office::HTMLProject::RefreshProject ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshProject(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(308)
inline HRESULT Office::HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshDocument(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(309)
inline Office::HTMLProjectItemsPtr Office::HTMLProject::GetHTMLProjectItems ( ) {
    struct HTMLProjectItems * _result = 0;
    HRESULT _hr = get_HTMLProjectItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemsPtr(_result, false);
}

#pragma implementation_key(310)
inline IDispatchPtr Office::HTMLProject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(311)
inline HRESULT Office::HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MsoDebugOptions wrapper method implementations
//

#pragma implementation_key(312)
inline int Office::MsoDebugOptions::GetFeatureReports ( ) {
    int _result = 0;
    HRESULT _hr = get_FeatureReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void Office::MsoDebugOptions::PutFeatureReports ( int puintFeatureReports ) {
    HRESULT _hr = put_FeatureReports(puintFeatureReports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToDebugger ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToDebugger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void Office::MsoDebugOptions::PutOutputToDebugger ( VARIANT_BOOL pvarfOutputToDebugger ) {
    HRESULT _hr = put_OutputToDebugger(pvarfOutputToDebugger);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(317)
inline void Office::MsoDebugOptions::PutOutputToFile ( VARIANT_BOOL pvarfOutputToFile ) {
    HRESULT _hr = put_OutputToFile(pvarfOutputToFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline VARIANT_BOOL Office::MsoDebugOptions::GetOutputToMessageBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToMessageBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void Office::MsoDebugOptions::PutOutputToMessageBox ( VARIANT_BOOL pvarfOutputToMessageBox ) {
    HRESULT _hr = put_OutputToMessageBox(pvarfOutputToMessageBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(320)
inline IUnknownPtr Office::MsoDebugOptions::GetUnitTestManager ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_UnitTestManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface FileDialogSelectedItems wrapper method implementations
//

#pragma implementation_key(321)
inline IDispatchPtr Office::FileDialogSelectedItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(322)
inline IUnknownPtr Office::FileDialogSelectedItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(323)
inline long Office::FileDialogSelectedItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline _bstr_t Office::FileDialogSelectedItems::Item ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilter wrapper method implementations
//

#pragma implementation_key(325)
inline IDispatchPtr Office::FileDialogFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(326)
inline _bstr_t Office::FileDialogFilter::GetExtensions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(327)
inline _bstr_t Office::FileDialogFilter::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilters wrapper method implementations
//

#pragma implementation_key(328)
inline IDispatchPtr Office::FileDialogFilters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(329)
inline IUnknownPtr Office::FileDialogFilters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(330)
inline long Office::FileDialogFilters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(331)
inline Office::FileDialogFilterPtr Office::FileDialogFilters::Item ( int Index ) {
    struct FileDialogFilter * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

#pragma implementation_key(332)
inline HRESULT Office::FileDialogFilters::Delete ( const _variant_t & filter ) {
    HRESULT _hr = raw_Delete(filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(333)
inline HRESULT Office::FileDialogFilters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(334)
inline Office::FileDialogFilterPtr Office::FileDialogFilters::Add ( _bstr_t Description, _bstr_t Extensions, const _variant_t & Position ) {
    struct FileDialogFilter * _result = 0;
    HRESULT _hr = raw_Add(Description, Extensions, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

//
// interface FileDialog wrapper method implementations
//

#pragma implementation_key(335)
inline IDispatchPtr Office::FileDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(336)
inline Office::FileDialogFiltersPtr Office::FileDialog::GetFilters ( ) {
    struct FileDialogFilters * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFiltersPtr(_result, false);
}

#pragma implementation_key(337)
inline int Office::FileDialog::GetFilterIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_FilterIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void Office::FileDialog::PutFilterIndex ( int FilterIndex ) {
    HRESULT _hr = put_FilterIndex(FilterIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline _bstr_t Office::FileDialog::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(340)
inline void Office::FileDialog::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline _bstr_t Office::FileDialog::GetButtonName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void Office::FileDialog::PutButtonName ( _bstr_t ButtonName ) {
    HRESULT _hr = put_ButtonName(ButtonName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline VARIANT_BOOL Office::FileDialog::GetAllowMultiSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowMultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void Office::FileDialog::PutAllowMultiSelect ( VARIANT_BOOL pvarfAllowMultiSelect ) {
    HRESULT _hr = put_AllowMultiSelect(pvarfAllowMultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline enum Office::MsoFileDialogView Office::FileDialog::GetInitialView ( ) {
    enum MsoFileDialogView _result;
    HRESULT _hr = get_InitialView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void Office::FileDialog::PutInitialView ( enum MsoFileDialogView pinitialview ) {
    HRESULT _hr = put_InitialView(pinitialview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline _bstr_t Office::FileDialog::GetInitialFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InitialFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(348)
inline void Office::FileDialog::PutInitialFileName ( _bstr_t InitialFileName ) {
    HRESULT _hr = put_InitialFileName(InitialFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline Office::FileDialogSelectedItemsPtr Office::FileDialog::GetSelectedItems ( ) {
    struct FileDialogSelectedItems * _result = 0;
    HRESULT _hr = get_SelectedItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogSelectedItemsPtr(_result, false);
}

#pragma implementation_key(350)
inline enum Office::MsoFileDialogType Office::FileDialog::GetDialogType ( ) {
    enum MsoFileDialogType _result;
    HRESULT _hr = get_DialogType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline _bstr_t Office::FileDialog::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(352)
inline int Office::FileDialog::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(353)
inline HRESULT Office::FileDialog::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoEnvelopeVB wrapper method implementations
//

#pragma implementation_key(354)
inline _bstr_t Office::IMsoEnvelopeVB::GetIntroduction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Introduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(355)
inline void Office::IMsoEnvelopeVB::PutIntroduction ( _bstr_t pbstrIntro ) {
    HRESULT _hr = put_Introduction(pbstrIntro);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(356)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(357)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(358)
inline IDispatchPtr Office::IMsoEnvelopeVB::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface IMsoEnvelopeVBEvents wrapper method implementations
//

#pragma implementation_key(359)
inline HRESULT Office::IMsoEnvelopeVBEvents::EnvelopeShow ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(360)
inline HRESULT Office::IMsoEnvelopeVBEvents::EnvelopeHide ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface Assistant wrapper method implementations
//

#pragma implementation_key(361)
inline IDispatchPtr Office::Assistant::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(362)
inline HRESULT Office::Assistant::Move ( int xLeft, int yTop ) {
    HRESULT _hr = raw_Move(xLeft, yTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(363)
inline void Office::Assistant::PutTop ( int pyTop ) {
    HRESULT _hr = put_Top(pyTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(364)
inline int Office::Assistant::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void Office::Assistant::PutLeft ( int pxLeft ) {
    HRESULT _hr = put_Left(pxLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline int Office::Assistant::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline HRESULT Office::Assistant::Help ( ) {
    HRESULT _hr = raw_Help();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(368)
inline long Office::Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    long _result = 0;
    HRESULT _hr = raw_StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline HRESULT Office::Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation ) {
    HRESULT _hr = raw_EndWizard(WizardID, varfSuccess, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(370)
inline HRESULT Office::Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation ) {
    HRESULT _hr = raw_ActivateWizard(WizardID, act, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(371)
inline HRESULT Office::Assistant::ResetTips ( ) {
    HRESULT _hr = raw_ResetTips();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(372)
inline Office::BalloonPtr Office::Assistant::GetNewBalloon ( ) {
    struct Balloon * _result = 0;
    HRESULT _hr = get_NewBalloon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BalloonPtr(_result, false);
}

#pragma implementation_key(373)
inline enum Office::MsoBalloonErrorType Office::Assistant::GetBalloonError ( ) {
    enum MsoBalloonErrorType _result;
    HRESULT _hr = get_BalloonError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline VARIANT_BOOL Office::Assistant::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(375)
inline void Office::Assistant::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(376)
inline enum Office::MsoAnimationType Office::Assistant::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(377)
inline void Office::Assistant::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(378)
inline VARIANT_BOOL Office::Assistant::GetReduced ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Reduced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline void Office::Assistant::PutReduced ( VARIANT_BOOL pvarfReduced ) {
    HRESULT _hr = put_Reduced(pvarfReduced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(380)
inline void Office::Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp ) {
    HRESULT _hr = put_AssistWithHelp(pvarfAssistWithHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline VARIANT_BOOL Office::Assistant::GetAssistWithHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void Office::Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards ) {
    HRESULT _hr = put_AssistWithWizards(pvarfAssistWithWizards);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline VARIANT_BOOL Office::Assistant::GetAssistWithWizards ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithWizards(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(384)
inline void Office::Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts ) {
    HRESULT _hr = put_AssistWithAlerts(pvarfAssistWithAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline VARIANT_BOOL Office::Assistant::GetAssistWithAlerts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline void Office::Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove ) {
    HRESULT _hr = put_MoveWhenInTheWay(pvarfMove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline VARIANT_BOOL Office::Assistant::GetMoveWhenInTheWay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoveWhenInTheWay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void Office::Assistant::PutSounds ( VARIANT_BOOL pvarfSounds ) {
    HRESULT _hr = put_Sounds(pvarfSounds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline VARIANT_BOOL Office::Assistant::GetSounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline void Office::Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures ) {
    HRESULT _hr = put_FeatureTips(pvarfFeatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(391)
inline VARIANT_BOOL Office::Assistant::GetFeatureTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FeatureTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(392)
inline void Office::Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse ) {
    HRESULT _hr = put_MouseTips(pvarfMouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline VARIANT_BOOL Office::Assistant::GetMouseTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MouseTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void Office::Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts ) {
    HRESULT _hr = put_KeyboardShortcutTips(pvarfKeyboardShortcuts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline VARIANT_BOOL Office::Assistant::GetKeyboardShortcutTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeyboardShortcutTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(396)
inline void Office::Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips ) {
    HRESULT _hr = put_HighPriorityTips(pvarfHighPriorityTips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(397)
inline VARIANT_BOOL Office::Assistant::GetHighPriorityTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighPriorityTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline void Office::Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay ) {
    HRESULT _hr = put_TipOfDay(pvarfTipOfDay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline VARIANT_BOOL Office::Assistant::GetTipOfDay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TipOfDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(400)
inline void Office::Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp ) {
    HRESULT _hr = put_GuessHelp(pvarfGuessHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(401)
inline VARIANT_BOOL Office::Assistant::GetGuessHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GuessHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline void Office::Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram ) {
    HRESULT _hr = put_SearchWhenProgramming(pvarfSearchInProgram);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(403)
inline VARIANT_BOOL Office::Assistant::GetSearchWhenProgramming ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchWhenProgramming(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline _bstr_t Office::Assistant::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(405)
inline _bstr_t Office::Assistant::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(406)
inline void Office::Assistant::PutFileName ( _bstr_t pbstr ) {
    HRESULT _hr = put_FileName(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(407)
inline _bstr_t Office::Assistant::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(408)
inline VARIANT_BOOL Office::Assistant::GetOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void Office::Assistant::PutOn ( VARIANT_BOOL pvarfOn ) {
    HRESULT _hr = put_On(pvarfOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline int Office::Assistant::DoAlert ( _bstr_t bstrAlertTitle, _bstr_t bstrAlertText, enum MsoAlertButtonType alb, enum MsoAlertIconType alc, enum MsoAlertDefaultType ald, enum MsoAlertCancelType alq, VARIANT_BOOL varfSysAlert ) {
    int _result = 0;
    HRESULT _hr = raw_DoAlert(bstrAlertTitle, bstrAlertText, alb, alc, ald, alq, varfSysAlert, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface FileTypes wrapper method implementations
//

#pragma implementation_key(411)
inline enum Office::MsoFileType Office::FileTypes::GetItem ( int Index ) {
    enum MsoFileType _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(412)
inline int Office::FileTypes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline HRESULT Office::FileTypes::Add ( enum MsoFileType FileType ) {
    HRESULT _hr = raw_Add(FileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(414)
inline HRESULT Office::FileTypes::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(415)
inline IUnknownPtr Office::FileTypes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface OfficeDataSourceObject wrapper method implementations
//

#pragma implementation_key(416)
inline _bstr_t Office::OfficeDataSourceObject::GetConnectString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(417)
inline void Office::OfficeDataSourceObject::PutConnectString ( _bstr_t pbstrConnect ) {
    HRESULT _hr = put_ConnectString(pbstrConnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline _bstr_t Office::OfficeDataSourceObject::GetTable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(419)
inline void Office::OfficeDataSourceObject::PutTable ( _bstr_t pbstrTable ) {
    HRESULT _hr = put_Table(pbstrTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline _bstr_t Office::OfficeDataSourceObject::GetDataSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(421)
inline void Office::OfficeDataSourceObject::PutDataSource ( _bstr_t pbstrSrc ) {
    HRESULT _hr = put_DataSource(pbstrSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline IDispatchPtr Office::OfficeDataSourceObject::GetColumns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(423)
inline long Office::OfficeDataSourceObject::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline IDispatchPtr Office::OfficeDataSourceObject::GetFilters ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(425)
inline int Office::OfficeDataSourceObject::Move ( enum MsoMoveRow MsoMoveRow, int RowNbr ) {
    int _result = 0;
    HRESULT _hr = raw_Move(MsoMoveRow, RowNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline HRESULT Office::OfficeDataSourceObject::Open ( _bstr_t bstrSrc, _bstr_t bstrConnect, _bstr_t bstrTable, long fOpenExclusive, long fNeverPrompt ) {
    HRESULT _hr = raw_Open(bstrSrc, bstrConnect, bstrTable, fOpenExclusive, fNeverPrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(427)
inline HRESULT Office::OfficeDataSourceObject::SetSortOrder ( _bstr_t SortField1, VARIANT_BOOL SortAscending1, _bstr_t SortField2, VARIANT_BOOL SortAscending2, _bstr_t SortField3, VARIANT_BOOL SortAscending3 ) {
    HRESULT _hr = raw_SetSortOrder(SortField1, SortAscending1, SortField2, SortAscending2, SortField3, SortAscending3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(428)
inline HRESULT Office::OfficeDataSourceObject::ApplyFilter ( ) {
    HRESULT _hr = raw_ApplyFilter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ODSOColumn wrapper method implementations
//

#pragma implementation_key(429)
inline long Office::ODSOColumn::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline _bstr_t Office::ODSOColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(431)
inline IDispatchPtr Office::ODSOColumn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(432)
inline _bstr_t Office::ODSOColumn::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ODSOColumns wrapper method implementations
//

#pragma implementation_key(433)
inline long Office::ODSOColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline IDispatchPtr Office::ODSOColumns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(435)
inline IDispatchPtr Office::ODSOColumns::Item ( const _variant_t & varIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(varIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ODSOFilter wrapper method implementations
//

#pragma implementation_key(436)
inline long Office::ODSOFilter::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline IDispatchPtr Office::ODSOFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(438)
inline _bstr_t Office::ODSOFilter::GetColumn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(439)
inline void Office::ODSOFilter::PutColumn ( _bstr_t pbstrCol ) {
    HRESULT _hr = put_Column(pbstrCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(440)
inline enum Office::MsoFilterComparison Office::ODSOFilter::GetComparison ( ) {
    enum MsoFilterComparison _result;
    HRESULT _hr = get_Comparison(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline void Office::ODSOFilter::PutComparison ( enum MsoFilterComparison pComparison ) {
    HRESULT _hr = put_Comparison(pComparison);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(442)
inline _bstr_t Office::ODSOFilter::GetCompareTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompareTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(443)
inline void Office::ODSOFilter::PutCompareTo ( _bstr_t pbstrCompareTo ) {
    HRESULT _hr = put_CompareTo(pbstrCompareTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(444)
inline enum Office::MsoFilterConjunction Office::ODSOFilter::GetConjunction ( ) {
    enum MsoFilterConjunction _result;
    HRESULT _hr = get_Conjunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline void Office::ODSOFilter::PutConjunction ( enum MsoFilterConjunction pConjunction ) {
    HRESULT _hr = put_Conjunction(pConjunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ODSOFilters wrapper method implementations
//

#pragma implementation_key(446)
inline long Office::ODSOFilters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline IDispatchPtr Office::ODSOFilters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(448)
inline IDispatchPtr Office::ODSOFilters::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(449)
inline HRESULT Office::ODSOFilters::Add ( _bstr_t Column, enum MsoFilterComparison Comparison, enum MsoFilterConjunction Conjunction, _bstr_t bstrCompareTo, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Add(Column, Comparison, Conjunction, bstrCompareTo, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(450)
inline HRESULT Office::ODSOFilters::Delete ( long Index, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Delete(Index, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface NewFile wrapper method implementations
//

#pragma implementation_key(451)
inline VARIANT_BOOL Office::NewFile::Add ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Add(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline VARIANT_BOOL Office::NewFile::Remove ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WebComponent wrapper method implementations
//

#pragma implementation_key(453)
inline IDispatchPtr Office::WebComponent::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(454)
inline _bstr_t Office::WebComponent::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(455)
inline void Office::WebComponent::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(456)
inline _bstr_t Office::WebComponent::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(457)
inline void Office::WebComponent::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(458)
inline _bstr_t Office::WebComponent::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(459)
inline void Office::WebComponent::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline long Office::WebComponent::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void Office::WebComponent::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline long Office::WebComponent::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void Office::WebComponent::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline HRESULT Office::WebComponent::SetPlaceHolderGraphic ( _bstr_t PlaceHolderGraphic ) {
    HRESULT _hr = raw_SetPlaceHolderGraphic(PlaceHolderGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(465)
inline HRESULT Office::WebComponent::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(466)
inline HRESULT Office::WebComponent::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface WebComponentWindowExternal wrapper method implementations
//

#pragma implementation_key(467)
inline long Office::WebComponentWindowExternal::GetInterfaceVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_InterfaceVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(468)
inline _bstr_t Office::WebComponentWindowExternal::GetApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(469)
inline long Office::WebComponentWindowExternal::GetApplicationVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_ApplicationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(470)
inline IDispatchPtr Office::WebComponentWindowExternal::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(471)
inline HRESULT Office::WebComponentWindowExternal::CloseWindow ( ) {
    HRESULT _hr = raw_CloseWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(472)
inline Office::WebComponentPtr Office::WebComponentWindowExternal::GetWebComponent ( ) {
    struct WebComponent * _result = 0;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebComponentPtr(_result, false);
}

//
// interface WebComponentFormat wrapper method implementations
//

#pragma implementation_key(473)
inline IDispatchPtr Office::WebComponentFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(474)
inline IDispatchPtr Office::WebComponentFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(475)
inline _bstr_t Office::WebComponentFormat::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(476)
inline void Office::WebComponentFormat::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(477)
inline _bstr_t Office::WebComponentFormat::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(478)
inline void Office::WebComponentFormat::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline _bstr_t Office::WebComponentFormat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(480)
inline void Office::WebComponentFormat::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(481)
inline long Office::WebComponentFormat::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void Office::WebComponentFormat::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline long Office::WebComponentFormat::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void Office::WebComponentFormat::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline _bstr_t Office::WebComponentFormat::GetPreviewGraphic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(486)
inline void Office::WebComponentFormat::PutPreviewGraphic ( _bstr_t retval ) {
    HRESULT _hr = put_PreviewGraphic(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(487)
inline HRESULT Office::WebComponentFormat::LaunchPropertiesWindow ( ) {
    HRESULT _hr = raw_LaunchPropertiesWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILicWizExternal wrapper method implementations
//

#pragma implementation_key(488)
inline HRESULT Office::ILicWizExternal::PrintHtmlDocument ( IUnknown * punkHtmlDoc ) {
    HRESULT _hr = raw_PrintHtmlDocument(punkHtmlDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(489)
inline HRESULT Office::ILicWizExternal::InvokeDateTimeApplet ( ) {
    HRESULT _hr = raw_InvokeDateTimeApplet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(490)
inline _bstr_t Office::ILicWizExternal::FormatDate ( DATE date, _bstr_t pFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatDate(date, pFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(491)
inline HRESULT Office::ILicWizExternal::ShowHelp ( VARIANT * pvarId ) {
    HRESULT _hr = raw_ShowHelp(pvarId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(492)
inline HRESULT Office::ILicWizExternal::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(493)
inline HRESULT Office::ILicWizExternal::DisableVORWReminder ( long BPC ) {
    HRESULT _hr = raw_DisableVORWReminder(BPC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(494)
inline _bstr_t Office::ILicWizExternal::SaveReceipt ( _bstr_t bstrReceipt ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveReceipt(bstrReceipt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(495)
inline HRESULT Office::ILicWizExternal::OpenInDefaultBrowser ( _bstr_t bstrUrl ) {
    HRESULT _hr = raw_OpenInDefaultBrowser(bstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(496)
inline long Office::ILicWizExternal::MsoAlert ( _bstr_t bstrText, _bstr_t bstrButtons, _bstr_t bstrIcon ) {
    long _result = 0;
    HRESULT _hr = raw_MsoAlert(bstrText, bstrButtons, bstrIcon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline long Office::ILicWizExternal::DepositPidKey ( _bstr_t bstrKey, int fMORW ) {
    long _result = 0;
    HRESULT _hr = raw_DepositPidKey(bstrKey, fMORW, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(498)
inline HRESULT Office::ILicWizExternal::WriteLog ( _bstr_t bstrMessage ) {
    HRESULT _hr = raw_WriteLog(bstrMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(499)
inline HRESULT Office::ILicWizExternal::ResignDpc ( _bstr_t bstrProductCode ) {
    HRESULT _hr = raw_ResignDpc(bstrProductCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(500)
inline HRESULT Office::ILicWizExternal::ResetPID ( ) {
    HRESULT _hr = raw_ResetPID();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(501)
inline HRESULT Office::ILicWizExternal::SetDialogSize ( long dx, long dy ) {
    HRESULT _hr = raw_SetDialogSize(dx, dy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(502)
inline long Office::ILicWizExternal::VerifyClock ( long lMode ) {
    long _result = 0;
    HRESULT _hr = raw_VerifyClock(lMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline HRESULT Office::ILicWizExternal::SortSelectOptions ( IDispatch * pdispSelect ) {
    HRESULT _hr = raw_SortSelectOptions(pdispSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(504)
inline HRESULT Office::ILicWizExternal::InternetDisconnect ( ) {
    HRESULT _hr = raw_InternetDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(505)
inline int Office::ILicWizExternal::GetConnectedState ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetConnectedState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline long Office::ILicWizExternal::GetContext ( ) {
    long _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline IDispatchPtr Office::ILicWizExternal::GetValidator ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Validator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(508)
inline IDispatchPtr Office::ILicWizExternal::GetLicAgent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LicAgent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(509)
inline _bstr_t Office::ILicWizExternal::GetCountryInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CountryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(510)
inline void Office::ILicWizExternal::PutWizardVisible ( int _arg1 ) {
    HRESULT _hr = put_WizardVisible(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline void Office::ILicWizExternal::PutWizardTitle ( _bstr_t _arg1 ) {
    HRESULT _hr = put_WizardTitle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline int Office::ILicWizExternal::GetAnimationEnabled ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline void Office::ILicWizExternal::PutCurrentHelpId ( long _arg1 ) {
    HRESULT _hr = put_CurrentHelpId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline _bstr_t Office::ILicWizExternal::GetOfficeOnTheWebUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OfficeOnTheWebUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILicValidator wrapper method implementations
//

#pragma implementation_key(515)
inline _variant_t Office::ILicValidator::GetProducts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Products(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(516)
inline int Office::ILicValidator::GetSelection ( ) {
    int _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline void Office::ILicValidator::PutSelection ( int piSel ) {
    HRESULT _hr = put_Selection(piSel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILicAgent wrapper method implementations
//

#pragma implementation_key(518)
inline unsigned long Office::ILicAgent::Initialize ( unsigned long dwBPC, unsigned long dwMode, _bstr_t bstrLicSource ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_Initialize(dwBPC, dwMode, bstrLicSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline _bstr_t Office::ILicAgent::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(520)
inline HRESULT Office::ILicAgent::SetFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(521)
inline _bstr_t Office::ILicAgent::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(522)
inline HRESULT Office::ILicAgent::SetLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(523)
inline _bstr_t Office::ILicAgent::GetOrgName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOrgName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(524)
inline HRESULT Office::ILicAgent::SetOrgName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOrgName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(525)
inline _bstr_t Office::ILicAgent::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(526)
inline HRESULT Office::ILicAgent::SetEmail ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetEmail(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(527)
inline _bstr_t Office::ILicAgent::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(528)
inline HRESULT Office::ILicAgent::SetPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(529)
inline _bstr_t Office::ILicAgent::GetAddress1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(530)
inline HRESULT Office::ILicAgent::SetAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(531)
inline _bstr_t Office::ILicAgent::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(532)
inline HRESULT Office::ILicAgent::SetCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(533)
inline _bstr_t Office::ILicAgent::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(534)
inline HRESULT Office::ILicAgent::SetState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(535)
inline _bstr_t Office::ILicAgent::GetCountryCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(536)
inline HRESULT Office::ILicAgent::SetCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(537)
inline _bstr_t Office::ILicAgent::GetCountryDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCountryDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(538)
inline HRESULT Office::ILicAgent::SetCountryDesc ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryDesc(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(539)
inline _bstr_t Office::ILicAgent::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(540)
inline HRESULT Office::ILicAgent::SetZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(541)
inline unsigned long Office::ILicAgent::GetIsoLanguage ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetIsoLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline HRESULT Office::ILicAgent::SetIsoLanguage ( unsigned long dwNewVal ) {
    HRESULT _hr = raw_SetIsoLanguage(dwNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(543)
inline _bstr_t Office::ILicAgent::GetMSUpdate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMSUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(544)
inline HRESULT Office::ILicAgent::SetMSUpdate ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSUpdate(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(545)
inline _bstr_t Office::ILicAgent::GetMSOffer ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMSOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(546)
inline HRESULT Office::ILicAgent::SetMSOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(547)
inline _bstr_t Office::ILicAgent::GetOtherOffer ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOtherOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(548)
inline HRESULT Office::ILicAgent::SetOtherOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOtherOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(549)
inline _bstr_t Office::ILicAgent::GetAddress2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(550)
inline HRESULT Office::ILicAgent::SetAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(551)
inline unsigned long Office::ILicAgent::CheckSystemClock ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_CheckSystemClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(552)
inline DATE Office::ILicAgent::GetExistingExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetExistingExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline DATE Office::ILicAgent::GetNewExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetNewExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(554)
inline _bstr_t Office::ILicAgent::GetBillingFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(555)
inline HRESULT Office::ILicAgent::SetBillingFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(556)
inline _bstr_t Office::ILicAgent::GetBillingLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(557)
inline HRESULT Office::ILicAgent::SetBillingLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(558)
inline _bstr_t Office::ILicAgent::GetBillingPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline HRESULT Office::ILicAgent::SetBillingPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(560)
inline _bstr_t Office::ILicAgent::GetBillingAddress1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline HRESULT Office::ILicAgent::SetBillingAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(562)
inline _bstr_t Office::ILicAgent::GetBillingAddress2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(563)
inline HRESULT Office::ILicAgent::SetBillingAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(564)
inline _bstr_t Office::ILicAgent::GetBillingCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(565)
inline HRESULT Office::ILicAgent::SetBillingCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(566)
inline _bstr_t Office::ILicAgent::GetBillingState ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(567)
inline HRESULT Office::ILicAgent::SetBillingState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline _bstr_t Office::ILicAgent::GetBillingCountryCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(569)
inline HRESULT Office::ILicAgent::SetBillingCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(570)
inline _bstr_t Office::ILicAgent::GetBillingZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(571)
inline HRESULT Office::ILicAgent::SetBillingZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(572)
inline unsigned long Office::ILicAgent::SaveBillingInfo ( int bSave ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_SaveBillingInfo(bSave, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline int Office::ILicAgent::IsCCRenewalCountry ( _bstr_t bstrCountryCode ) {
    int _result = 0;
    HRESULT _hr = raw_IsCCRenewalCountry(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline _bstr_t Office::ILicAgent::GetVATLabel ( _bstr_t bstrCountryCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVATLabel(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline DATE Office::ILicAgent::GetCCRenewalExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCCRenewalExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline HRESULT Office::ILicAgent::SetVATNumber ( _bstr_t bstrVATNumber ) {
    HRESULT _hr = raw_SetVATNumber(bstrVATNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(577)
inline HRESULT Office::ILicAgent::SetCreditCardType ( _bstr_t bstrCCCode ) {
    HRESULT _hr = raw_SetCreditCardType(bstrCCCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(578)
inline HRESULT Office::ILicAgent::SetCreditCardNumber ( _bstr_t bstrCCNumber ) {
    HRESULT _hr = raw_SetCreditCardNumber(bstrCCNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(579)
inline HRESULT Office::ILicAgent::SetCreditCardExpiryYear ( unsigned long dwCCYear ) {
    HRESULT _hr = raw_SetCreditCardExpiryYear(dwCCYear);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(580)
inline HRESULT Office::ILicAgent::SetCreditCardExpiryMonth ( unsigned long dwCCMonth ) {
    HRESULT _hr = raw_SetCreditCardExpiryMonth(dwCCMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(581)
inline unsigned long Office::ILicAgent::GetCreditCardCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline _bstr_t Office::ILicAgent::GetCreditCardCode ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardCode(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(583)
inline _bstr_t Office::ILicAgent::GetCreditCardName ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardName(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(584)
inline _bstr_t Office::ILicAgent::GetVATNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVATNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(585)
inline _bstr_t Office::ILicAgent::GetCreditCardType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(586)
inline _bstr_t Office::ILicAgent::GetCreditCardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(587)
inline unsigned long Office::ILicAgent::GetCreditCardExpiryYear ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardExpiryYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline unsigned long Office::ILicAgent::GetCreditCardExpiryMonth ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardExpiryMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(589)
inline int Office::ILicAgent::GetDisconnectOption ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetDisconnectOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline HRESULT Office::ILicAgent::SetDisconnectOption ( int bNewVal ) {
    HRESULT _hr = raw_SetDisconnectOption(bNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(591)
inline HRESULT Office::ILicAgent::AsyncProcessHandshakeRequest ( int bReviseCustInfo ) {
    HRESULT _hr = raw_AsyncProcessHandshakeRequest(bReviseCustInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(592)
inline HRESULT Office::ILicAgent::AsyncProcessNewLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessNewLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(593)
inline HRESULT Office::ILicAgent::AsyncProcessReissueLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReissueLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(594)
inline HRESULT Office::ILicAgent::AsyncProcessRetailRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessRetailRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(595)
inline HRESULT Office::ILicAgent::AsyncProcessReviseCustInfoRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReviseCustInfoRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(596)
inline HRESULT Office::ILicAgent::AsyncProcessCCRenewalPriceRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalPriceRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(597)
inline HRESULT Office::ILicAgent::AsyncProcessCCRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(598)
inline unsigned long Office::ILicAgent::GetAsyncProcessReturnCode ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetAsyncProcessReturnCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(599)
inline int Office::ILicAgent::IsUpgradeAvailable ( ) {
    int _result = 0;
    HRESULT _hr = raw_IsUpgradeAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline HRESULT Office::ILicAgent::WantUpgrade ( int bWantUpgrade ) {
    HRESULT _hr = raw_WantUpgrade(bWantUpgrade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(601)
inline HRESULT Office::ILicAgent::AsyncProcessDroppedLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessDroppedLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(602)
inline _bstr_t Office::ILicAgent::GenerateInstallationId ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GenerateInstallationId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(603)
inline unsigned long Office::ILicAgent::DepositConfirmationId ( _bstr_t bstrVal ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_DepositConfirmationId(bstrVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline int Office::ILicAgent::VerifyCheckDigits ( _bstr_t bstrCIDIID ) {
    int _result = 0;
    HRESULT _hr = raw_VerifyCheckDigits(bstrCIDIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline DATE Office::ILicAgent::GetCurrentExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCurrentExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline HRESULT Office::ILicAgent::CancelAsyncProcessRequest ( int bIsLicenseRequest ) {
    HRESULT _hr = raw_CancelAsyncProcessRequest(bIsLicenseRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(607)
inline _bstr_t Office::ILicAgent::GetCurrencyDescription ( unsigned long dwCurrencyIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrencyDescription(dwCurrencyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(608)
inline unsigned long Office::ILicAgent::GetPriceItemCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetPriceItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline _bstr_t Office::ILicAgent::GetPriceItemLabel ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPriceItemLabel(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(610)
inline _bstr_t Office::ILicAgent::GetPriceItemValue ( unsigned long dwCurrencyIndex, unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPriceItemValue(dwCurrencyIndex, dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(611)
inline _bstr_t Office::ILicAgent::GetInvoiceText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetInvoiceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(612)
inline _bstr_t Office::ILicAgent::GetBackendErrorMsg ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBackendErrorMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(613)
inline unsigned long Office::ILicAgent::GetCurrencyOption ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCurrencyOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(614)
inline HRESULT Office::ILicAgent::SetCurrencyOption ( unsigned long dwCurrencyOption ) {
    HRESULT _hr = raw_SetCurrencyOption(dwCurrencyOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(615)
inline _bstr_t Office::ILicAgent::GetEndOfLifeHtmlText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEndOfLifeHtmlText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(616)
inline unsigned long Office::ILicAgent::DisplaySSLCert ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_DisplaySSLCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoEServicesDialog wrapper method implementations
//

#pragma implementation_key(617)
inline HRESULT Office::IMsoEServicesDialog::Close ( VARIANT_BOOL ApplyWebComponentChanges ) {
    HRESULT _hr = raw_Close(ApplyWebComponentChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(618)
inline HRESULT Office::IMsoEServicesDialog::AddTrustedDomain ( _bstr_t Domain ) {
    HRESULT _hr = raw_AddTrustedDomain(Domain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(619)
inline _bstr_t Office::IMsoEServicesDialog::GetApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(620)
inline IDispatchPtr Office::IMsoEServicesDialog::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(621)
inline IDispatchPtr Office::IMsoEServicesDialog::GetWebComponent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(622)
inline IDispatchPtr Office::IMsoEServicesDialog::GetClipArt ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ClipArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface WebComponentProperties wrapper method implementations
//

#pragma implementation_key(623)
inline IDispatchPtr Office::WebComponentProperties::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(624)
inline _bstr_t Office::WebComponentProperties::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(625)
inline void Office::WebComponentProperties::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(626)
inline _bstr_t Office::WebComponentProperties::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(627)
inline void Office::WebComponentProperties::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(628)
inline _bstr_t Office::WebComponentProperties::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(629)
inline void Office::WebComponentProperties::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline _bstr_t Office::WebComponentProperties::GetPreviewGraphic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(631)
inline void Office::WebComponentProperties::PutPreviewGraphic ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewGraphic(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(632)
inline _bstr_t Office::WebComponentProperties::GetPreviewHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(633)
inline void Office::WebComponentProperties::PutPreviewHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewHTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(634)
inline long Office::WebComponentProperties::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline void Office::WebComponentProperties::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(636)
inline long Office::WebComponentProperties::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(637)
inline void Office::WebComponentProperties::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(638)
inline _bstr_t Office::WebComponentProperties::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(639)
inline void Office::WebComponentProperties::PutTag ( _bstr_t RetValue ) {
    HRESULT _hr = put_Tag(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SmartDocument wrapper method implementations
//

#pragma implementation_key(640)
inline _bstr_t Office::SmartDocument::GetSolutionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(641)
inline void Office::SmartDocument::PutSolutionID ( _bstr_t pbstrID ) {
    HRESULT _hr = put_SolutionID(pbstrID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(642)
inline _bstr_t Office::SmartDocument::GetSolutionURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(643)
inline void Office::SmartDocument::PutSolutionURL ( _bstr_t pbstrUrl ) {
    HRESULT _hr = put_SolutionURL(pbstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(644)
inline HRESULT Office::SmartDocument::PickSolution ( VARIANT_BOOL ConsiderAllSchemas ) {
    HRESULT _hr = raw_PickSolution(ConsiderAllSchemas);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(645)
inline HRESULT Office::SmartDocument::RefreshPane ( ) {
    HRESULT _hr = raw_RefreshPane();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SharedWorkspaceMember wrapper method implementations
//

#pragma implementation_key(646)
inline _bstr_t Office::SharedWorkspaceMember::GetDomainName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DomainName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(647)
inline _bstr_t Office::SharedWorkspaceMember::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(648)
inline _bstr_t Office::SharedWorkspaceMember::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(649)
inline HRESULT Office::SharedWorkspaceMember::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(650)
inline _bstr_t Office::SharedWorkspaceMember::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline IDispatchPtr Office::SharedWorkspaceMember::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceMembers wrapper method implementations
//

#pragma implementation_key(652)
inline IUnknownPtr Office::SharedWorkspaceMembers::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(653)
inline Office::SharedWorkspaceMemberPtr Office::SharedWorkspaceMembers::GetItem ( int Index ) {
    struct SharedWorkspaceMember * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

#pragma implementation_key(654)
inline int Office::SharedWorkspaceMembers::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline Office::SharedWorkspaceMemberPtr Office::SharedWorkspaceMembers::Add ( _bstr_t Email, _bstr_t DomainName, _bstr_t DisplayName, const _variant_t & Role ) {
    struct SharedWorkspaceMember * _result = 0;
    HRESULT _hr = raw_Add(Email, DomainName, DisplayName, Role, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

#pragma implementation_key(656)
inline IDispatchPtr Office::SharedWorkspaceMembers::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(657)
inline VARIANT_BOOL Office::SharedWorkspaceMembers::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceTask wrapper method implementations
//

#pragma implementation_key(658)
inline _bstr_t Office::SharedWorkspaceTask::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(659)
inline void Office::SharedWorkspaceTask::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline _bstr_t Office::SharedWorkspaceTask::GetAssignedTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssignedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(661)
inline void Office::SharedWorkspaceTask::PutAssignedTo ( _bstr_t AssignedTo ) {
    HRESULT _hr = put_AssignedTo(AssignedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline enum Office::MsoSharedWorkspaceTaskStatus Office::SharedWorkspaceTask::GetStatus ( ) {
    enum MsoSharedWorkspaceTaskStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void Office::SharedWorkspaceTask::PutStatus ( enum MsoSharedWorkspaceTaskStatus Status ) {
    HRESULT _hr = put_Status(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline enum Office::MsoSharedWorkspaceTaskPriority Office::SharedWorkspaceTask::GetPriority ( ) {
    enum MsoSharedWorkspaceTaskPriority _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void Office::SharedWorkspaceTask::PutPriority ( enum MsoSharedWorkspaceTaskPriority Priority ) {
    HRESULT _hr = put_Priority(Priority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline _bstr_t Office::SharedWorkspaceTask::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(667)
inline void Office::SharedWorkspaceTask::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline _variant_t Office::SharedWorkspaceTask::GetDueDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(669)
inline void Office::SharedWorkspaceTask::PutDueDate ( const _variant_t & DueDate ) {
    HRESULT _hr = put_DueDate(DueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline _bstr_t Office::SharedWorkspaceTask::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(671)
inline _variant_t Office::SharedWorkspaceTask::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(672)
inline _bstr_t Office::SharedWorkspaceTask::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(673)
inline _variant_t Office::SharedWorkspaceTask::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(674)
inline HRESULT Office::SharedWorkspaceTask::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(675)
inline HRESULT Office::SharedWorkspaceTask::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(676)
inline IDispatchPtr Office::SharedWorkspaceTask::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceTasks wrapper method implementations
//

#pragma implementation_key(677)
inline Office::SharedWorkspaceTaskPtr Office::SharedWorkspaceTasks::GetItem ( int Index ) {
    struct SharedWorkspaceTask * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

#pragma implementation_key(678)
inline int Office::SharedWorkspaceTasks::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline Office::SharedWorkspaceTaskPtr Office::SharedWorkspaceTasks::Add ( _bstr_t Title, const _variant_t & Status, const _variant_t & Priority, const _variant_t & Assignee, const _variant_t & Description, const _variant_t & DueDate ) {
    struct SharedWorkspaceTask * _result = 0;
    HRESULT _hr = raw_Add(Title, Status, Priority, Assignee, Description, DueDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

#pragma implementation_key(680)
inline IDispatchPtr Office::SharedWorkspaceTasks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(681)
inline VARIANT_BOOL Office::SharedWorkspaceTasks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline IUnknownPtr Office::SharedWorkspaceTasks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SharedWorkspaceFile wrapper method implementations
//

#pragma implementation_key(683)
inline _bstr_t Office::SharedWorkspaceFile::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(684)
inline _bstr_t Office::SharedWorkspaceFile::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(685)
inline _variant_t Office::SharedWorkspaceFile::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(686)
inline _bstr_t Office::SharedWorkspaceFile::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(687)
inline _variant_t Office::SharedWorkspaceFile::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(688)
inline HRESULT Office::SharedWorkspaceFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(689)
inline IDispatchPtr Office::SharedWorkspaceFile::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFiles wrapper method implementations
//

#pragma implementation_key(690)
inline IUnknownPtr Office::SharedWorkspaceFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(691)
inline Office::SharedWorkspaceFilePtr Office::SharedWorkspaceFiles::GetItem ( int Index ) {
    struct SharedWorkspaceFile * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

#pragma implementation_key(692)
inline int Office::SharedWorkspaceFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline Office::SharedWorkspaceFilePtr Office::SharedWorkspaceFiles::Add ( _bstr_t FileName, const _variant_t & ParentFolder, const _variant_t & OverwriteIfFileAlreadyExists, const _variant_t & KeepInSync ) {
    struct SharedWorkspaceFile * _result = 0;
    HRESULT _hr = raw_Add(FileName, ParentFolder, OverwriteIfFileAlreadyExists, KeepInSync, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

#pragma implementation_key(694)
inline IDispatchPtr Office::SharedWorkspaceFiles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(695)
inline VARIANT_BOOL Office::SharedWorkspaceFiles::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceFolder wrapper method implementations
//

#pragma implementation_key(696)
inline _bstr_t Office::SharedWorkspaceFolder::GetFolderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(697)
inline HRESULT Office::SharedWorkspaceFolder::Delete ( const _variant_t & DeleteEventIfFolderContainsFiles ) {
    HRESULT _hr = raw_Delete(DeleteEventIfFolderContainsFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(698)
inline IDispatchPtr Office::SharedWorkspaceFolder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFolders wrapper method implementations
//

#pragma implementation_key(699)
inline IUnknownPtr Office::SharedWorkspaceFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(700)
inline Office::SharedWorkspaceFolderPtr Office::SharedWorkspaceFolders::GetItem ( int Index ) {
    struct SharedWorkspaceFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

#pragma implementation_key(701)
inline int Office::SharedWorkspaceFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline Office::SharedWorkspaceFolderPtr Office::SharedWorkspaceFolders::Add ( _bstr_t FolderName, const _variant_t & ParentFolder ) {
    struct SharedWorkspaceFolder * _result = 0;
    HRESULT _hr = raw_Add(FolderName, ParentFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

#pragma implementation_key(703)
inline IDispatchPtr Office::SharedWorkspaceFolders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(704)
inline VARIANT_BOOL Office::SharedWorkspaceFolders::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceLink wrapper method implementations
//

#pragma implementation_key(705)
inline _bstr_t Office::SharedWorkspaceLink::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(706)
inline void Office::SharedWorkspaceLink::PutURL ( _bstr_t URL ) {
    HRESULT _hr = put_URL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline _bstr_t Office::SharedWorkspaceLink::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(708)
inline void Office::SharedWorkspaceLink::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline _bstr_t Office::SharedWorkspaceLink::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(710)
inline void Office::SharedWorkspaceLink::PutNotes ( _bstr_t Notes ) {
    HRESULT _hr = put_Notes(Notes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline _bstr_t Office::SharedWorkspaceLink::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline _variant_t Office::SharedWorkspaceLink::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(713)
inline _bstr_t Office::SharedWorkspaceLink::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(714)
inline _variant_t Office::SharedWorkspaceLink::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(715)
inline HRESULT Office::SharedWorkspaceLink::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(716)
inline HRESULT Office::SharedWorkspaceLink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(717)
inline IDispatchPtr Office::SharedWorkspaceLink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceLinks wrapper method implementations
//

#pragma implementation_key(718)
inline IUnknownPtr Office::SharedWorkspaceLinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(719)
inline Office::SharedWorkspaceLinkPtr Office::SharedWorkspaceLinks::GetItem ( int Index ) {
    struct SharedWorkspaceLink * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

#pragma implementation_key(720)
inline int Office::SharedWorkspaceLinks::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline Office::SharedWorkspaceLinkPtr Office::SharedWorkspaceLinks::Add ( _bstr_t URL, const _variant_t & Description, const _variant_t & Notes ) {
    struct SharedWorkspaceLink * _result = 0;
    HRESULT _hr = raw_Add(URL, Description, Notes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

#pragma implementation_key(722)
inline IDispatchPtr Office::SharedWorkspaceLinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(723)
inline VARIANT_BOOL Office::SharedWorkspaceLinks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspace wrapper method implementations
//

#pragma implementation_key(724)
inline _bstr_t Office::SharedWorkspace::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(725)
inline void Office::SharedWorkspace::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline Office::SharedWorkspaceMembersPtr Office::SharedWorkspace::GetMembers ( ) {
    struct SharedWorkspaceMembers * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMembersPtr(_result, false);
}

#pragma implementation_key(727)
inline Office::SharedWorkspaceTasksPtr Office::SharedWorkspace::GetTasks ( ) {
    struct SharedWorkspaceTasks * _result = 0;
    HRESULT _hr = get_Tasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTasksPtr(_result, false);
}

#pragma implementation_key(728)
inline Office::SharedWorkspaceFilesPtr Office::SharedWorkspace::GetFiles ( ) {
    struct SharedWorkspaceFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilesPtr(_result, false);
}

#pragma implementation_key(729)
inline Office::SharedWorkspaceFoldersPtr Office::SharedWorkspace::GetFolders ( ) {
    struct SharedWorkspaceFolders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFoldersPtr(_result, false);
}

#pragma implementation_key(730)
inline Office::SharedWorkspaceLinksPtr Office::SharedWorkspace::GetLinks ( ) {
    struct SharedWorkspaceLinks * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinksPtr(_result, false);
}

#pragma implementation_key(731)
inline HRESULT Office::SharedWorkspace::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(732)
inline HRESULT Office::SharedWorkspace::CreateNew ( const _variant_t & URL, const _variant_t & Name ) {
    HRESULT _hr = raw_CreateNew(URL, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(733)
inline HRESULT Office::SharedWorkspace::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(734)
inline IDispatchPtr Office::SharedWorkspace::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(735)
inline _bstr_t Office::SharedWorkspace::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(736)
inline VARIANT_BOOL Office::SharedWorkspace::GetConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline _variant_t Office::SharedWorkspace::GetLastRefreshed ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastRefreshed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(738)
inline _bstr_t Office::SharedWorkspace::GetSourceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(739)
inline void Office::SharedWorkspace::PutSourceURL ( _bstr_t pbstrSourceURL ) {
    HRESULT _hr = put_SourceURL(pbstrSourceURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline HRESULT Office::SharedWorkspace::RemoveDocument ( ) {
    HRESULT _hr = raw_RemoveDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(741)
inline HRESULT Office::SharedWorkspace::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sync wrapper method implementations
//

#pragma implementation_key(742)
inline enum Office::MsoSyncStatusType Office::Sync::GetStatus ( ) {
    enum MsoSyncStatusType _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline _bstr_t Office::Sync::GetWorkspaceLastChangedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkspaceLastChangedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(744)
inline _variant_t Office::Sync::GetLastSyncTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastSyncTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(745)
inline enum Office::MsoSyncErrorType Office::Sync::GetErrorType ( ) {
    enum MsoSyncErrorType _result;
    HRESULT _hr = get_ErrorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline HRESULT Office::Sync::GetUpdate ( ) {
    HRESULT _hr = raw_GetUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(747)
inline HRESULT Office::Sync::PutUpdate ( ) {
    HRESULT _hr = raw_PutUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(748)
inline HRESULT Office::Sync::OpenVersion ( enum MsoSyncVersionType SyncVersionType ) {
    HRESULT _hr = raw_OpenVersion(SyncVersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(749)
inline HRESULT Office::Sync::ResolveConflict ( enum MsoSyncConflictResolutionType SyncConflictResolution ) {
    HRESULT _hr = raw_ResolveConflict(SyncConflictResolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(750)
inline HRESULT Office::Sync::Unsuspend ( ) {
    HRESULT _hr = raw_Unsuspend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(751)
inline IDispatchPtr Office::Sync::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersion wrapper method implementations
//

#pragma implementation_key(752)
inline _variant_t Office::DocumentLibraryVersion::GetModified ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Modified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(753)
inline long Office::DocumentLibraryVersion::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline IDispatchPtr Office::DocumentLibraryVersion::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(755)
inline _bstr_t Office::DocumentLibraryVersion::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(756)
inline _bstr_t Office::DocumentLibraryVersion::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(757)
inline HRESULT Office::DocumentLibraryVersion::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(758)
inline IDispatchPtr Office::DocumentLibraryVersion::Open ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(759)
inline IDispatchPtr Office::DocumentLibraryVersion::Restore ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Restore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersions wrapper method implementations
//

#pragma implementation_key(760)
inline Office::DocumentLibraryVersionPtr Office::DocumentLibraryVersions::GetItem ( long lIndex ) {
    struct DocumentLibraryVersion * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentLibraryVersionPtr(_result, false);
}

#pragma implementation_key(761)
inline long Office::DocumentLibraryVersions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline IDispatchPtr Office::DocumentLibraryVersions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(763)
inline VARIANT_BOOL Office::DocumentLibraryVersions::GetIsVersioningEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVersioningEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline IUnknownPtr Office::DocumentLibraryVersions::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface UserPermission wrapper method implementations
//

#pragma implementation_key(765)
inline _bstr_t Office::UserPermission::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(766)
inline long Office::UserPermission::GetPermission ( ) {
    long _result = 0;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void Office::UserPermission::PutPermission ( long Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline _variant_t Office::UserPermission::GetExpirationDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(769)
inline void Office::UserPermission::PutExpirationDate ( const _variant_t & ExpirationDate ) {
    HRESULT _hr = put_ExpirationDate(ExpirationDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline IDispatchPtr Office::UserPermission::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(771)
inline HRESULT Office::UserPermission::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Permission wrapper method implementations
//

#pragma implementation_key(772)
inline Office::UserPermissionPtr Office::Permission::GetItem ( const _variant_t & Index ) {
    struct UserPermission * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

#pragma implementation_key(773)
inline long Office::Permission::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline VARIANT_BOOL Office::Permission::GetEnableTrustedBrowser ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTrustedBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void Office::Permission::PutEnableTrustedBrowser ( VARIANT_BOOL Enable ) {
    HRESULT _hr = put_EnableTrustedBrowser(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline Office::UserPermissionPtr Office::Permission::Add ( _bstr_t UserId, const _variant_t & Permission, const _variant_t & ExpirationDate ) {
    struct UserPermission * _result = 0;
    HRESULT _hr = raw_Add(UserId, Permission, ExpirationDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

#pragma implementation_key(777)
inline HRESULT Office::Permission::ApplyPolicy ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyPolicy(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(778)
inline IDispatchPtr Office::Permission::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(779)
inline HRESULT Office::Permission::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(780)
inline VARIANT_BOOL Office::Permission::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void Office::Permission::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline _bstr_t Office::Permission::GetRequestPermissionURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestPermissionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline void Office::Permission::PutRequestPermissionURL ( _bstr_t Contact ) {
    HRESULT _hr = put_RequestPermissionURL(Contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline _bstr_t Office::Permission::GetPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(785)
inline _bstr_t Office::Permission::GetPolicyDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PolicyDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(786)
inline VARIANT_BOOL Office::Permission::GetStoreLicenses ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StoreLicenses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(787)
inline void Office::Permission::PutStoreLicenses ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_StoreLicenses(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(788)
inline _bstr_t Office::Permission::GetDocumentAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(789)
inline void Office::Permission::PutDocumentAuthor ( _bstr_t Author ) {
    HRESULT _hr = put_DocumentAuthor(Author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(790)
inline VARIANT_BOOL Office::Permission::GetPermissionFromPolicy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PermissionFromPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline IUnknownPtr Office::Permission::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface MsoDebugOptions_UTRunResult wrapper method implementations
//

#pragma implementation_key(792)
inline VARIANT_BOOL Office::MsoDebugOptions_UTRunResult::GetPassed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Passed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline _bstr_t Office::MsoDebugOptions_UTRunResult::GetErrorString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface MsoDebugOptions_UT wrapper method implementations
//

#pragma implementation_key(794)
inline _bstr_t Office::MsoDebugOptions_UT::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(795)
inline _bstr_t Office::MsoDebugOptions_UT::GetCollectionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CollectionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline Office::MsoDebugOptions_UTRunResultPtr Office::MsoDebugOptions_UT::Run ( ) {
    struct MsoDebugOptions_UTRunResult * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTRunResultPtr(_result, false);
}

//
// interface MsoDebugOptions_UTs wrapper method implementations
//

#pragma implementation_key(797)
inline Office::MsoDebugOptions_UTPtr Office::MsoDebugOptions_UTs::GetItem ( int Index ) {
    struct MsoDebugOptions_UT * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTPtr(_result, false);
}

#pragma implementation_key(798)
inline int Office::MsoDebugOptions_UTs::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline IUnknownPtr Office::MsoDebugOptions_UTs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(800)
inline Office::MsoDebugOptions_UTsPtr Office::MsoDebugOptions_UTs::GetUnitTestsInCollection ( _bstr_t bstrCollectionName ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = raw_GetUnitTestsInCollection(bstrCollectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

#pragma implementation_key(801)
inline Office::MsoDebugOptions_UTPtr Office::MsoDebugOptions_UTs::GetUnitTest ( _bstr_t bstrCollectionName, _bstr_t bstrUnitTestName ) {
    struct MsoDebugOptions_UT * _result = 0;
    HRESULT _hr = raw_GetUnitTest(bstrCollectionName, bstrUnitTestName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTPtr(_result, false);
}

#pragma implementation_key(802)
inline Office::MsoDebugOptions_UTsPtr Office::MsoDebugOptions_UTs::GetMatchingUnitTestsInCollection ( _bstr_t bstrCollectionName, _bstr_t bstrUnitTestNameFilter ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = raw_GetMatchingUnitTestsInCollection(bstrCollectionName, bstrUnitTestNameFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

//
// interface MsoDebugOptions_UTManager wrapper method implementations
//

#pragma implementation_key(803)
inline Office::MsoDebugOptions_UTsPtr Office::MsoDebugOptions_UTManager::GetUnitTests ( ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = get_UnitTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

#pragma implementation_key(804)
inline HRESULT Office::MsoDebugOptions_UTManager::NotifyStartOfTestSuiteRun ( ) {
    HRESULT _hr = raw_NotifyStartOfTestSuiteRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(805)
inline HRESULT Office::MsoDebugOptions_UTManager::NotifyEndOfTestSuiteRun ( ) {
    HRESULT _hr = raw_NotifyEndOfTestSuiteRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(806)
inline VARIANT_BOOL Office::MsoDebugOptions_UTManager::GetReportErrors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void Office::MsoDebugOptions_UTManager::PutReportErrors ( VARIANT_BOOL pfReportErrors ) {
    HRESULT _hr = put_ReportErrors(pfReportErrors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MetaProperty wrapper method implementations
//

#pragma implementation_key(808)
inline _variant_t Office::MetaProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(809)
inline void Office::MetaProperty::PutValue ( const _variant_t & pvarValue ) {
    HRESULT _hr = put_Value(pvarValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline _bstr_t Office::MetaProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(811)
inline _bstr_t Office::MetaProperty::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(812)
inline VARIANT_BOOL Office::MetaProperty::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline VARIANT_BOOL Office::MetaProperty::GetIsRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRequired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(814)
inline enum Office::MsoMetaPropertyType Office::MetaProperty::GetType ( ) {
    enum MsoMetaPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline _bstr_t Office::MetaProperty::Validate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(816)
inline _bstr_t Office::MetaProperty::GetValidationError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(817)
inline IDispatchPtr Office::MetaProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface MetaProperties wrapper method implementations
//

#pragma implementation_key(818)
inline Office::MetaPropertyPtr Office::MetaProperties::GetItem ( const _variant_t & Index ) {
    struct MetaProperty * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MetaPropertyPtr(_result, false);
}

#pragma implementation_key(819)
inline Office::MetaPropertyPtr Office::MetaProperties::GetItemByInternalName ( _bstr_t InternalName ) {
    struct MetaProperty * _result = 0;
    HRESULT _hr = raw_GetItemByInternalName(InternalName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MetaPropertyPtr(_result, false);
}

#pragma implementation_key(820)
inline long Office::MetaProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline _bstr_t Office::MetaProperties::Validate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(822)
inline _bstr_t Office::MetaProperties::GetValidationError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(823)
inline IDispatchPtr Office::MetaProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(824)
inline _bstr_t Office::MetaProperties::GetSchemaXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SchemaXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(825)
inline IUnknownPtr Office::MetaProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PolicyItem wrapper method implementations
//

#pragma implementation_key(826)
inline _bstr_t Office::PolicyItem::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(827)
inline _bstr_t Office::PolicyItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(828)
inline _bstr_t Office::PolicyItem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(829)
inline _bstr_t Office::PolicyItem::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline IDispatchPtr Office::PolicyItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ServerPolicy wrapper method implementations
//

#pragma implementation_key(831)
inline Office::PolicyItemPtr Office::ServerPolicy::GetItem ( const _variant_t & Index ) {
    struct PolicyItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PolicyItemPtr(_result, false);
}

#pragma implementation_key(832)
inline _bstr_t Office::ServerPolicy::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(833)
inline _bstr_t Office::ServerPolicy::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(834)
inline _bstr_t Office::ServerPolicy::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline _bstr_t Office::ServerPolicy::GetStatement ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Statement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(836)
inline long Office::ServerPolicy::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline VARIANT_BOOL Office::ServerPolicy::GetBlockPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline IDispatchPtr Office::ServerPolicy::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentInspector wrapper method implementations
//

#pragma implementation_key(839)
inline _bstr_t Office::DocumentInspector::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(840)
inline _bstr_t Office::DocumentInspector::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(841)
inline HRESULT Office::DocumentInspector::Inspect ( enum MsoDocInspectorStatus * Status, BSTR * Results ) {
    HRESULT _hr = raw_Inspect(Status, Results);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(842)
inline HRESULT Office::DocumentInspector::Fix ( enum MsoDocInspectorStatus * Status, BSTR * Results ) {
    HRESULT _hr = raw_Fix(Status, Results);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline IDispatchPtr Office::DocumentInspector::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentInspectors wrapper method implementations
//

#pragma implementation_key(844)
inline IUnknownPtr Office::DocumentInspectors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(845)
inline Office::DocumentInspectorPtr Office::DocumentInspectors::GetItem ( int Index ) {
    struct DocumentInspector * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentInspectorPtr(_result, false);
}

#pragma implementation_key(846)
inline int Office::DocumentInspectors::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline IDispatchPtr Office::DocumentInspectors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface WorkflowTask wrapper method implementations
//

#pragma implementation_key(848)
inline _bstr_t Office::WorkflowTask::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(849)
inline _bstr_t Office::WorkflowTask::GetListID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline _bstr_t Office::WorkflowTask::GetWorkflowID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkflowID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(851)
inline _bstr_t Office::WorkflowTask::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline _bstr_t Office::WorkflowTask::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(853)
inline _bstr_t Office::WorkflowTask::GetAssignedTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssignedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(854)
inline _bstr_t Office::WorkflowTask::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(855)
inline DATE Office::WorkflowTask::GetDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline DATE Office::WorkflowTask::GetCreatedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline int Office::WorkflowTask::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WorkflowTasks wrapper method implementations
//

#pragma implementation_key(858)
inline Office::WorkflowTaskPtr Office::WorkflowTasks::GetItem ( long Index ) {
    struct WorkflowTask * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkflowTaskPtr(_result, false);
}

#pragma implementation_key(859)
inline long Office::WorkflowTasks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline IUnknownPtr Office::WorkflowTasks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface WorkflowTemplate wrapper method implementations
//

#pragma implementation_key(861)
inline _bstr_t Office::WorkflowTemplate::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(862)
inline _bstr_t Office::WorkflowTemplate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(863)
inline _bstr_t Office::WorkflowTemplate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(864)
inline _bstr_t Office::WorkflowTemplate::GetDocumentLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentLibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline _bstr_t Office::WorkflowTemplate::GetDocumentLibraryURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentLibraryURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(866)
inline int Office::WorkflowTemplate::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WorkflowTemplates wrapper method implementations
//

#pragma implementation_key(867)
inline Office::WorkflowTemplatePtr Office::WorkflowTemplates::GetItem ( long Index ) {
    struct WorkflowTemplate * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkflowTemplatePtr(_result, false);
}

#pragma implementation_key(868)
inline long Office::WorkflowTemplates::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(869)
inline IUnknownPtr Office::WorkflowTemplates::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDocumentInspector wrapper method implementations
//

#pragma implementation_key(870)
inline HRESULT Office::IDocumentInspector::GetInfo ( BSTR * Name, BSTR * Desc ) {
    HRESULT _hr = raw_GetInfo(Name, Desc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(871)
inline HRESULT Office::IDocumentInspector::Inspect ( IDispatch * Doc, enum MsoDocInspectorStatus * Status, BSTR * Result, BSTR * Action ) {
    HRESULT _hr = raw_Inspect(Doc, Status, Result, Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(872)
inline HRESULT Office::IDocumentInspector::Fix ( IDispatch * Doc, long hwnd, enum MsoDocInspectorStatus * Status, BSTR * Result ) {
    HRESULT _hr = raw_Fix(Doc, hwnd, Status, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SignatureSetup wrapper method implementations
//

#pragma implementation_key(873)
inline VARIANT_BOOL Office::SignatureSetup::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline _bstr_t Office::SignatureSetup::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(875)
inline _bstr_t Office::SignatureSetup::GetSignatureProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(876)
inline _bstr_t Office::SignatureSetup::GetSuggestedSigner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSigner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(877)
inline void Office::SignatureSetup::PutSuggestedSigner ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSigner(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(878)
inline _bstr_t Office::SignatureSetup::GetSuggestedSignerLine2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSignerLine2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(879)
inline void Office::SignatureSetup::PutSuggestedSignerLine2 ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSignerLine2(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(880)
inline _bstr_t Office::SignatureSetup::GetSuggestedSignerEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSignerEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(881)
inline void Office::SignatureSetup::PutSuggestedSignerEmail ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSignerEmail(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(882)
inline _bstr_t Office::SignatureSetup::GetSigningInstructions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SigningInstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(883)
inline void Office::SignatureSetup::PutSigningInstructions ( _bstr_t pbstr ) {
    HRESULT _hr = put_SigningInstructions(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline VARIANT_BOOL Office::SignatureSetup::GetAllowComments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(885)
inline void Office::SignatureSetup::PutAllowComments ( VARIANT_BOOL pvarf ) {
    HRESULT _hr = put_AllowComments(pvarf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(886)
inline VARIANT_BOOL Office::SignatureSetup::GetShowSignDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSignDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void Office::SignatureSetup::PutShowSignDate ( VARIANT_BOOL pvarf ) {
    HRESULT _hr = put_ShowSignDate(pvarf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline _bstr_t Office::SignatureSetup::GetAdditionalXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AdditionalXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline void Office::SignatureSetup::PutAdditionalXml ( _bstr_t pbstr ) {
    HRESULT _hr = put_AdditionalXml(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SignatureInfo wrapper method implementations
//

#pragma implementation_key(890)
inline VARIANT_BOOL Office::SignatureInfo::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline _bstr_t Office::SignatureInfo::GetSignatureProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(892)
inline _bstr_t Office::SignatureInfo::GetSignatureText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(893)
inline void Office::SignatureInfo::PutSignatureText ( _bstr_t pbstr ) {
    HRESULT _hr = put_SignatureText(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline IPictureDisp * Office::SignatureInfo::GetSignatureImage ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_SignatureImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void Office::SignatureInfo::PutSignatureImage ( IPictureDisp * ppipictdisp ) {
    HRESULT _hr = put_SignatureImage(ppipictdisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline _bstr_t Office::SignatureInfo::GetSignatureComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(897)
inline void Office::SignatureInfo::PutSignatureComment ( _bstr_t pbstr ) {
    HRESULT _hr = put_SignatureComment(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline _variant_t Office::SignatureInfo::GetSignatureDetail ( enum SignatureDetail sigdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSignatureDetail(sigdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(899)
inline _variant_t Office::SignatureInfo::GetCertificateDetail ( enum CertificateDetail certdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCertificateDetail(certdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(900)
inline enum Office::ContentVerificationResults Office::SignatureInfo::GetContentVerificationResults ( ) {
    enum ContentVerificationResults _result;
    HRESULT _hr = get_ContentVerificationResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline enum Office::CertificateVerificationResults Office::SignatureInfo::GetCertificateVerificationResults ( ) {
    enum CertificateVerificationResults _result;
    HRESULT _hr = get_CertificateVerificationResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline VARIANT_BOOL Office::SignatureInfo::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline VARIANT_BOOL Office::SignatureInfo::GetIsCertificateExpired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(904)
inline VARIANT_BOOL Office::SignatureInfo::GetIsCertificateRevoked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateRevoked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline VARIANT_BOOL Office::SignatureInfo::GetIsCertificateUntrusted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateUntrusted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(906)
inline HRESULT Office::SignatureInfo::ShowSignatureCertificate ( IUnknown * ParentWindow ) {
    HRESULT _hr = raw_ShowSignatureCertificate(ParentWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(907)
inline HRESULT Office::SignatureInfo::SelectSignatureCertificate ( IUnknown * ParentWindow ) {
    HRESULT _hr = raw_SelectSignatureCertificate(ParentWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(908)
inline HRESULT Office::SignatureInfo::SelectCertificateDetailByThumbprint ( _bstr_t bstrThumbprint ) {
    HRESULT _hr = raw_SelectCertificateDetailByThumbprint(bstrThumbprint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Signature wrapper method implementations
//

#pragma implementation_key(909)
inline _bstr_t Office::Signature::GetSigner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Signer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline _bstr_t Office::Signature::GetIssuer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Issuer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(911)
inline _variant_t Office::Signature::GetExpireDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpireDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(912)
inline VARIANT_BOOL Office::Signature::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline VARIANT_BOOL Office::Signature::GetAttachCertificate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AttachCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void Office::Signature::PutAttachCertificate ( VARIANT_BOOL pvarfAttach ) {
    HRESULT _hr = put_AttachCertificate(pvarfAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline HRESULT Office::Signature::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(916)
inline IDispatchPtr Office::Signature::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(917)
inline VARIANT_BOOL Office::Signature::GetIsCertificateExpired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline VARIANT_BOOL Office::Signature::GetIsCertificateRevoked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateRevoked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline _variant_t Office::Signature::GetSignDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SignDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(920)
inline VARIANT_BOOL Office::Signature::GetIsSigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline HRESULT Office::Signature::Sign ( const _variant_t & varSigImg, const _variant_t & varDelSuggSigner, const _variant_t & varDelSuggSignerLine2, const _variant_t & varDelSuggSignerEmail ) {
    HRESULT _hr = raw_Sign(varSigImg, varDelSuggSigner, varDelSuggSignerLine2, varDelSuggSignerEmail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(922)
inline Office::SignatureInfoPtr Office::Signature::GetDetails ( ) {
    struct SignatureInfo * _result = 0;
    HRESULT _hr = get_Details(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignatureInfoPtr(_result, false);
}

#pragma implementation_key(923)
inline HRESULT Office::Signature::ShowDetails ( ) {
    HRESULT _hr = raw_ShowDetails();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(924)
inline VARIANT_BOOL Office::Signature::GetCanSetup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline Office::SignatureSetupPtr Office::Signature::GetSetup ( ) {
    struct SignatureSetup * _result = 0;
    HRESULT _hr = get_Setup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignatureSetupPtr(_result, false);
}

#pragma implementation_key(926)
inline VARIANT_BOOL Office::Signature::GetIsSignatureLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSignatureLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(927)
inline IDispatchPtr Office::Signature::GetSignatureLineShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SignatureLineShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(928)
inline long Office::Signature::GetSortHint ( ) {
    long _result = 0;
    HRESULT _hr = get_SortHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SignatureSet wrapper method implementations
//

#pragma implementation_key(929)
inline IUnknownPtr Office::SignatureSet::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(930)
inline int Office::SignatureSet::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline Office::SignaturePtr Office::SignatureSet::GetItem ( int iSig ) {
    struct Signature * _result = 0;
    HRESULT _hr = get_Item(iSig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(932)
inline Office::SignaturePtr Office::SignatureSet::Add ( ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(933)
inline HRESULT Office::SignatureSet::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(934)
inline IDispatchPtr Office::SignatureSet::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(935)
inline Office::SignaturePtr Office::SignatureSet::AddNonVisibleSignature ( const _variant_t & varSigProv ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_AddNonVisibleSignature(varSigProv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(936)
inline VARIANT_BOOL Office::SignatureSet::GetCanAddSignatureLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanAddSignatureLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline Office::SignaturePtr Office::SignatureSet::AddSignatureLine ( const _variant_t & varSigProv ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_AddSignatureLine(varSigProv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

#pragma implementation_key(938)
inline enum Office::MsoSignatureSubset Office::SignatureSet::GetSubset ( ) {
    enum MsoSignatureSubset _result;
    HRESULT _hr = get_Subset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void Office::SignatureSet::PutSubset ( enum MsoSignatureSubset psubset ) {
    HRESULT _hr = put_Subset(psubset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline void Office::SignatureSet::PutShowSignaturesPane ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_ShowSignaturesPane(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SignatureProvider wrapper method implementations
//

#pragma implementation_key(941)
inline IPictureDisp * Office::SignatureProvider::GenerateSignatureLineImage ( enum SignatureLineImage siglnimg, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = raw_GenerateSignatureLineImage(siglnimg, psigsetup, psiginfo, XmlDsigStream, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline HRESULT Office::SignatureProvider::ShowSignatureSetup ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup ) {
    HRESULT _hr = raw_ShowSignatureSetup(ParentWindow, psigsetup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(943)
inline HRESULT Office::SignatureProvider::ShowSigningCeremony ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo ) {
    HRESULT _hr = raw_ShowSigningCeremony(ParentWindow, psigsetup, psiginfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(944)
inline HRESULT Office::SignatureProvider::SignXmlDsig ( IUnknown * QueryContinue, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream ) {
    HRESULT _hr = raw_SignXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(945)
inline HRESULT Office::SignatureProvider::NotifySignatureAdded ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo ) {
    HRESULT _hr = raw_NotifySignatureAdded(ParentWindow, psigsetup, psiginfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(946)
inline HRESULT Office::SignatureProvider::VerifyXmlDsig ( IUnknown * QueryContinue, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream, enum ContentVerificationResults * pcontverres, enum CertificateVerificationResults * pcertverres ) {
    HRESULT _hr = raw_VerifyXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(947)
inline HRESULT Office::SignatureProvider::ShowSignatureDetails ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream, enum ContentVerificationResults * pcontverres, enum CertificateVerificationResults * pcertverres ) {
    HRESULT _hr = raw_ShowSignatureDetails(ParentWindow, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(948)
inline _variant_t Office::SignatureProvider::GetProviderDetail ( enum SignatureProviderDetail sigprovdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProviderDetail(sigprovdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(949)
inline SAFEARRAY * Office::SignatureProvider::HashStream ( IUnknown * QueryContinue, IUnknown * Stream ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_HashStream(QueryContinue, Stream, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CustomXMLPrefixMapping wrapper method implementations
//

#pragma implementation_key(950)
inline IDispatchPtr Office::CustomXMLPrefixMapping::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(951)
inline _bstr_t Office::CustomXMLPrefixMapping::GetPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(952)
inline _bstr_t Office::CustomXMLPrefixMapping::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface CustomXMLPrefixMappings wrapper method implementations
//

#pragma implementation_key(953)
inline IDispatchPtr Office::CustomXMLPrefixMappings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(954)
inline long Office::CustomXMLPrefixMappings::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline Office::CustomXMLPrefixMappingPtr Office::CustomXMLPrefixMappings::GetItem ( const _variant_t & Index ) {
    struct CustomXMLPrefixMapping * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLPrefixMappingPtr(_result, false);
}

#pragma implementation_key(956)
inline HRESULT Office::CustomXMLPrefixMappings::AddNamespace ( _bstr_t Prefix, _bstr_t NamespaceURI ) {
    HRESULT _hr = raw_AddNamespace(Prefix, NamespaceURI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(957)
inline _bstr_t Office::CustomXMLPrefixMappings::LookupNamespace ( _bstr_t Prefix ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LookupNamespace(Prefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(958)
inline _bstr_t Office::CustomXMLPrefixMappings::LookupPrefix ( _bstr_t NamespaceURI ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LookupPrefix(NamespaceURI, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(959)
inline IUnknownPtr Office::CustomXMLPrefixMappings::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface CustomXMLSchema wrapper method implementations
//

#pragma implementation_key(960)
inline IDispatchPtr Office::CustomXMLSchema::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(961)
inline _bstr_t Office::CustomXMLSchema::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(962)
inline _bstr_t Office::CustomXMLSchema::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(963)
inline HRESULT Office::CustomXMLSchema::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(964)
inline HRESULT Office::CustomXMLSchema::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _CustomXMLSchemaCollection wrapper method implementations
//

#pragma implementation_key(965)
inline IDispatchPtr Office::_CustomXMLSchemaCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(966)
inline long Office::_CustomXMLSchemaCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline Office::CustomXMLSchemaPtr Office::_CustomXMLSchemaCollection::GetItem ( const _variant_t & Index ) {
    struct CustomXMLSchema * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLSchemaPtr(_result, false);
}

#pragma implementation_key(968)
inline _bstr_t Office::_CustomXMLSchemaCollection::GetNamespaceURI ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(969)
inline Office::CustomXMLSchemaPtr Office::_CustomXMLSchemaCollection::Add ( _bstr_t NamespaceURI, _bstr_t Alias, _bstr_t FileName, VARIANT_BOOL InstallForAllUsers ) {
    struct CustomXMLSchema * _result = 0;
    HRESULT _hr = raw_Add(NamespaceURI, Alias, FileName, InstallForAllUsers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLSchemaPtr(_result, false);
}

#pragma implementation_key(970)
inline HRESULT Office::_CustomXMLSchemaCollection::AddCollection ( struct _CustomXMLSchemaCollection * SchemaCollection ) {
    HRESULT _hr = raw_AddCollection(SchemaCollection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(971)
inline VARIANT_BOOL Office::_CustomXMLSchemaCollection::Validate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline IUnknownPtr Office::_CustomXMLSchemaCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// dispinterface _CustomXMLPartEvents wrapper method implementations
//

#pragma implementation_key(973)
inline HRESULT Office::_CustomXMLPartEvents::NodeAfterInsert ( struct CustomXMLNode * NewNode, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x000b", NewNode, InUndoRedo);
}

#pragma implementation_key(974)
inline HRESULT Office::_CustomXMLPartEvents::NodeAfterDelete ( struct CustomXMLNode * OldNode, struct CustomXMLNode * OldParentNode, struct CustomXMLNode * OldNextSibling, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0009\x000b", OldNode, OldParentNode, OldNextSibling, InUndoRedo);
}

#pragma implementation_key(975)
inline HRESULT Office::_CustomXMLPartEvents::NodeAfterReplace ( struct CustomXMLNode * OldNode, struct CustomXMLNode * NewNode, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x000b", OldNode, NewNode, InUndoRedo);
}

//
// dispinterface _CustomXMLPartsEvents wrapper method implementations
//

#pragma implementation_key(976)
inline HRESULT Office::_CustomXMLPartsEvents::PartAfterAdd ( struct _CustomXMLPart * NewPart ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewPart);
}

#pragma implementation_key(977)
inline HRESULT Office::_CustomXMLPartsEvents::PartBeforeDelete ( struct _CustomXMLPart * OldPart ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", OldPart);
}

#pragma implementation_key(978)
inline HRESULT Office::_CustomXMLPartsEvents::PartAfterLoad ( struct _CustomXMLPart * Part ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Part);
}

//
// interface _CustomXMLParts wrapper method implementations
//

#pragma implementation_key(979)
inline IDispatchPtr Office::_CustomXMLParts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(980)
inline long Office::_CustomXMLParts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline Office::_CustomXMLPartPtr Office::_CustomXMLParts::GetItem ( const _variant_t & Index ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(982)
inline Office::_CustomXMLPartPtr Office::_CustomXMLParts::Add ( _bstr_t XML, const _variant_t & SchemaCollection ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Add(XML, SchemaCollection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(983)
inline Office::_CustomXMLPartPtr Office::_CustomXMLParts::SelectByID ( _bstr_t Id ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = raw_SelectByID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(984)
inline Office::_CustomXMLPartsPtr Office::_CustomXMLParts::SelectByNamespace ( _bstr_t NamespaceURI ) {
    struct _CustomXMLParts * _result = 0;
    HRESULT _hr = raw_SelectByNamespace(NamespaceURI, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartsPtr(_result, false);
}

#pragma implementation_key(985)
inline IUnknownPtr Office::_CustomXMLParts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SoftEdgeFormat wrapper method implementations
//

#pragma implementation_key(986)
inline enum Office::MsoSoftEdgeType Office::SoftEdgeFormat::GetType ( ) {
    enum MsoSoftEdgeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void Office::SoftEdgeFormat::PutType ( enum MsoSoftEdgeType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline float Office::SoftEdgeFormat::GetRadius ( ) {
    float _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void Office::SoftEdgeFormat::PutRadius ( float Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ReflectionFormat wrapper method implementations
//

#pragma implementation_key(990)
inline enum Office::MsoReflectionType Office::ReflectionFormat::GetType ( ) {
    enum MsoReflectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void Office::ReflectionFormat::PutType ( enum MsoReflectionType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline float Office::ReflectionFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void Office::ReflectionFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline float Office::ReflectionFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline void Office::ReflectionFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(996)
inline float Office::ReflectionFormat::GetOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void Office::ReflectionFormat::PutOffset ( float Offset ) {
    HRESULT _hr = put_Offset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline float Office::ReflectionFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void Office::ReflectionFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(1000)
inline IDispatchPtr Office::ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1001)
inline Office::MsoRGBType Office::ColorFormat::Get__RGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void Office::ColorFormat::Put__RGB ( MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline int Office::ColorFormat::GetSchemeColor ( ) {
    int _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1004)
inline void Office::ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline enum Office::MsoColorType Office::ColorFormat::GetType ( ) {
    enum MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1006)
inline float Office::ColorFormat::GetTintAndShade ( ) {
    float _result = 0;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline void Office::ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1008)
inline enum Office::MsoThemeColorIndex Office::ColorFormat::GetObjectThemeColor ( ) {
    enum MsoThemeColorIndex _result;
    HRESULT _hr = get_ObjectThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1009)
inline void Office::ColorFormat::PutObjectThemeColor ( enum MsoThemeColorIndex ObjectThemeColor ) {
    HRESULT _hr = put_ObjectThemeColor(ObjectThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1010)
inline float Office::ColorFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline void Office::ColorFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(1012)
inline IDispatchPtr Office::LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1013)
inline Office::ColorFormatPtr Office::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1014)
inline void Office::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline enum Office::MsoArrowheadLength Office::LineFormat::GetBeginArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1016)
inline void Office::LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline enum Office::MsoArrowheadStyle Office::LineFormat::GetBeginArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void Office::LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline enum Office::MsoArrowheadWidth Office::LineFormat::GetBeginArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void Office::LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline enum Office::MsoLineDashStyle Office::LineFormat::GetDashStyle ( ) {
    enum MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void Office::LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline enum Office::MsoArrowheadLength Office::LineFormat::GetEndArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void Office::LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline enum Office::MsoArrowheadStyle Office::LineFormat::GetEndArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline void Office::LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline enum Office::MsoArrowheadWidth Office::LineFormat::GetEndArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void Office::LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline Office::ColorFormatPtr Office::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1030)
inline void Office::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline enum Office::MsoPatternType Office::LineFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void Office::LineFormat::PutPattern ( enum MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline enum Office::MsoLineStyle Office::LineFormat::GetStyle ( ) {
    enum MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void Office::LineFormat::PutStyle ( enum MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline float Office::LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void Office::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline enum Office::MsoTriState Office::LineFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void Office::LineFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline float Office::LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void Office::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline enum Office::MsoTriState Office::LineFormat::GetInsetPen ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void Office::LineFormat::PutInsetPen ( enum MsoTriState InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(1043)
inline IDispatchPtr Office::ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1044)
inline HRESULT Office::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1045)
inline HRESULT Office::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1046)
inline HRESULT Office::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1047)
inline HRESULT Office::ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1048)
inline HRESULT Office::ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1049)
inline float Office::ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void Office::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline Office::ColorFormatPtr Office::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1052)
inline enum Office::MsoExtrusionColorType Office::ThreeDFormat::GetExtrusionColorType ( ) {
    enum MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1053)
inline void Office::ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1054)
inline enum Office::MsoTriState Office::ThreeDFormat::GetPerspective ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1055)
inline void Office::ThreeDFormat::PutPerspective ( enum MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1056)
inline enum Office::MsoPresetExtrusionDirection Office::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline enum Office::MsoPresetLightingDirection Office::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void Office::ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline enum Office::MsoPresetLightingSoftness Office::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void Office::ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline enum Office::MsoPresetMaterial Office::ThreeDFormat::GetPresetMaterial ( ) {
    enum MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void Office::ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline enum Office::MsoPresetThreeDFormat Office::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline float Office::ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline void Office::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1066)
inline float Office::ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline void Office::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1068)
inline enum Office::MsoTriState Office::ThreeDFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1069)
inline void Office::ThreeDFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1070)
inline HRESULT Office::ThreeDFormat::SetPresetCamera ( enum MsoPresetCamera PresetCamera ) {
    HRESULT _hr = raw_SetPresetCamera(PresetCamera);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1071)
inline HRESULT Office::ThreeDFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1072)
inline HRESULT Office::ThreeDFormat::IncrementRotationHorizontal ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationHorizontal(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1073)
inline HRESULT Office::ThreeDFormat::IncrementRotationVertical ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationVertical(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1074)
inline enum Office::MsoLightRigType Office::ThreeDFormat::GetPresetLighting ( ) {
    enum MsoLightRigType _result;
    HRESULT _hr = get_PresetLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1075)
inline void Office::ThreeDFormat::PutPresetLighting ( enum MsoLightRigType PresetLightRigType ) {
    HRESULT _hr = put_PresetLighting(PresetLightRigType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline float Office::ThreeDFormat::GetZ ( ) {
    float _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1077)
inline void Office::ThreeDFormat::PutZ ( float Z ) {
    HRESULT _hr = put_Z(Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1078)
inline enum Office::MsoBevelType Office::ThreeDFormat::GetBevelTopType ( ) {
    enum MsoBevelType _result;
    HRESULT _hr = get_BevelTopType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline void Office::ThreeDFormat::PutBevelTopType ( enum MsoBevelType BevelTopType ) {
    HRESULT _hr = put_BevelTopType(BevelTopType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline float Office::ThreeDFormat::GetBevelTopInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline void Office::ThreeDFormat::PutBevelTopInset ( float BevelTopInset ) {
    HRESULT _hr = put_BevelTopInset(BevelTopInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1082)
inline float Office::ThreeDFormat::GetBevelTopDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void Office::ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth ) {
    HRESULT _hr = put_BevelTopDepth(BevelTopDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline enum Office::MsoBevelType Office::ThreeDFormat::GetBevelBottomType ( ) {
    enum MsoBevelType _result;
    HRESULT _hr = get_BevelBottomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline void Office::ThreeDFormat::PutBevelBottomType ( enum MsoBevelType BevelBottomType ) {
    HRESULT _hr = put_BevelBottomType(BevelBottomType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline float Office::ThreeDFormat::GetBevelBottomInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline void Office::ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset ) {
    HRESULT _hr = put_BevelBottomInset(BevelBottomInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline float Office::ThreeDFormat::GetBevelBottomDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline void Office::ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth ) {
    HRESULT _hr = put_BevelBottomDepth(BevelBottomDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline enum Office::MsoPresetCamera Office::ThreeDFormat::GetPresetCamera ( ) {
    enum MsoPresetCamera _result;
    HRESULT _hr = get_PresetCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline float Office::ThreeDFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void Office::ThreeDFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline float Office::ThreeDFormat::GetContourWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ContourWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void Office::ThreeDFormat::PutContourWidth ( float Width ) {
    HRESULT _hr = put_ContourWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline Office::ColorFormatPtr Office::ThreeDFormat::GetContourColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ContourColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1096)
inline float Office::ThreeDFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void Office::ThreeDFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline enum Office::MsoTriState Office::ThreeDFormat::GetProjectText ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_ProjectText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void Office::ThreeDFormat::PutProjectText ( enum MsoTriState ProjectText ) {
    HRESULT _hr = put_ProjectText(ProjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline float Office::ThreeDFormat::GetLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_LightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline void Office::ThreeDFormat::PutLightAngle ( float LightAngle ) {
    HRESULT _hr = put_LightAngle(LightAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GradientStop wrapper method implementations
//

#pragma implementation_key(1102)
inline Office::ColorFormatPtr Office::GradientStop::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1103)
inline float Office::GradientStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline void Office::GradientStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1105)
inline float Office::GradientStop::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline void Office::GradientStop::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GradientStops wrapper method implementations
//

#pragma implementation_key(1107)
inline Office::GradientStopPtr Office::GradientStops::GetItem ( int Index ) {
    struct GradientStop * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GradientStopPtr(_result, false);
}

#pragma implementation_key(1108)
inline int Office::GradientStops::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline IUnknownPtr Office::GradientStops::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1110)
inline HRESULT Office::GradientStops::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1111)
inline HRESULT Office::GradientStops::Insert ( MsoRGBType __RGB, float Position, float Transparency, int Index ) {
    HRESULT _hr = raw_Insert(__RGB, Position, Transparency, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1112)
inline HRESULT Office::GradientStops::Insert2 ( MsoRGBType __RGB, float Position, float Transparency, int Index, float Brightness ) {
    HRESULT _hr = raw_Insert2(__RGB, Position, Transparency, Index, Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface GlowFormat wrapper method implementations
//

#pragma implementation_key(1113)
inline float Office::GlowFormat::GetRadius ( ) {
    float _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void Office::GlowFormat::PutRadius ( float Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline Office::ColorFormatPtr Office::GlowFormat::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1116)
inline float Office::GlowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline void Office::GlowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThemeColor wrapper method implementations
//

#pragma implementation_key(1118)
inline Office::MsoRGBType Office::ThemeColor::Get__RGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void Office::ThemeColor::Put__RGB ( MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline IDispatchPtr Office::ThemeColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1121)
inline enum Office::MsoThemeColorSchemeIndex Office::ThemeColor::GetThemeColorSchemeIndex ( ) {
    enum MsoThemeColorSchemeIndex _result;
    HRESULT _hr = get_ThemeColorSchemeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ThemeColorScheme wrapper method implementations
//

#pragma implementation_key(1122)
inline IDispatchPtr Office::ThemeColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1123)
inline int Office::ThemeColorScheme::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline Office::ThemeColorPtr Office::ThemeColorScheme::Colors ( enum MsoThemeColorSchemeIndex Index ) {
    struct ThemeColor * _result = 0;
    HRESULT _hr = raw_Colors(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeColorPtr(_result, false);
}

#pragma implementation_key(1125)
inline IUnknownPtr Office::ThemeColorScheme::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1126)
inline HRESULT Office::ThemeColorScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1127)
inline HRESULT Office::ThemeColorScheme::Save ( _bstr_t FileName ) {
    HRESULT _hr = raw_Save(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1128)
inline Office::MsoRGBType Office::ThemeColorScheme::GetCustomColor ( _bstr_t Name ) {
    MsoRGBType _result;
    HRESULT _hr = raw_GetCustomColor(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ThemeFont wrapper method implementations
//

#pragma implementation_key(1129)
inline _bstr_t Office::ThemeFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1130)
inline void Office::ThemeFont::PutName ( _bstr_t Val ) {
    HRESULT _hr = put_Name(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline IDispatchPtr Office::ThemeFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ThemeFonts wrapper method implementations
//

#pragma implementation_key(1132)
inline IDispatchPtr Office::ThemeFonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1133)
inline int Office::ThemeFonts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline Office::ThemeFontPtr Office::ThemeFonts::Item ( enum MsoFontLanguageIndex Index ) {
    struct ThemeFont * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontPtr(_result, false);
}

#pragma implementation_key(1135)
inline IUnknownPtr Office::ThemeFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ThemeFontScheme wrapper method implementations
//

#pragma implementation_key(1136)
inline IDispatchPtr Office::ThemeFontScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1137)
inline HRESULT Office::ThemeFontScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1138)
inline HRESULT Office::ThemeFontScheme::Save ( _bstr_t FileName ) {
    HRESULT _hr = raw_Save(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1139)
inline Office::ThemeFontsPtr Office::ThemeFontScheme::GetMinorFont ( ) {
    struct ThemeFonts * _result = 0;
    HRESULT _hr = get_MinorFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontsPtr(_result, false);
}

#pragma implementation_key(1140)
inline Office::ThemeFontsPtr Office::ThemeFontScheme::GetMajorFont ( ) {
    struct ThemeFonts * _result = 0;
    HRESULT _hr = get_MajorFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontsPtr(_result, false);
}

//
// interface ThemeEffectScheme wrapper method implementations
//

#pragma implementation_key(1141)
inline IDispatchPtr Office::ThemeEffectScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1142)
inline HRESULT Office::ThemeEffectScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OfficeTheme wrapper method implementations
//

#pragma implementation_key(1143)
inline IDispatchPtr Office::OfficeTheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1144)
inline Office::ThemeColorSchemePtr Office::OfficeTheme::GetThemeColorScheme ( ) {
    struct ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeColorSchemePtr(_result, false);
}

#pragma implementation_key(1145)
inline Office::ThemeFontSchemePtr Office::OfficeTheme::GetThemeFontScheme ( ) {
    struct ThemeFontScheme * _result = 0;
    HRESULT _hr = get_ThemeFontScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontSchemePtr(_result, false);
}

#pragma implementation_key(1146)
inline Office::ThemeEffectSchemePtr Office::OfficeTheme::GetThemeEffectScheme ( ) {
    struct ThemeEffectScheme * _result = 0;
    HRESULT _hr = get_ThemeEffectScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeEffectSchemePtr(_result, false);
}

//
// interface _CustomTaskPane wrapper method implementations
//

#pragma implementation_key(1147)
inline _bstr_t Office::_CustomTaskPane::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1148)
inline IDispatchPtr Office::_CustomTaskPane::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1149)
inline IDispatchPtr Office::_CustomTaskPane::GetWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1150)
inline VARIANT_BOOL Office::_CustomTaskPane::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void Office::_CustomTaskPane::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline IDispatchPtr Office::_CustomTaskPane::GetContentControl ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ContentControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1153)
inline int Office::_CustomTaskPane::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void Office::_CustomTaskPane::PutHeight ( int prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline int Office::_CustomTaskPane::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void Office::_CustomTaskPane::PutWidth ( int prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline enum Office::MsoCTPDockPosition Office::_CustomTaskPane::GetDockPosition ( ) {
    enum MsoCTPDockPosition _result;
    HRESULT _hr = get_DockPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void Office::_CustomTaskPane::PutDockPosition ( enum MsoCTPDockPosition prop ) {
    HRESULT _hr = put_DockPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline enum Office::MsoCTPDockPositionRestrict Office::_CustomTaskPane::GetDockPositionRestrict ( ) {
    enum MsoCTPDockPositionRestrict _result;
    HRESULT _hr = get_DockPositionRestrict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline void Office::_CustomTaskPane::PutDockPositionRestrict ( enum MsoCTPDockPositionRestrict prop ) {
    HRESULT _hr = put_DockPositionRestrict(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1161)
inline HRESULT Office::_CustomTaskPane::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _CustomTaskPaneEvents wrapper method implementations
//

#pragma implementation_key(1162)
inline HRESULT Office::_CustomTaskPaneEvents::VisibleStateChange ( struct _CustomTaskPane * CustomTaskPaneInst ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", CustomTaskPaneInst);
}

#pragma implementation_key(1163)
inline HRESULT Office::_CustomTaskPaneEvents::DockPositionStateChange ( struct _CustomTaskPane * CustomTaskPaneInst ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", CustomTaskPaneInst);
}

//
// interface ICTPFactory wrapper method implementations
//

#pragma implementation_key(1164)
inline Office::_CustomTaskPanePtr Office::ICTPFactory::CreateCTP ( _bstr_t CTPAxID, _bstr_t CTPTitle, const _variant_t & CTPParentWindow ) {
    struct _CustomTaskPane * _result = 0;
    HRESULT _hr = raw_CreateCTP(CTPAxID, CTPTitle, CTPParentWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomTaskPanePtr(_result, false);
}

//
// interface ICustomTaskPaneConsumer wrapper method implementations
//

#pragma implementation_key(1165)
inline HRESULT Office::ICustomTaskPaneConsumer::CTPFactoryAvailable ( struct ICTPFactory * CTPFactoryInst ) {
    HRESULT _hr = raw_CTPFactoryAvailable(CTPFactoryInst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRibbonUI wrapper method implementations
//

#pragma implementation_key(1166)
inline HRESULT Office::IRibbonUI::Invalidate ( ) {
    HRESULT _hr = raw_Invalidate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1167)
inline HRESULT Office::IRibbonUI::InvalidateControl ( _bstr_t ControlID ) {
    HRESULT _hr = raw_InvalidateControl(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1168)
inline HRESULT Office::IRibbonUI::InvalidateControlMso ( _bstr_t ControlID ) {
    HRESULT _hr = raw_InvalidateControlMso(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1169)
inline HRESULT Office::IRibbonUI::ActivateTab ( _bstr_t ControlID ) {
    HRESULT _hr = raw_ActivateTab(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1170)
inline HRESULT Office::IRibbonUI::ActivateTabMso ( _bstr_t ControlID ) {
    HRESULT _hr = raw_ActivateTabMso(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1171)
inline HRESULT Office::IRibbonUI::ActivateTabQ ( _bstr_t ControlID, _bstr_t Namespace ) {
    HRESULT _hr = raw_ActivateTabQ(ControlID, Namespace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRibbonControl wrapper method implementations
//

#pragma implementation_key(1172)
inline _bstr_t Office::IRibbonControl::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1173)
inline IDispatchPtr Office::IRibbonControl::GetContext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1174)
inline _bstr_t Office::IRibbonControl::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IRibbonExtensibility wrapper method implementations
//

#pragma implementation_key(1175)
inline _bstr_t Office::IRibbonExtensibility::GetCustomUI ( _bstr_t RibbonID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomUI(RibbonID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(1176)
inline IDispatchPtr Office::ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1177)
inline HRESULT Office::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1178)
inline HRESULT Office::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1179)
inline Office::ColorFormatPtr Office::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1180)
inline void Office::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1181)
inline enum Office::MsoTriState Office::ShadowFormat::GetObscured ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline void Office::ShadowFormat::PutObscured ( enum MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1183)
inline float Office::ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1184)
inline void Office::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1185)
inline float Office::ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline void Office::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1187)
inline float Office::ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1188)
inline void Office::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1189)
inline enum Office::MsoShadowType Office::ShadowFormat::GetType ( ) {
    enum MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline void Office::ShadowFormat::PutType ( enum MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1191)
inline enum Office::MsoTriState Office::ShadowFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline void Office::ShadowFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline enum Office::MsoShadowStyle Office::ShadowFormat::GetStyle ( ) {
    enum MsoShadowStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline void Office::ShadowFormat::PutStyle ( enum MsoShadowStyle ShadowStyle ) {
    HRESULT _hr = put_Style(ShadowStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1195)
inline float Office::ShadowFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline void Office::ShadowFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1197)
inline float Office::ShadowFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline void Office::ShadowFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1199)
inline enum Office::MsoTriState Office::ShadowFormat::GetRotateWithShape ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1200)
inline void Office::ShadowFormat::PutRotateWithShape ( enum MsoTriState RotateWithShape ) {
    HRESULT _hr = put_RotateWithShape(RotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextColumn2 wrapper method implementations
//

#pragma implementation_key(1201)
inline int Office::TextColumn2::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1202)
inline void Office::TextColumn2::PutNumber ( int Number ) {
    HRESULT _hr = put_Number(Number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1203)
inline float Office::TextColumn2::GetSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline void Office::TextColumn2::PutSpacing ( float Spacing ) {
    HRESULT _hr = put_Spacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1205)
inline enum Office::MsoTextDirection Office::TextColumn2::GetTextDirection ( ) {
    enum MsoTextDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline void Office::TextColumn2::PutTextDirection ( enum MsoTextDirection Direction ) {
    HRESULT _hr = put_TextDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAssistance wrapper method implementations
//

#pragma implementation_key(1207)
inline HRESULT Office::IAssistance::ShowHelp ( _bstr_t HelpId, _bstr_t Scope ) {
    HRESULT _hr = raw_ShowHelp(HelpId, Scope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1208)
inline HRESULT Office::IAssistance::SearchHelp ( _bstr_t Query, _bstr_t Scope ) {
    HRESULT _hr = raw_SearchHelp(Query, Scope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1209)
inline HRESULT Office::IAssistance::SetDefaultContext ( _bstr_t HelpId ) {
    HRESULT _hr = raw_SetDefaultContext(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1210)
inline HRESULT Office::IAssistance::ClearDefaultContext ( _bstr_t HelpId ) {
    HRESULT _hr = raw_ClearDefaultContext(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoChartData wrapper method implementations
//

#pragma implementation_key(1211)
inline IDispatchPtr Office::IMsoChartData::GetWorkbook ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Workbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1212)
inline HRESULT Office::IMsoChartData::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1213)
inline VARIANT_BOOL Office::IMsoChartData::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline HRESULT Office::IMsoChartData::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoCorners wrapper method implementations
//

#pragma implementation_key(1215)
inline IDispatchPtr Office::IMsoCorners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1216)
inline _bstr_t Office::IMsoCorners::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1217)
inline _variant_t Office::IMsoCorners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1218)
inline IDispatchPtr Office::IMsoCorners::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1219)
inline long Office::IMsoCorners::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoBorder wrapper method implementations
//

#pragma implementation_key(1220)
inline void Office::IMsoBorder::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1221)
inline _variant_t Office::IMsoBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1222)
inline void Office::IMsoBorder::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1223)
inline _variant_t Office::IMsoBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1224)
inline void Office::IMsoBorder::PutLineStyle ( const _variant_t & pval ) {
    HRESULT _hr = put_LineStyle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1225)
inline _variant_t Office::IMsoBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1226)
inline void Office::IMsoBorder::PutWeight ( const _variant_t & pval ) {
    HRESULT _hr = put_Weight(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline _variant_t Office::IMsoBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1228)
inline IDispatchPtr Office::IMsoBorder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1229)
inline long Office::IMsoBorder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline IDispatchPtr Office::IMsoBorder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoInterior wrapper method implementations
//

#pragma implementation_key(1231)
inline void Office::IMsoInterior::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1232)
inline _variant_t Office::IMsoInterior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1233)
inline void Office::IMsoInterior::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1234)
inline _variant_t Office::IMsoInterior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1235)
inline void Office::IMsoInterior::PutInvertIfNegative ( const _variant_t & pval ) {
    HRESULT _hr = put_InvertIfNegative(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline _variant_t Office::IMsoInterior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1237)
inline void Office::IMsoInterior::PutPattern ( const _variant_t & pval ) {
    HRESULT _hr = put_Pattern(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1238)
inline _variant_t Office::IMsoInterior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1239)
inline void Office::IMsoInterior::PutPatternColor ( const _variant_t & pval ) {
    HRESULT _hr = put_PatternColor(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1240)
inline _variant_t Office::IMsoInterior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1241)
inline void Office::IMsoInterior::PutPatternColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_PatternColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1242)
inline _variant_t Office::IMsoInterior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1243)
inline IDispatchPtr Office::IMsoInterior::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1244)
inline long Office::IMsoInterior::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1245)
inline IDispatchPtr Office::IMsoInterior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartFont wrapper method implementations
//

#pragma implementation_key(1246)
inline void Office::ChartFont::PutBackground ( const _variant_t & pval ) {
    HRESULT _hr = put_Background(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1247)
inline _variant_t Office::ChartFont::GetBackground ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1248)
inline void Office::ChartFont::PutBold ( const _variant_t & pval ) {
    HRESULT _hr = put_Bold(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1249)
inline _variant_t Office::ChartFont::GetBold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1250)
inline void Office::ChartFont::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1251)
inline _variant_t Office::ChartFont::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1252)
inline void Office::ChartFont::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1253)
inline _variant_t Office::ChartFont::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1254)
inline void Office::ChartFont::PutFontStyle ( const _variant_t & pval ) {
    HRESULT _hr = put_FontStyle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1255)
inline _variant_t Office::ChartFont::GetFontStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1256)
inline void Office::ChartFont::PutItalic ( const _variant_t & pval ) {
    HRESULT _hr = put_Italic(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline _variant_t Office::ChartFont::GetItalic ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1258)
inline void Office::ChartFont::PutName ( const _variant_t & pval ) {
    HRESULT _hr = put_Name(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline _variant_t Office::ChartFont::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1260)
inline void Office::ChartFont::PutOutlineFont ( const _variant_t & pval ) {
    HRESULT _hr = put_OutlineFont(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1261)
inline _variant_t Office::ChartFont::GetOutlineFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1262)
inline void Office::ChartFont::PutShadow ( const _variant_t & pval ) {
    HRESULT _hr = put_Shadow(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline _variant_t Office::ChartFont::GetShadow ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1264)
inline void Office::ChartFont::PutSize ( const _variant_t & pval ) {
    HRESULT _hr = put_Size(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1265)
inline _variant_t Office::ChartFont::GetSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1266)
inline void Office::ChartFont::PutStrikeThrough ( const _variant_t & pval ) {
    HRESULT _hr = put_StrikeThrough(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1267)
inline _variant_t Office::ChartFont::GetStrikeThrough ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1268)
inline void Office::ChartFont::PutSubscript ( const _variant_t & pval ) {
    HRESULT _hr = put_Subscript(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1269)
inline _variant_t Office::ChartFont::GetSubscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1270)
inline void Office::ChartFont::PutSuperscript ( const _variant_t & pval ) {
    HRESULT _hr = put_Superscript(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1271)
inline _variant_t Office::ChartFont::GetSuperscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1272)
inline void Office::ChartFont::PutUnderline ( const _variant_t & pval ) {
    HRESULT _hr = put_Underline(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1273)
inline _variant_t Office::ChartFont::GetUnderline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1274)
inline IDispatchPtr Office::ChartFont::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1275)
inline long Office::ChartFont::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline IDispatchPtr Office::ChartFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartColorFormat wrapper method implementations
//

#pragma implementation_key(1277)
inline IDispatchPtr Office::ChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1278)
inline long Office::ChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline void Office::ChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline long Office::ChartColorFormat::Get__RGB ( ) {
    long _result = 0;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1281)
inline void Office::ChartColorFormat::Put__RGB ( long RHS ) {
    HRESULT _hr = put___RGB(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1282)
inline long Office::ChartColorFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline long Office::ChartColorFormat::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline IDispatchPtr Office::ChartColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1285)
inline long Office::ChartColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ChartFillFormat wrapper method implementations
//

#pragma implementation_key(1286)
inline HRESULT Office::ChartFillFormat::OneColorGradient ( int Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1287)
inline HRESULT Office::ChartFillFormat::TwoColorGradient ( int Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1288)
inline HRESULT Office::ChartFillFormat::PresetTextured ( int PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1289)
inline HRESULT Office::ChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1290)
inline HRESULT Office::ChartFillFormat::Patterned ( int Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1291)
inline HRESULT Office::ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1292)
inline HRESULT Office::ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1293)
inline HRESULT Office::ChartFillFormat::PresetGradient ( int Style, int Variant, int PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1294)
inline Office::ChartColorFormatPtr Office::ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1295)
inline Office::ChartColorFormatPtr Office::ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

#pragma implementation_key(1296)
inline int Office::ChartFillFormat::GetGradientColorType ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline float Office::ChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline int Office::ChartFillFormat::GetGradientStyle ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1299)
inline int Office::ChartFillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline int Office::ChartFillFormat::GetPattern ( ) {
    int _result = 0;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1301)
inline int Office::ChartFillFormat::GetPresetGradientType ( ) {
    int _result = 0;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1302)
inline int Office::ChartFillFormat::GetPresetTexture ( ) {
    int _result = 0;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline _bstr_t Office::ChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline int Office::ChartFillFormat::GetTextureType ( ) {
    int _result = 0;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline int Office::ChartFillFormat::GetType ( ) {
    int _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1306)
inline void Office::ChartFillFormat::PutVisible ( int pval ) {
    HRESULT _hr = put_Visible(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1307)
inline int Office::ChartFillFormat::GetVisible ( ) {
    int _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline IDispatchPtr Office::ChartFillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1309)
inline long Office::ChartFillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1310)
inline IDispatchPtr Office::ChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoCharacters wrapper method implementations
//

#pragma implementation_key(1311)
inline IDispatchPtr Office::IMsoCharacters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1312)
inline _bstr_t Office::IMsoCharacters::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1313)
inline void Office::IMsoCharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline long Office::IMsoCharacters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline _variant_t Office::IMsoCharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1316)
inline Office::ChartFontPtr Office::IMsoCharacters::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1317)
inline _variant_t Office::IMsoCharacters::Insert ( _bstr_t bstr ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(bstr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1318)
inline _bstr_t Office::IMsoCharacters::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline void Office::IMsoCharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1320)
inline _bstr_t Office::IMsoCharacters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1321)
inline void Office::IMsoCharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1322)
inline IDispatchPtr Office::IMsoCharacters::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1323)
inline long Office::IMsoCharacters::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface TabStop2 wrapper method implementations
//

#pragma implementation_key(1324)
inline IDispatchPtr Office::TabStop2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1325)
inline HRESULT Office::TabStop2::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1326)
inline float Office::TabStop2::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline void Office::TabStop2::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1328)
inline enum Office::MsoTabStopType Office::TabStop2::GetType ( ) {
    enum MsoTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1329)
inline void Office::TabStop2::PutType ( enum MsoTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TabStops2 wrapper method implementations
//

#pragma implementation_key(1330)
inline Office::TabStop2Ptr Office::TabStops2::Item ( const _variant_t & Index ) {
    struct TabStop2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStop2Ptr(_result, false);
}

#pragma implementation_key(1331)
inline IDispatchPtr Office::TabStops2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1332)
inline Office::TabStop2Ptr Office::TabStops2::Add ( enum MsoTabStopType Type, float Position ) {
    struct TabStop2 * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStop2Ptr(_result, false);
}

#pragma implementation_key(1333)
inline int Office::TabStops2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline float Office::TabStops2::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1335)
inline void Office::TabStops2::PutDefaultSpacing ( float Spacing ) {
    HRESULT _hr = put_DefaultSpacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1336)
inline IUnknownPtr Office::TabStops2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface RulerLevel2 wrapper method implementations
//

#pragma implementation_key(1337)
inline IDispatchPtr Office::RulerLevel2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1338)
inline float Office::RulerLevel2::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline void Office::RulerLevel2::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1340)
inline float Office::RulerLevel2::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1341)
inline void Office::RulerLevel2::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels2 wrapper method implementations
//

#pragma implementation_key(1342)
inline IDispatchPtr Office::RulerLevels2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1343)
inline int Office::RulerLevels2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1344)
inline Office::RulerLevel2Ptr Office::RulerLevels2::Item ( const _variant_t & Index ) {
    struct RulerLevel2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevel2Ptr(_result, false);
}

#pragma implementation_key(1345)
inline IUnknownPtr Office::RulerLevels2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface Ruler2 wrapper method implementations
//

#pragma implementation_key(1346)
inline IDispatchPtr Office::Ruler2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1347)
inline Office::RulerLevels2Ptr Office::Ruler2::GetLevels ( ) {
    struct RulerLevels2 * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevels2Ptr(_result, false);
}

#pragma implementation_key(1348)
inline Office::TabStops2Ptr Office::Ruler2::GetTabStops ( ) {
    struct TabStops2 * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStops2Ptr(_result, false);
}

//
// interface EncryptionProvider wrapper method implementations
//

#pragma implementation_key(1349)
inline _variant_t Office::EncryptionProvider::GetProviderDetail ( enum EncryptionProviderDetail encprovdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProviderDetail(encprovdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1350)
inline int Office::EncryptionProvider::NewSession ( IUnknown * ParentWindow ) {
    int _result = 0;
    HRESULT _hr = raw_NewSession(ParentWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline int Office::EncryptionProvider::Authenticate ( IUnknown * ParentWindow, IUnknown * EncryptionData, unsigned int * PermissionsMask ) {
    int _result = 0;
    HRESULT _hr = raw_Authenticate(ParentWindow, EncryptionData, PermissionsMask, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1352)
inline int Office::EncryptionProvider::CloneSession ( int SessionHandle ) {
    int _result = 0;
    HRESULT _hr = raw_CloneSession(SessionHandle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1353)
inline HRESULT Office::EncryptionProvider::EndSession ( int SessionHandle ) {
    HRESULT _hr = raw_EndSession(SessionHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1354)
inline int Office::EncryptionProvider::Save ( int SessionHandle, IUnknown * EncryptionData ) {
    int _result = 0;
    HRESULT _hr = raw_Save(SessionHandle, EncryptionData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1355)
inline HRESULT Office::EncryptionProvider::EncryptStream ( int SessionHandle, _bstr_t StreamName, IUnknown * UnencryptedStream, IUnknown * EncryptedStream ) {
    HRESULT _hr = raw_EncryptStream(SessionHandle, StreamName, UnencryptedStream, EncryptedStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1356)
inline HRESULT Office::EncryptionProvider::DecryptStream ( int SessionHandle, _bstr_t StreamName, IUnknown * EncryptedStream, IUnknown * UnencryptedStream ) {
    HRESULT _hr = raw_DecryptStream(SessionHandle, StreamName, EncryptedStream, UnencryptedStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline HRESULT Office::EncryptionProvider::ShowSettings ( int SessionHandle, IUnknown * ParentWindow, VARIANT_BOOL ReadOnly, VARIANT_BOOL * Remove ) {
    HRESULT _hr = raw_ShowSettings(SessionHandle, ParentWindow, ReadOnly, Remove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBlogExtensibility wrapper method implementations
//

#pragma implementation_key(1358)
inline HRESULT Office::IBlogExtensibility::BlogProviderProperties ( BSTR * BlogProvider, BSTR * FriendlyName, enum MsoBlogCategorySupport * CategorySupport, VARIANT_BOOL * Padding ) {
    HRESULT _hr = raw_BlogProviderProperties(BlogProvider, FriendlyName, CategorySupport, Padding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1359)
inline HRESULT Office::IBlogExtensibility::SetupBlogAccount ( _bstr_t Account, long ParentWindow, IDispatch * Document, VARIANT_BOOL NewAccount, VARIANT_BOOL * ShowPictureUI ) {
    HRESULT _hr = raw_SetupBlogAccount(Account, ParentWindow, Document, NewAccount, ShowPictureUI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1360)
inline HRESULT Office::IBlogExtensibility::GetUserBlogs ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * BlogNames, SAFEARRAY * * BlogIDs, SAFEARRAY * * BlogURLs ) {
    HRESULT _hr = raw_GetUserBlogs(Account, ParentWindow, Document, BlogNames, BlogIDs, BlogURLs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1361)
inline HRESULT Office::IBlogExtensibility::GetRecentPosts ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * PostTitles, SAFEARRAY * * PostDates, SAFEARRAY * * PostIDs ) {
    HRESULT _hr = raw_GetRecentPosts(Account, ParentWindow, Document, PostTitles, PostDates, PostIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1362)
inline HRESULT Office::IBlogExtensibility::Open ( _bstr_t Account, _bstr_t PostID, long ParentWindow, BSTR * xHTML, BSTR * Title, BSTR * DatePosted, SAFEARRAY * * Categories ) {
    HRESULT _hr = raw_Open(Account, PostID, ParentWindow, xHTML, Title, DatePosted, Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1363)
inline HRESULT Office::IBlogExtensibility::PublishPost ( _bstr_t Account, long ParentWindow, IDispatch * Document, _bstr_t xHTML, _bstr_t Title, _bstr_t DateTime, SAFEARRAY * Categories, VARIANT_BOOL Draft, BSTR * PostID, BSTR * PublishMessage ) {
    HRESULT _hr = raw_PublishPost(Account, ParentWindow, Document, xHTML, Title, DateTime, Categories, Draft, PostID, PublishMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1364)
inline HRESULT Office::IBlogExtensibility::RepublishPost ( _bstr_t Account, long ParentWindow, IDispatch * Document, _bstr_t PostID, _bstr_t xHTML, _bstr_t Title, _bstr_t DateTime, SAFEARRAY * Categories, VARIANT_BOOL Draft, BSTR * PublishMessage ) {
    HRESULT _hr = raw_RepublishPost(Account, ParentWindow, Document, PostID, xHTML, Title, DateTime, Categories, Draft, PublishMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1365)
inline HRESULT Office::IBlogExtensibility::GetCategories ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * Categories ) {
    HRESULT _hr = raw_GetCategories(Account, ParentWindow, Document, Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBlogPictureExtensibility wrapper method implementations
//

#pragma implementation_key(1366)
inline HRESULT Office::IBlogPictureExtensibility::BlogPictureProviderProperties ( BSTR * BlogPictureProvider, BSTR * FriendlyName ) {
    HRESULT _hr = raw_BlogPictureProviderProperties(BlogPictureProvider, FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1367)
inline HRESULT Office::IBlogPictureExtensibility::CreatePictureAccount ( _bstr_t Account, _bstr_t BlogProvider, long ParentWindow, IDispatch * Document ) {
    HRESULT _hr = raw_CreatePictureAccount(Account, BlogProvider, ParentWindow, Document);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1368)
inline HRESULT Office::IBlogPictureExtensibility::PublishPicture ( _bstr_t Account, long ParentWindow, IDispatch * Document, IUnknown * Image, BSTR * PictureURI, long ImageType ) {
    HRESULT _hr = raw_PublishPicture(Account, ParentWindow, Document, Image, PictureURI, ImageType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterPreferences wrapper method implementations
//

#pragma implementation_key(1369)
inline HRESULT Office::IConverterPreferences::HrGetMacroEnabled ( int * pfMacroEnabled ) {
    HRESULT _hr = raw_HrGetMacroEnabled(pfMacroEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1370)
inline HRESULT Office::IConverterPreferences::HrCheckFormat ( int * pFormat ) {
    HRESULT _hr = raw_HrCheckFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1371)
inline HRESULT Office::IConverterPreferences::HrGetLossySave ( int * pfLossySave ) {
    HRESULT _hr = raw_HrGetLossySave(pfLossySave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterApplicationPreferences wrapper method implementations
//

#pragma implementation_key(1372)
inline HRESULT Office::IConverterApplicationPreferences::HrGetLcid ( unsigned long * plcid ) {
    HRESULT _hr = raw_HrGetLcid(plcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1373)
inline HRESULT Office::IConverterApplicationPreferences::HrGetHwnd ( long * phwnd ) {
    HRESULT _hr = raw_HrGetHwnd(phwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1374)
inline HRESULT Office::IConverterApplicationPreferences::HrGetApplication ( BSTR * pbstrApplication ) {
    HRESULT _hr = raw_HrGetApplication(pbstrApplication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1375)
inline HRESULT Office::IConverterApplicationPreferences::HrCheckFormat ( int * pFormat ) {
    HRESULT _hr = raw_HrCheckFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterUICallback wrapper method implementations
//

#pragma implementation_key(1376)
inline HRESULT Office::IConverterUICallback::HrReportProgress ( unsigned int uPercentComplete ) {
    HRESULT _hr = raw_HrReportProgress(uPercentComplete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline HRESULT Office::IConverterUICallback::HrMessageBox ( _bstr_t bstrText, _bstr_t bstrCaption, unsigned int uType, int * pidResult ) {
    HRESULT _hr = raw_HrMessageBox(bstrText, bstrCaption, uType, pidResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1378)
inline HRESULT Office::IConverterUICallback::HrInputBox ( _bstr_t bstrText, _bstr_t bstrCaption, BSTR * pbstrInput, int fPassword ) {
    HRESULT _hr = raw_HrInputBox(bstrText, bstrCaption, pbstrInput, fPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverter wrapper method implementations
//

#pragma implementation_key(1379)
inline HRESULT Office::IConverter::HrInitConverter ( struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrInitConverter(pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1380)
inline HRESULT Office::IConverter::HrUninitConverter ( struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrUninitConverter(pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1381)
inline HRESULT Office::IConverter::HrImport ( _bstr_t bstrSourcePath, _bstr_t bstrDestPath, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrImport(bstrSourcePath, bstrDestPath, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1382)
inline HRESULT Office::IConverter::HrExport ( _bstr_t bstrSourcePath, _bstr_t bstrDestPath, _bstr_t bstrClass, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrExport(bstrSourcePath, bstrDestPath, bstrClass, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1383)
inline HRESULT Office::IConverter::HrGetFormat ( _bstr_t bstrPath, BSTR * pbstrClass, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrGetFormat(bstrPath, pbstrClass, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline HRESULT Office::IConverter::HrGetErrorString ( long hrErr, BSTR * pbstrErrorMsg, struct IConverterApplicationPreferences * pcap ) {
    HRESULT _hr = raw_HrGetErrorString(hrErr, pbstrErrorMsg, pcap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SmartArtLayout wrapper method implementations
//

#pragma implementation_key(1385)
inline IDispatchPtr Office::SmartArtLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1386)
inline _bstr_t Office::SmartArtLayout::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1387)
inline _bstr_t Office::SmartArtLayout::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1388)
inline _bstr_t Office::SmartArtLayout::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1389)
inline _bstr_t Office::SmartArtLayout::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtLayouts wrapper method implementations
//

#pragma implementation_key(1390)
inline IUnknownPtr Office::SmartArtLayouts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1391)
inline Office::SmartArtLayoutPtr Office::SmartArtLayouts::Item ( const _variant_t & Index ) {
    struct SmartArtLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtLayoutPtr(_result, false);
}

#pragma implementation_key(1392)
inline IDispatchPtr Office::SmartArtLayouts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1393)
inline int Office::SmartArtLayouts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArtQuickStyle wrapper method implementations
//

#pragma implementation_key(1394)
inline IDispatchPtr Office::SmartArtQuickStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1395)
inline _bstr_t Office::SmartArtQuickStyle::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1396)
inline _bstr_t Office::SmartArtQuickStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1397)
inline _bstr_t Office::SmartArtQuickStyle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1398)
inline _bstr_t Office::SmartArtQuickStyle::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtQuickStyles wrapper method implementations
//

#pragma implementation_key(1399)
inline IUnknownPtr Office::SmartArtQuickStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1400)
inline Office::SmartArtQuickStylePtr Office::SmartArtQuickStyles::Item ( const _variant_t & Index ) {
    struct SmartArtQuickStyle * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtQuickStylePtr(_result, false);
}

#pragma implementation_key(1401)
inline IDispatchPtr Office::SmartArtQuickStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1402)
inline int Office::SmartArtQuickStyles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArtColor wrapper method implementations
//

#pragma implementation_key(1403)
inline IDispatchPtr Office::SmartArtColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1404)
inline _bstr_t Office::SmartArtColor::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1405)
inline _bstr_t Office::SmartArtColor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1406)
inline _bstr_t Office::SmartArtColor::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1407)
inline _bstr_t Office::SmartArtColor::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtColors wrapper method implementations
//

#pragma implementation_key(1408)
inline IUnknownPtr Office::SmartArtColors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1409)
inline Office::SmartArtColorPtr Office::SmartArtColors::Item ( const _variant_t & Index ) {
    struct SmartArtColor * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtColorPtr(_result, false);
}

#pragma implementation_key(1410)
inline IDispatchPtr Office::SmartArtColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1411)
inline int Office::SmartArtColors::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerField wrapper method implementations
//

#pragma implementation_key(1412)
inline _bstr_t Office::PickerField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1413)
inline enum Office::MsoPickerField Office::PickerField::GetType ( ) {
    enum MsoPickerField _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1414)
inline VARIANT_BOOL Office::PickerField::GetIsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerFields wrapper method implementations
//

#pragma implementation_key(1415)
inline Office::PickerFieldPtr Office::PickerFields::GetItem ( int Index ) {
    struct PickerField * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerFieldPtr(_result, false);
}

#pragma implementation_key(1416)
inline long Office::PickerFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline IUnknownPtr Office::PickerFields::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerProperty wrapper method implementations
//

#pragma implementation_key(1418)
inline _bstr_t Office::PickerProperty::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1419)
inline _variant_t Office::PickerProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1420)
inline enum Office::MsoPickerField Office::PickerProperty::GetType ( ) {
    enum MsoPickerField _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerProperties wrapper method implementations
//

#pragma implementation_key(1421)
inline Office::PickerPropertyPtr Office::PickerProperties::GetItem ( int Index ) {
    struct PickerProperty * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertyPtr(_result, false);
}

#pragma implementation_key(1422)
inline long Office::PickerProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1423)
inline Office::PickerPropertyPtr Office::PickerProperties::Add ( _bstr_t Id, _bstr_t Value, enum MsoPickerField Type ) {
    struct PickerProperty * _result = 0;
    HRESULT _hr = raw_Add(Id, Value, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertyPtr(_result, false);
}

#pragma implementation_key(1424)
inline HRESULT Office::PickerProperties::Remove ( _bstr_t Id ) {
    HRESULT _hr = raw_Remove(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1425)
inline IUnknownPtr Office::PickerProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerResult wrapper method implementations
//

#pragma implementation_key(1426)
inline _bstr_t Office::PickerResult::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1427)
inline _bstr_t Office::PickerResult::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1428)
inline void Office::PickerResult::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1429)
inline _bstr_t Office::PickerResult::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1430)
inline void Office::PickerResult::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1431)
inline _bstr_t Office::PickerResult::GetSIPId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SIPId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1432)
inline void Office::PickerResult::PutSIPId ( _bstr_t SIPId ) {
    HRESULT _hr = put_SIPId(SIPId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1433)
inline _variant_t Office::PickerResult::GetItemData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ItemData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1434)
inline void Office::PickerResult::PutItemData ( const _variant_t & ItemData ) {
    HRESULT _hr = put_ItemData(ItemData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline _variant_t Office::PickerResult::GetSubItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1436)
inline void Office::PickerResult::PutSubItems ( const _variant_t & SubItems ) {
    HRESULT _hr = put_SubItems(SubItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1437)
inline _variant_t Office::PickerResult::GetDuplicateResults ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DuplicateResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1438)
inline Office::PickerFieldsPtr Office::PickerResult::GetFields ( ) {
    struct PickerFields * _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerFieldsPtr(_result, false);
}

#pragma implementation_key(1439)
inline void Office::PickerResult::PutFields ( struct PickerFields * Fields ) {
    HRESULT _hr = put_Fields(Fields);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PickerResults wrapper method implementations
//

#pragma implementation_key(1440)
inline Office::PickerResultPtr Office::PickerResults::GetItem ( int Index ) {
    struct PickerResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultPtr(_result, false);
}

#pragma implementation_key(1441)
inline long Office::PickerResults::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1442)
inline Office::PickerResultPtr Office::PickerResults::Add ( _bstr_t Id, _bstr_t DisplayName, _bstr_t Type, _bstr_t SIPId, const _variant_t & ItemData, const _variant_t & SubItems ) {
    struct PickerResult * _result = 0;
    HRESULT _hr = raw_Add(Id, DisplayName, Type, SIPId, ItemData, SubItems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultPtr(_result, false);
}

#pragma implementation_key(1443)
inline IUnknownPtr Office::PickerResults::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerDialog wrapper method implementations
//

#pragma implementation_key(1444)
inline _bstr_t Office::PickerDialog::GetDataHandlerId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataHandlerId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void Office::PickerDialog::PutDataHandlerId ( _bstr_t Id ) {
    HRESULT _hr = put_DataHandlerId(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline _bstr_t Office::PickerDialog::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1447)
inline void Office::PickerDialog::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline Office::PickerPropertiesPtr Office::PickerDialog::GetProperties ( ) {
    struct PickerProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertiesPtr(_result, false);
}

#pragma implementation_key(1449)
inline Office::PickerResultsPtr Office::PickerDialog::CreatePickerResults ( ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_CreatePickerResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

#pragma implementation_key(1450)
inline Office::PickerResultsPtr Office::PickerDialog::Show ( VARIANT_BOOL IsMultiSelect, struct PickerResults * ExistingResults ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_Show(IsMultiSelect, ExistingResults, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

#pragma implementation_key(1451)
inline Office::PickerResultsPtr Office::PickerDialog::Resolve ( _bstr_t TokenText, int duplicateDlgMode ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_Resolve(TokenText, duplicateDlgMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

//
// interface IMsoContactCard wrapper method implementations
//

#pragma implementation_key(1452)
inline _bstr_t Office::IMsoContactCard::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1453)
inline enum Office::MsoContactCardAddressType Office::IMsoContactCard::GetAddressType ( ) {
    enum MsoContactCardAddressType _result;
    HRESULT _hr = get_AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline enum Office::MsoContactCardType Office::IMsoContactCard::GetCardType ( ) {
    enum MsoContactCardType _result;
    HRESULT _hr = get_CardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline IDispatchPtr Office::IMsoContactCard::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface EffectParameter wrapper method implementations
//

#pragma implementation_key(1456)
inline _bstr_t Office::EffectParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1457)
inline _variant_t Office::EffectParameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1458)
inline void Office::EffectParameter::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EffectParameters wrapper method implementations
//

#pragma implementation_key(1459)
inline Office::EffectParameterPtr Office::EffectParameters::GetItem ( const _variant_t & Index ) {
    struct EffectParameter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParameterPtr(_result, false);
}

#pragma implementation_key(1460)
inline int Office::EffectParameters::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline IUnknownPtr Office::EffectParameters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PictureEffect wrapper method implementations
//

#pragma implementation_key(1462)
inline enum Office::MsoPictureEffectType Office::PictureEffect::GetType ( ) {
    enum MsoPictureEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline void Office::PictureEffect::PutPosition ( int Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline int Office::PictureEffect::GetPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline HRESULT Office::PictureEffect::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1466)
inline Office::EffectParametersPtr Office::PictureEffect::GetEffectParameters ( ) {
    struct EffectParameters * _result = 0;
    HRESULT _hr = get_EffectParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParametersPtr(_result, false);
}

#pragma implementation_key(1467)
inline void Office::PictureEffect::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1468)
inline enum Office::MsoTriState Office::PictureEffect::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PictureEffects wrapper method implementations
//

#pragma implementation_key(1469)
inline Office::PictureEffectPtr Office::PictureEffects::GetItem ( int Index ) {
    struct PictureEffect * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectPtr(_result, false);
}

#pragma implementation_key(1470)
inline int Office::PictureEffects::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline IUnknownPtr Office::PictureEffects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1472)
inline Office::PictureEffectPtr Office::PictureEffects::Insert ( enum MsoPictureEffectType EffectType, int Position ) {
    struct PictureEffect * _result = 0;
    HRESULT _hr = raw_Insert(EffectType, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectPtr(_result, false);
}

#pragma implementation_key(1473)
inline HRESULT Office::PictureEffects::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(1474)
inline IDispatchPtr Office::FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1475)
inline HRESULT Office::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1476)
inline HRESULT Office::FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1477)
inline HRESULT Office::FillFormat::Patterned ( enum MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1478)
inline HRESULT Office::FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1479)
inline HRESULT Office::FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1480)
inline HRESULT Office::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1481)
inline HRESULT Office::FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1482)
inline HRESULT Office::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1483)
inline HRESULT Office::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1484)
inline Office::ColorFormatPtr Office::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1485)
inline void Office::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline Office::ColorFormatPtr Office::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1487)
inline void Office::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1488)
inline enum Office::MsoGradientColorType Office::FillFormat::GetGradientColorType ( ) {
    enum MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline float Office::FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1490)
inline enum Office::MsoGradientStyle Office::FillFormat::GetGradientStyle ( ) {
    enum MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1491)
inline int Office::FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1492)
inline enum Office::MsoPatternType Office::FillFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1493)
inline enum Office::MsoPresetGradientType Office::FillFormat::GetPresetGradientType ( ) {
    enum MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline enum Office::MsoPresetTexture Office::FillFormat::GetPresetTexture ( ) {
    enum MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1495)
inline _bstr_t Office::FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1496)
inline enum Office::MsoTextureType Office::FillFormat::GetTextureType ( ) {
    enum MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline float Office::FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1498)
inline void Office::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1499)
inline enum Office::MsoFillType Office::FillFormat::GetType ( ) {
    enum MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline enum Office::MsoTriState Office::FillFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline void Office::FillFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline Office::GradientStopsPtr Office::FillFormat::GetGradientStops ( ) {
    struct GradientStops * _result = 0;
    HRESULT _hr = get_GradientStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GradientStopsPtr(_result, false);
}

#pragma implementation_key(1503)
inline float Office::FillFormat::GetTextureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline void Office::FillFormat::PutTextureOffsetX ( float TextureOffsetX ) {
    HRESULT _hr = put_TextureOffsetX(TextureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline float Office::FillFormat::GetTextureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void Office::FillFormat::PutTextureOffsetY ( float TextureOffsetY ) {
    HRESULT _hr = put_TextureOffsetY(TextureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline enum Office::MsoTextureAlignment Office::FillFormat::GetTextureAlignment ( ) {
    enum MsoTextureAlignment _result;
    HRESULT _hr = get_TextureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline void Office::FillFormat::PutTextureAlignment ( enum MsoTextureAlignment TextureAlignment ) {
    HRESULT _hr = put_TextureAlignment(TextureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1509)
inline float Office::FillFormat::GetTextureHorizontalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureHorizontalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline void Office::FillFormat::PutTextureHorizontalScale ( float HorizontalScale ) {
    HRESULT _hr = put_TextureHorizontalScale(HorizontalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline float Office::FillFormat::GetTextureVerticalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureVerticalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline void Office::FillFormat::PutTextureVerticalScale ( float VerticalScale ) {
    HRESULT _hr = put_TextureVerticalScale(VerticalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1513)
inline enum Office::MsoTriState Office::FillFormat::GetTextureTile ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TextureTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1514)
inline void Office::FillFormat::PutTextureTile ( enum MsoTriState TextureTile ) {
    HRESULT _hr = put_TextureTile(TextureTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1515)
inline enum Office::MsoTriState Office::FillFormat::GetRotateWithObject ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotateWithObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1516)
inline void Office::FillFormat::PutRotateWithObject ( enum MsoTriState RotateWithObject ) {
    HRESULT _hr = put_RotateWithObject(RotateWithObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1517)
inline Office::PictureEffectsPtr Office::FillFormat::GetPictureEffects ( ) {
    struct PictureEffects * _result = 0;
    HRESULT _hr = get_PictureEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectsPtr(_result, false);
}

#pragma implementation_key(1518)
inline float Office::FillFormat::GetGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline void Office::FillFormat::PutGradientAngle ( float GradientAngle ) {
    HRESULT _hr = put_GradientAngle(GradientAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Font2 wrapper method implementations
//

#pragma implementation_key(1520)
inline IDispatchPtr Office::Font2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1521)
inline enum Office::MsoTriState Office::Font2::GetBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void Office::Font2::PutBold ( enum MsoTriState Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline enum Office::MsoTriState Office::Font2::GetItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline void Office::Font2::PutItalic ( enum MsoTriState Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1525)
inline enum Office::MsoTextStrike Office::Font2::GetStrike ( ) {
    enum MsoTextStrike _result;
    HRESULT _hr = get_Strike(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1526)
inline void Office::Font2::PutStrike ( enum MsoTextStrike Strike ) {
    HRESULT _hr = put_Strike(Strike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1527)
inline enum Office::MsoTextCaps Office::Font2::GetCaps ( ) {
    enum MsoTextCaps _result;
    HRESULT _hr = get_Caps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline void Office::Font2::PutCaps ( enum MsoTextCaps Caps ) {
    HRESULT _hr = put_Caps(Caps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1529)
inline enum Office::MsoTriState Office::Font2::GetAutorotateNumbers ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutorotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline void Office::Font2::PutAutorotateNumbers ( enum MsoTriState RotateNumbers ) {
    HRESULT _hr = put_AutorotateNumbers(RotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1531)
inline float Office::Font2::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1532)
inline void Office::Font2::PutBaselineOffset ( float Offset ) {
    HRESULT _hr = put_BaselineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1533)
inline float Office::Font2::GetKerning ( ) {
    float _result = 0;
    HRESULT _hr = get_Kerning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline void Office::Font2::PutKerning ( float KerningSize ) {
    HRESULT _hr = put_Kerning(KerningSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1535)
inline float Office::Font2::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1536)
inline void Office::Font2::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1537)
inline float Office::Font2::GetSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1538)
inline void Office::Font2::PutSpacing ( float Spacing ) {
    HRESULT _hr = put_Spacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1539)
inline enum Office::MsoTextUnderlineType Office::Font2::GetUnderlineStyle ( ) {
    enum MsoTextUnderlineType _result;
    HRESULT _hr = get_UnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline void Office::Font2::PutUnderlineStyle ( enum MsoTextUnderlineType Style ) {
    HRESULT _hr = put_UnderlineStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1541)
inline enum Office::MsoTriState Office::Font2::GetAllcaps ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Allcaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1542)
inline void Office::Font2::PutAllcaps ( enum MsoTriState Allcaps ) {
    HRESULT _hr = put_Allcaps(Allcaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1543)
inline enum Office::MsoTriState Office::Font2::GetDoubleStrikeThrough ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_DoubleStrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline void Office::Font2::PutDoubleStrikeThrough ( enum MsoTriState DoubleStrikeThrough ) {
    HRESULT _hr = put_DoubleStrikeThrough(DoubleStrikeThrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1545)
inline enum Office::MsoTriState Office::Font2::GetEqualize ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Equalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1546)
inline void Office::Font2::PutEqualize ( enum MsoTriState Equalize ) {
    HRESULT _hr = put_Equalize(Equalize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1547)
inline Office::FillFormatPtr Office::Font2::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1548)
inline Office::GlowFormatPtr Office::Font2::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

#pragma implementation_key(1549)
inline Office::ReflectionFormatPtr Office::Font2::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(1550)
inline Office::LineFormatPtr Office::Font2::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1551)
inline Office::ShadowFormatPtr Office::Font2::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1552)
inline Office::ColorFormatPtr Office::Font2::GetHighlight ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Highlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1553)
inline Office::ColorFormatPtr Office::Font2::GetUnderlineColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_UnderlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(1554)
inline enum Office::MsoTriState Office::Font2::GetSmallcaps ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Smallcaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1555)
inline void Office::Font2::PutSmallcaps ( enum MsoTriState Smallcaps ) {
    HRESULT _hr = put_Smallcaps(Smallcaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1556)
inline enum Office::MsoSoftEdgeType Office::Font2::GetSoftEdgeFormat ( ) {
    enum MsoSoftEdgeType _result;
    HRESULT _hr = get_SoftEdgeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1557)
inline void Office::Font2::PutSoftEdgeFormat ( enum MsoSoftEdgeType SoftEdgeFormat ) {
    HRESULT _hr = put_SoftEdgeFormat(SoftEdgeFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1558)
inline enum Office::MsoTriState Office::Font2::GetStrikeThrough ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_StrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1559)
inline void Office::Font2::PutStrikeThrough ( enum MsoTriState StrikeThrough ) {
    HRESULT _hr = put_StrikeThrough(StrikeThrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1560)
inline enum Office::MsoTriState Office::Font2::GetSubscript ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline void Office::Font2::PutSubscript ( enum MsoTriState Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline enum Office::MsoTriState Office::Font2::GetSuperscript ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline void Office::Font2::PutSuperscript ( enum MsoTriState Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline enum Office::MsoPresetTextEffect Office::Font2::GetWordArtformat ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtformat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1565)
inline void Office::Font2::PutWordArtformat ( enum MsoPresetTextEffect WordArtformat ) {
    HRESULT _hr = put_WordArtformat(WordArtformat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1566)
inline enum Office::MsoTriState Office::Font2::GetEmbeddable ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1567)
inline enum Office::MsoTriState Office::Font2::GetEmbedded ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1568)
inline _bstr_t Office::Font2::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1569)
inline void Office::Font2::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1570)
inline _bstr_t Office::Font2::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1571)
inline void Office::Font2::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1572)
inline _bstr_t Office::Font2::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1573)
inline void Office::Font2::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline _bstr_t Office::Font2::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1575)
inline void Office::Font2::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline _bstr_t Office::Font2::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1577)
inline void Office::Font2::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface BulletFormat2 wrapper method implementations
//

#pragma implementation_key(1578)
inline IDispatchPtr Office::BulletFormat2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1579)
inline int Office::BulletFormat2::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline void Office::BulletFormat2::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1581)
inline Office::Font2Ptr Office::BulletFormat2::GetFont ( ) {
    struct Font2 * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Font2Ptr(_result, false);
}

#pragma implementation_key(1582)
inline int Office::BulletFormat2::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline HRESULT Office::BulletFormat2::Picture ( _bstr_t FileName ) {
    HRESULT _hr = raw_Picture(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1584)
inline float Office::BulletFormat2::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline void Office::BulletFormat2::PutRelativeSize ( float Size ) {
    HRESULT _hr = put_RelativeSize(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1586)
inline int Office::BulletFormat2::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1587)
inline void Office::BulletFormat2::PutStartValue ( int Start ) {
    HRESULT _hr = put_StartValue(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1588)
inline enum Office::MsoNumberedBulletStyle Office::BulletFormat2::GetStyle ( ) {
    enum MsoNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1589)
inline void Office::BulletFormat2::PutStyle ( enum MsoNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1590)
inline enum Office::MsoBulletType Office::BulletFormat2::GetType ( ) {
    enum MsoBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline void Office::BulletFormat2::PutType ( enum MsoBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1592)
inline enum Office::MsoTriState Office::BulletFormat2::GetUseTextColor ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline void Office::BulletFormat2::PutUseTextColor ( enum MsoTriState UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1594)
inline enum Office::MsoTriState Office::BulletFormat2::GetUseTextFont ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1595)
inline void Office::BulletFormat2::PutUseTextFont ( enum MsoTriState UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1596)
inline enum Office::MsoTriState Office::BulletFormat2::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1597)
inline void Office::BulletFormat2::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ParagraphFormat2 wrapper method implementations
//

#pragma implementation_key(1598)
inline IDispatchPtr Office::ParagraphFormat2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1599)
inline enum Office::MsoParagraphAlignment Office::ParagraphFormat2::GetAlignment ( ) {
    enum MsoParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1600)
inline void Office::ParagraphFormat2::PutAlignment ( enum MsoParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1601)
inline enum Office::MsoBaselineAlignment Office::ParagraphFormat2::GetBaselineAlignment ( ) {
    enum MsoBaselineAlignment _result;
    HRESULT _hr = get_BaselineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1602)
inline void Office::ParagraphFormat2::PutBaselineAlignment ( enum MsoBaselineAlignment BaselineAlignment ) {
    HRESULT _hr = put_BaselineAlignment(BaselineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1603)
inline Office::BulletFormat2Ptr Office::ParagraphFormat2::GetBullet ( ) {
    struct BulletFormat2 * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormat2Ptr(_result, false);
}

#pragma implementation_key(1604)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetFarEastLineBreakLevel ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline void Office::ParagraphFormat2::PutFarEastLineBreakLevel ( enum MsoTriState Break ) {
    HRESULT _hr = put_FarEastLineBreakLevel(Break);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1606)
inline float Office::ParagraphFormat2::GetFirstLineIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1607)
inline void Office::ParagraphFormat2::PutFirstLineIndent ( float Indent ) {
    HRESULT _hr = put_FirstLineIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1608)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetHangingPunctuation ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1609)
inline void Office::ParagraphFormat2::PutHangingPunctuation ( enum MsoTriState Hanging ) {
    HRESULT _hr = put_HangingPunctuation(Hanging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1610)
inline int Office::ParagraphFormat2::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline void Office::ParagraphFormat2::PutIndentLevel ( int Level ) {
    HRESULT _hr = put_IndentLevel(Level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1612)
inline float Office::ParagraphFormat2::GetLeftIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline void Office::ParagraphFormat2::PutLeftIndent ( float Indent ) {
    HRESULT _hr = put_LeftIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetLineRuleAfter ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline void Office::ParagraphFormat2::PutLineRuleAfter ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleAfter(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1616)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetLineRuleBefore ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline void Office::ParagraphFormat2::PutLineRuleBefore ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleBefore(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1618)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetLineRuleWithin ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1619)
inline void Office::ParagraphFormat2::PutLineRuleWithin ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleWithin(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline float Office::ParagraphFormat2::GetRightIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1621)
inline void Office::ParagraphFormat2::PutRightIndent ( float Indent ) {
    HRESULT _hr = put_RightIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline float Office::ParagraphFormat2::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1623)
inline void Office::ParagraphFormat2::PutSpaceAfter ( float Space ) {
    HRESULT _hr = put_SpaceAfter(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline float Office::ParagraphFormat2::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1625)
inline void Office::ParagraphFormat2::PutSpaceBefore ( float Space ) {
    HRESULT _hr = put_SpaceBefore(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1626)
inline float Office::ParagraphFormat2::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1627)
inline void Office::ParagraphFormat2::PutSpaceWithin ( float Space ) {
    HRESULT _hr = put_SpaceWithin(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1628)
inline Office::TabStops2Ptr Office::ParagraphFormat2::GetTabStops ( ) {
    struct TabStops2 * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStops2Ptr(_result, false);
}

#pragma implementation_key(1629)
inline enum Office::MsoTextDirection Office::ParagraphFormat2::GetTextDirection ( ) {
    enum MsoTextDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1630)
inline void Office::ParagraphFormat2::PutTextDirection ( enum MsoTextDirection Direction ) {
    HRESULT _hr = put_TextDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1631)
inline enum Office::MsoTriState Office::ParagraphFormat2::GetWordWrap ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1632)
inline void Office::ParagraphFormat2::PutWordWrap ( enum MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextRange2 wrapper method implementations
//

#pragma implementation_key(1633)
inline _bstr_t Office::TextRange2::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1634)
inline void Office::TextRange2::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1635)
inline int Office::TextRange2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline Office::TextRange2Ptr Office::TextRange2::Item ( const _variant_t & Index ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1637)
inline IUnknownPtr Office::TextRange2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1638)
inline IDispatchPtr Office::TextRange2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1639)
inline Office::TextRange2Ptr Office::TextRange2::GetParagraphs ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1640)
inline Office::TextRange2Ptr Office::TextRange2::GetSentences ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1641)
inline Office::TextRange2Ptr Office::TextRange2::GetWords ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1642)
inline Office::TextRange2Ptr Office::TextRange2::GetCharacters ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1643)
inline Office::TextRange2Ptr Office::TextRange2::GetLines ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1644)
inline Office::TextRange2Ptr Office::TextRange2::GetRuns ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1645)
inline Office::ParagraphFormat2Ptr Office::TextRange2::GetParagraphFormat ( ) {
    struct ParagraphFormat2 * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormat2Ptr(_result, false);
}

#pragma implementation_key(1646)
inline Office::Font2Ptr Office::TextRange2::GetFont ( ) {
    struct Font2 * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Font2Ptr(_result, false);
}

#pragma implementation_key(1647)
inline int Office::TextRange2::GetLength ( ) {
    int _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline int Office::TextRange2::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1649)
inline float Office::TextRange2::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline float Office::TextRange2::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline float Office::TextRange2::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1652)
inline float Office::TextRange2::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline Office::TextRange2Ptr Office::TextRange2::TrimText ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1654)
inline Office::TextRange2Ptr Office::TextRange2::InsertAfter ( _bstr_t NewText ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1655)
inline Office::TextRange2Ptr Office::TextRange2::InsertBefore ( _bstr_t NewText ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1656)
inline Office::TextRange2Ptr Office::TextRange2::InsertSymbol ( _bstr_t FontName, int CharNumber, enum MsoTriState Unicode ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1657)
inline HRESULT Office::TextRange2::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1658)
inline HRESULT Office::TextRange2::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1659)
inline HRESULT Office::TextRange2::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1660)
inline HRESULT Office::TextRange2::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline Office::TextRange2Ptr Office::TextRange2::Paste ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1662)
inline Office::TextRange2Ptr Office::TextRange2::PasteSpecial ( enum MsoClipboardFormat Format ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_PasteSpecial(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1663)
inline HRESULT Office::TextRange2::ChangeCase ( enum MsoTextChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1664)
inline HRESULT Office::TextRange2::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1665)
inline HRESULT Office::TextRange2::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1666)
inline Office::TextRange2Ptr Office::TextRange2::Find ( _bstr_t FindWhat, int After, enum MsoTriState MatchCase, enum MsoTriState WholeWords ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1667)
inline Office::TextRange2Ptr Office::TextRange2::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum MsoTriState MatchCase, enum MsoTriState WholeWords ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1668)
inline HRESULT Office::TextRange2::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1669)
inline enum Office::MsoLanguageID Office::TextRange2::GetLanguageID ( ) {
    enum MsoLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void Office::TextRange2::PutLanguageID ( enum MsoLanguageID LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline HRESULT Office::TextRange2::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1672)
inline HRESULT Office::TextRange2::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1673)
inline Office::TextRange2Ptr Office::TextRange2::GetMathZones ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_MathZones(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

//
// interface TextFrame2 wrapper method implementations
//

#pragma implementation_key(1674)
inline IDispatchPtr Office::TextFrame2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1675)
inline float Office::TextFrame2::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1676)
inline void Office::TextFrame2::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline float Office::TextFrame2::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void Office::TextFrame2::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline float Office::TextFrame2::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1680)
inline void Office::TextFrame2::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1681)
inline float Office::TextFrame2::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1682)
inline void Office::TextFrame2::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1683)
inline enum Office::MsoTextOrientation Office::TextFrame2::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1684)
inline void Office::TextFrame2::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1685)
inline enum Office::MsoHorizontalAnchor Office::TextFrame2::GetHorizontalAnchor ( ) {
    enum MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline void Office::TextFrame2::PutHorizontalAnchor ( enum MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1687)
inline enum Office::MsoVerticalAnchor Office::TextFrame2::GetVerticalAnchor ( ) {
    enum MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline void Office::TextFrame2::PutVerticalAnchor ( enum MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1689)
inline enum Office::MsoPathFormat Office::TextFrame2::GetPathFormat ( ) {
    enum MsoPathFormat _result;
    HRESULT _hr = get_PathFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void Office::TextFrame2::PutPathFormat ( enum MsoPathFormat PathFormat ) {
    HRESULT _hr = put_PathFormat(PathFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline enum Office::MsoWarpFormat Office::TextFrame2::GetWarpFormat ( ) {
    enum MsoWarpFormat _result;
    HRESULT _hr = get_WarpFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline void Office::TextFrame2::PutWarpFormat ( enum MsoWarpFormat WarpFormat ) {
    HRESULT _hr = put_WarpFormat(WarpFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline enum Office::MsoPresetTextEffect Office::TextFrame2::GetWordArtformat ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtformat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline void Office::TextFrame2::PutWordArtformat ( enum MsoPresetTextEffect WordArtformat ) {
    HRESULT _hr = put_WordArtformat(WordArtformat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1695)
inline enum Office::MsoTriState Office::TextFrame2::GetWordWrap ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline void Office::TextFrame2::PutWordWrap ( enum MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1697)
inline enum Office::MsoAutoSize Office::TextFrame2::GetAutoSize ( ) {
    enum MsoAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void Office::TextFrame2::PutAutoSize ( enum MsoAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline Office::ThreeDFormatPtr Office::TextFrame2::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1700)
inline enum Office::MsoTriState Office::TextFrame2::GetHasText ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1701)
inline Office::TextRange2Ptr Office::TextFrame2::GetTextRange ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

#pragma implementation_key(1702)
inline Office::TextColumn2Ptr Office::TextFrame2::GetColumn ( ) {
    struct TextColumn2 * _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextColumn2Ptr(_result, false);
}

#pragma implementation_key(1703)
inline Office::Ruler2Ptr Office::TextFrame2::GetRuler ( ) {
    struct Ruler2 * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Ruler2Ptr(_result, false);
}

#pragma implementation_key(1704)
inline HRESULT Office::TextFrame2::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1705)
inline enum Office::MsoTriState Office::TextFrame2::GetNoTextRotation ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NoTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline void Office::TextFrame2::PutNoTextRotation ( enum MsoTriState NoTextRotation ) {
    HRESULT _hr = put_NoTextRotation(NoTextRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Crop wrapper method implementations
//

#pragma implementation_key(1707)
inline float Office::Crop::GetPictureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline void Office::Crop::PutPictureOffsetX ( float PictureOffsetX ) {
    HRESULT _hr = put_PictureOffsetX(PictureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline float Office::Crop::GetPictureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline void Office::Crop::PutPictureOffsetY ( float PictureOffsetY ) {
    HRESULT _hr = put_PictureOffsetY(PictureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1711)
inline float Office::Crop::GetPictureWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1712)
inline void Office::Crop::PutPictureWidth ( float PictureWidth ) {
    HRESULT _hr = put_PictureWidth(PictureWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1713)
inline float Office::Crop::GetPictureHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline void Office::Crop::PutPictureHeight ( float PictureHeight ) {
    HRESULT _hr = put_PictureHeight(PictureHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1715)
inline float Office::Crop::GetShapeLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1716)
inline void Office::Crop::PutShapeLeft ( float ShapeLeft ) {
    HRESULT _hr = put_ShapeLeft(ShapeLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline float Office::Crop::GetShapeTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void Office::Crop::PutShapeTop ( float ShapeTop ) {
    HRESULT _hr = put_ShapeTop(ShapeTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline float Office::Crop::GetShapeWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline void Office::Crop::PutShapeWidth ( float ShapeWidth ) {
    HRESULT _hr = put_ShapeWidth(ShapeWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline float Office::Crop::GetShapeHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1722)
inline void Office::Crop::PutShapeHeight ( float ShapeHeight ) {
    HRESULT _hr = put_ShapeHeight(ShapeHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(1723)
inline IDispatchPtr Office::PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1724)
inline HRESULT Office::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1725)
inline HRESULT Office::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1726)
inline float Office::PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1727)
inline void Office::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline enum Office::MsoPictureColorType Office::PictureFormat::GetColorType ( ) {
    enum MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline void Office::PictureFormat::PutColorType ( enum MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline float Office::PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline void Office::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1732)
inline float Office::PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline void Office::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline float Office::PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline void Office::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline float Office::PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline void Office::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1738)
inline float Office::PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline void Office::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1740)
inline Office::MsoRGBType Office::PictureFormat::GetTransparencyColor ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1741)
inline void Office::PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1742)
inline enum Office::MsoTriState Office::PictureFormat::GetTransparentBackground ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline void Office::PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1744)
inline Office::CropPtr Office::PictureFormat::GetCrop ( ) {
    struct Crop * _result = 0;
    HRESULT _hr = get_Crop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CropPtr(_result, false);
}

//
// interface IMsoChartFormat wrapper method implementations
//

#pragma implementation_key(1745)
inline Office::FillFormatPtr Office::IMsoChartFormat::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1746)
inline Office::GlowFormatPtr Office::IMsoChartFormat::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

#pragma implementation_key(1747)
inline Office::LineFormatPtr Office::IMsoChartFormat::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1748)
inline IDispatchPtr Office::IMsoChartFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1749)
inline Office::PictureFormatPtr Office::IMsoChartFormat::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1750)
inline Office::ShadowFormatPtr Office::IMsoChartFormat::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1751)
inline Office::SoftEdgeFormatPtr Office::IMsoChartFormat::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(1752)
inline Office::TextFrame2Ptr Office::IMsoChartFormat::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(1753)
inline Office::ThreeDFormatPtr Office::IMsoChartFormat::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1754)
inline IDispatchPtr Office::IMsoChartFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1755)
inline long Office::IMsoChartFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoLegend wrapper method implementations
//

#pragma implementation_key(1756)
inline IDispatchPtr Office::IMsoLegend::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1757)
inline _bstr_t Office::IMsoLegend::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1758)
inline _variant_t Office::IMsoLegend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1759)
inline Office::IMsoBorderPtr Office::IMsoLegend::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1760)
inline _variant_t Office::IMsoLegend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1761)
inline Office::ChartFontPtr Office::IMsoLegend::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1762)
inline IDispatchPtr Office::IMsoLegend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1763)
inline enum Office::XlLegendPosition Office::IMsoLegend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline void Office::IMsoLegend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline VARIANT_BOOL Office::IMsoLegend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline void Office::IMsoLegend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline _variant_t Office::IMsoLegend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1768)
inline double Office::IMsoLegend::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1769)
inline void Office::IMsoLegend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1770)
inline Office::IMsoInteriorPtr Office::IMsoLegend::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1771)
inline Office::ChartFillFormatPtr Office::IMsoLegend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1772)
inline double Office::IMsoLegend::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline void Office::IMsoLegend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1774)
inline double Office::IMsoLegend::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1775)
inline void Office::IMsoLegend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1776)
inline double Office::IMsoLegend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1777)
inline void Office::IMsoLegend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1778)
inline _variant_t Office::IMsoLegend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1779)
inline void Office::IMsoLegend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline VARIANT_BOOL Office::IMsoLegend::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1781)
inline void Office::IMsoLegend::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1782)
inline Office::IMsoChartFormatPtr Office::IMsoLegend::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1783)
inline IDispatchPtr Office::IMsoLegend::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1784)
inline long Office::IMsoLegend::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoWalls wrapper method implementations
//

#pragma implementation_key(1785)
inline _bstr_t Office::IMsoWalls::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1786)
inline _variant_t Office::IMsoWalls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1787)
inline IDispatchPtr Office::IMsoWalls::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1788)
inline Office::IMsoBorderPtr Office::IMsoWalls::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1789)
inline _variant_t Office::IMsoWalls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1790)
inline Office::IMsoInteriorPtr Office::IMsoWalls::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1791)
inline Office::ChartFillFormatPtr Office::IMsoWalls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1792)
inline _variant_t Office::IMsoWalls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1793)
inline void Office::IMsoWalls::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1794)
inline HRESULT Office::IMsoWalls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1795)
inline _variant_t Office::IMsoWalls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1796)
inline void Office::IMsoWalls::PutPictureUnit ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureUnit(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1797)
inline long Office::IMsoWalls::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1798)
inline void Office::IMsoWalls::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1799)
inline Office::IMsoChartFormatPtr Office::IMsoWalls::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1800)
inline IDispatchPtr Office::IMsoWalls::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1801)
inline long Office::IMsoWalls::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoFloor wrapper method implementations
//

#pragma implementation_key(1802)
inline _bstr_t Office::IMsoFloor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1803)
inline _variant_t Office::IMsoFloor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1804)
inline IDispatchPtr Office::IMsoFloor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1805)
inline Office::IMsoBorderPtr Office::IMsoFloor::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1806)
inline _variant_t Office::IMsoFloor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1807)
inline Office::IMsoInteriorPtr Office::IMsoFloor::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1808)
inline Office::ChartFillFormatPtr Office::IMsoFloor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1809)
inline _variant_t Office::IMsoFloor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1810)
inline void Office::IMsoFloor::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1811)
inline HRESULT Office::IMsoFloor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1812)
inline long Office::IMsoFloor::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1813)
inline void Office::IMsoFloor::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1814)
inline Office::IMsoChartFormatPtr Office::IMsoFloor::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1815)
inline IDispatchPtr Office::IMsoFloor::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1816)
inline long Office::IMsoFloor::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoPlotArea wrapper method implementations
//

#pragma implementation_key(1817)
inline _bstr_t Office::IMsoPlotArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1818)
inline _variant_t Office::IMsoPlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1819)
inline IDispatchPtr Office::IMsoPlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1820)
inline Office::IMsoBorderPtr Office::IMsoPlotArea::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1821)
inline _variant_t Office::IMsoPlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1822)
inline double Office::IMsoPlotArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1823)
inline void Office::IMsoPlotArea::PutHeight ( double pd ) {
    HRESULT _hr = put_Height(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1824)
inline Office::IMsoInteriorPtr Office::IMsoPlotArea::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1825)
inline Office::ChartFillFormatPtr Office::IMsoPlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1826)
inline double Office::IMsoPlotArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1827)
inline void Office::IMsoPlotArea::PutLeft ( double pd ) {
    HRESULT _hr = put_Left(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1828)
inline double Office::IMsoPlotArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline void Office::IMsoPlotArea::PutTop ( double pd ) {
    HRESULT _hr = put_Top(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1830)
inline double Office::IMsoPlotArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1831)
inline void Office::IMsoPlotArea::PutWidth ( double pd ) {
    HRESULT _hr = put_Width(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1832)
inline double Office::IMsoPlotArea::GetInsideLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1833)
inline void Office::IMsoPlotArea::PutInsideLeft ( double pd ) {
    HRESULT _hr = put_InsideLeft(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1834)
inline double Office::IMsoPlotArea::GetInsideTop ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1835)
inline void Office::IMsoPlotArea::PutInsideTop ( double pd ) {
    HRESULT _hr = put_InsideTop(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1836)
inline double Office::IMsoPlotArea::GetInsideWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1837)
inline void Office::IMsoPlotArea::PutInsideWidth ( double pd ) {
    HRESULT _hr = put_InsideWidth(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1838)
inline double Office::IMsoPlotArea::GetInsideHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1839)
inline void Office::IMsoPlotArea::PutInsideHeight ( double pd ) {
    HRESULT _hr = put_InsideHeight(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1840)
inline enum Office::XlChartElementPosition Office::IMsoPlotArea::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1841)
inline void Office::IMsoPlotArea::PutPosition ( enum XlChartElementPosition pval ) {
    HRESULT _hr = put_Position(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1842)
inline Office::IMsoChartFormatPtr Office::IMsoPlotArea::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1843)
inline IDispatchPtr Office::IMsoPlotArea::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1844)
inline long Office::IMsoPlotArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartArea wrapper method implementations
//

#pragma implementation_key(1845)
inline _bstr_t Office::IMsoChartArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1846)
inline _variant_t Office::IMsoChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1847)
inline IDispatchPtr Office::IMsoChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1848)
inline Office::IMsoBorderPtr Office::IMsoChartArea::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1849)
inline _variant_t Office::IMsoChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1850)
inline _variant_t Office::IMsoChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1851)
inline _variant_t Office::IMsoChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1852)
inline Office::ChartFontPtr Office::IMsoChartArea::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1853)
inline VARIANT_BOOL Office::IMsoChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1854)
inline void Office::IMsoChartArea::PutShadow ( VARIANT_BOOL pf ) {
    HRESULT _hr = put_Shadow(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1855)
inline _variant_t Office::IMsoChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1856)
inline double Office::IMsoChartArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1857)
inline void Office::IMsoChartArea::PutHeight ( double pd ) {
    HRESULT _hr = put_Height(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1858)
inline Office::IMsoInteriorPtr Office::IMsoChartArea::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1859)
inline Office::ChartFillFormatPtr Office::IMsoChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1860)
inline double Office::IMsoChartArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1861)
inline void Office::IMsoChartArea::PutLeft ( double pd ) {
    HRESULT _hr = put_Left(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1862)
inline double Office::IMsoChartArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline void Office::IMsoChartArea::PutTop ( double pd ) {
    HRESULT _hr = put_Top(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1864)
inline double Office::IMsoChartArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1865)
inline void Office::IMsoChartArea::PutWidth ( double pd ) {
    HRESULT _hr = put_Width(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1866)
inline _variant_t Office::IMsoChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1867)
inline void Office::IMsoChartArea::PutAutoScaleFont ( const _variant_t & pvar ) {
    HRESULT _hr = put_AutoScaleFont(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1868)
inline Office::IMsoChartFormatPtr Office::IMsoChartArea::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1869)
inline VARIANT_BOOL Office::IMsoChartArea::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1870)
inline void Office::IMsoChartArea::PutRoundedCorners ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_RoundedCorners(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1871)
inline IDispatchPtr Office::IMsoChartArea::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1872)
inline long Office::IMsoChartArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoSeriesLines wrapper method implementations
//

#pragma implementation_key(1873)
inline _bstr_t Office::IMsoSeriesLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1874)
inline _variant_t Office::IMsoSeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1875)
inline IDispatchPtr Office::IMsoSeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1876)
inline Office::IMsoBorderPtr Office::IMsoSeriesLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1877)
inline _variant_t Office::IMsoSeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1878)
inline Office::IMsoChartFormatPtr Office::IMsoSeriesLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1879)
inline IDispatchPtr Office::IMsoSeriesLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1880)
inline long Office::IMsoSeriesLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoLeaderLines wrapper method implementations
//

#pragma implementation_key(1881)
inline HRESULT Office::IMsoLeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1882)
inline Office::IMsoBorderPtr Office::IMsoLeaderLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1883)
inline HRESULT Office::IMsoLeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1884)
inline Office::IMsoChartFormatPtr Office::IMsoLeaderLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1885)
inline IDispatchPtr Office::IMsoLeaderLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1886)
inline long Office::IMsoLeaderLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1887)
inline IDispatchPtr Office::IMsoLeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface GridLines wrapper method implementations
//

#pragma implementation_key(1888)
inline _bstr_t Office::GridLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1889)
inline _variant_t Office::GridLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1890)
inline IDispatchPtr Office::GridLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1891)
inline Office::IMsoBorderPtr Office::GridLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1892)
inline _variant_t Office::GridLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1893)
inline Office::IMsoChartFormatPtr Office::GridLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1894)
inline IDispatchPtr Office::GridLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1895)
inline long Office::GridLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoUpBars wrapper method implementations
//

#pragma implementation_key(1896)
inline _bstr_t Office::IMsoUpBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1897)
inline _variant_t Office::IMsoUpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1898)
inline IDispatchPtr Office::IMsoUpBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1899)
inline Office::IMsoBorderPtr Office::IMsoUpBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1900)
inline _variant_t Office::IMsoUpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1901)
inline Office::IMsoInteriorPtr Office::IMsoUpBars::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1902)
inline Office::ChartFillFormatPtr Office::IMsoUpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1903)
inline Office::IMsoChartFormatPtr Office::IMsoUpBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1904)
inline IDispatchPtr Office::IMsoUpBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1905)
inline long Office::IMsoUpBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoDownBars wrapper method implementations
//

#pragma implementation_key(1906)
inline _bstr_t Office::IMsoDownBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1907)
inline _variant_t Office::IMsoDownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1908)
inline IDispatchPtr Office::IMsoDownBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1909)
inline Office::IMsoBorderPtr Office::IMsoDownBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1910)
inline _variant_t Office::IMsoDownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1911)
inline Office::IMsoInteriorPtr Office::IMsoDownBars::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1912)
inline Office::ChartFillFormatPtr Office::IMsoDownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1913)
inline Office::IMsoChartFormatPtr Office::IMsoDownBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1914)
inline IDispatchPtr Office::IMsoDownBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1915)
inline long Office::IMsoDownBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoLegendKey wrapper method implementations
//

#pragma implementation_key(1916)
inline IDispatchPtr Office::IMsoLegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1917)
inline Office::IMsoBorderPtr Office::IMsoLegendKey::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1918)
inline _variant_t Office::IMsoLegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1919)
inline _variant_t Office::IMsoLegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1920)
inline Office::IMsoInteriorPtr Office::IMsoLegendKey::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(1921)
inline Office::ChartFillFormatPtr Office::IMsoLegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(1922)
inline VARIANT_BOOL Office::IMsoLegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1923)
inline void Office::IMsoLegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1924)
inline long Office::IMsoLegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1925)
inline void Office::IMsoLegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1926)
inline enum Office::XlColorIndex Office::IMsoLegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline void Office::IMsoLegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1928)
inline long Office::IMsoLegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline void Office::IMsoLegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1930)
inline enum Office::XlColorIndex Office::IMsoLegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline void Office::IMsoLegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1932)
inline long Office::IMsoLegendKey::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1933)
inline void Office::IMsoLegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1934)
inline enum Office::XlMarkerStyle Office::IMsoLegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline void Office::IMsoLegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1936)
inline long Office::IMsoLegendKey::GetPictureType ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1937)
inline void Office::IMsoLegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1938)
inline double Office::IMsoLegendKey::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1939)
inline void Office::IMsoLegendKey::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1940)
inline _variant_t Office::IMsoLegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1941)
inline VARIANT_BOOL Office::IMsoLegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1942)
inline void Office::IMsoLegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1943)
inline double Office::IMsoLegendKey::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1944)
inline double Office::IMsoLegendKey::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1945)
inline double Office::IMsoLegendKey::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1946)
inline double Office::IMsoLegendKey::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1947)
inline VARIANT_BOOL Office::IMsoLegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1948)
inline void Office::IMsoLegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1949)
inline Office::IMsoChartFormatPtr Office::IMsoLegendKey::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1950)
inline IDispatchPtr Office::IMsoLegendKey::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1951)
inline long Office::IMsoLegendKey::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1952)
inline double Office::IMsoLegendKey::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1953)
inline void Office::IMsoLegendKey::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LegendEntry wrapper method implementations
//

#pragma implementation_key(1954)
inline IDispatchPtr Office::LegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1955)
inline _variant_t Office::LegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1956)
inline Office::ChartFontPtr Office::LegendEntry::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(1957)
inline long Office::LegendEntry::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1958)
inline Office::IMsoLegendKeyPtr Office::LegendEntry::GetLegendKey ( ) {
    struct IMsoLegendKey * _result = 0;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLegendKeyPtr(_result, false);
}

#pragma implementation_key(1959)
inline _variant_t Office::LegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1960)
inline _variant_t Office::LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1961)
inline void Office::LegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1962)
inline double Office::LegendEntry::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1963)
inline double Office::LegendEntry::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline double Office::LegendEntry::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1965)
inline double Office::LegendEntry::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline Office::IMsoChartFormatPtr Office::LegendEntry::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1967)
inline IDispatchPtr Office::LegendEntry::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1968)
inline long Office::LegendEntry::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface LegendEntries wrapper method implementations
//

#pragma implementation_key(1969)
inline IDispatchPtr Office::LegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1970)
inline long Office::LegendEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline Office::LegendEntryPtr Office::LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

#pragma implementation_key(1972)
inline IUnknownPtr Office::LegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1973)
inline IDispatchPtr Office::LegendEntries::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1974)
inline long Office::LegendEntries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1975)
inline Office::LegendEntryPtr Office::LegendEntries::Get_Default ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

//
// interface IMsoErrorBars wrapper method implementations
//

#pragma implementation_key(1976)
inline IDispatchPtr Office::IMsoErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1977)
inline _bstr_t Office::IMsoErrorBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1978)
inline _variant_t Office::IMsoErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1979)
inline Office::IMsoBorderPtr Office::IMsoErrorBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1980)
inline _variant_t Office::IMsoErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1981)
inline _variant_t Office::IMsoErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1982)
inline enum Office::XlEndStyleCap Office::IMsoErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void Office::IMsoErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline Office::IMsoChartFormatPtr Office::IMsoErrorBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(1985)
inline IDispatchPtr Office::IMsoErrorBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1986)
inline long Office::IMsoErrorBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoSeries wrapper method implementations
//

#pragma implementation_key(1987)
inline IDispatchPtr Office::IMsoSeries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1988)
inline _variant_t Office::IMsoSeries::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1989)
inline enum Office::XlAxisGroup Office::IMsoSeries::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1990)
inline void Office::IMsoSeries::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1991)
inline Office::IMsoBorderPtr Office::IMsoSeries::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(1992)
inline _variant_t Office::IMsoSeries::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1993)
inline _variant_t Office::IMsoSeries::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1994)
inline IDispatchPtr Office::IMsoSeries::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1995)
inline _variant_t Office::IMsoSeries::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1996)
inline _variant_t Office::IMsoSeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1997)
inline Office::IMsoErrorBarsPtr Office::IMsoSeries::GetErrorBars ( ) {
    struct IMsoErrorBars * _result = 0;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoErrorBarsPtr(_result, false);
}

#pragma implementation_key(1998)
inline long Office::IMsoSeries::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1999)
inline void Office::IMsoSeries::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2000)
inline _bstr_t Office::IMsoSeries::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2001)
inline void Office::IMsoSeries::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2002)
inline _bstr_t Office::IMsoSeries::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2003)
inline void Office::IMsoSeries::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2004)
inline _bstr_t Office::IMsoSeries::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2005)
inline void Office::IMsoSeries::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2006)
inline _bstr_t Office::IMsoSeries::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2007)
inline void Office::IMsoSeries::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2008)
inline VARIANT_BOOL Office::IMsoSeries::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline void Office::IMsoSeries::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2010)
inline VARIANT_BOOL Office::IMsoSeries::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2011)
inline void Office::IMsoSeries::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2012)
inline Office::IMsoInteriorPtr Office::IMsoSeries::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(2013)
inline Office::ChartFillFormatPtr Office::IMsoSeries::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2014)
inline VARIANT_BOOL Office::IMsoSeries::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2015)
inline void Office::IMsoSeries::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2016)
inline long Office::IMsoSeries::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2017)
inline void Office::IMsoSeries::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2018)
inline enum Office::XlColorIndex Office::IMsoSeries::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2019)
inline void Office::IMsoSeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline long Office::IMsoSeries::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void Office::IMsoSeries::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline enum Office::XlColorIndex Office::IMsoSeries::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void Office::IMsoSeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline long Office::IMsoSeries::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void Office::IMsoSeries::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline enum Office::XlMarkerStyle Office::IMsoSeries::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2027)
inline void Office::IMsoSeries::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline _bstr_t Office::IMsoSeries::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2029)
inline void Office::IMsoSeries::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline _variant_t Office::IMsoSeries::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2031)
inline enum Office::XlChartPictureType Office::IMsoSeries::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2032)
inline void Office::IMsoSeries::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2033)
inline double Office::IMsoSeries::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline void Office::IMsoSeries::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2035)
inline long Office::IMsoSeries::GetPlotOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2036)
inline void Office::IMsoSeries::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2037)
inline IDispatchPtr Office::IMsoSeries::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2038)
inline _variant_t Office::IMsoSeries::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2039)
inline VARIANT_BOOL Office::IMsoSeries::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2040)
inline void Office::IMsoSeries::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2041)
inline IDispatchPtr Office::IMsoSeries::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2042)
inline long Office::IMsoSeries::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2043)
inline void Office::IMsoSeries::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2044)
inline enum Office::XlChartType Office::IMsoSeries::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2045)
inline void Office::IMsoSeries::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2046)
inline HRESULT Office::IMsoSeries::ApplyCustomType ( enum XlChartType ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2047)
inline _variant_t Office::IMsoSeries::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2048)
inline void Office::IMsoSeries::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2049)
inline _variant_t Office::IMsoSeries::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2050)
inline void Office::IMsoSeries::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2051)
inline _variant_t Office::IMsoSeries::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2052)
inline void Office::IMsoSeries::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2053)
inline enum Office::XlBarShape Office::IMsoSeries::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2054)
inline void Office::IMsoSeries::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2055)
inline VARIANT_BOOL Office::IMsoSeries::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline void Office::IMsoSeries::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2057)
inline VARIANT_BOOL Office::IMsoSeries::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2058)
inline void Office::IMsoSeries::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2059)
inline VARIANT_BOOL Office::IMsoSeries::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2060)
inline void Office::IMsoSeries::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2061)
inline VARIANT_BOOL Office::IMsoSeries::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2062)
inline void Office::IMsoSeries::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2063)
inline VARIANT_BOOL Office::IMsoSeries::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline void Office::IMsoSeries::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2065)
inline VARIANT_BOOL Office::IMsoSeries::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2066)
inline void Office::IMsoSeries::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2067)
inline Office::IMsoLeaderLinesPtr Office::IMsoSeries::GetLeaderLines ( ) {
    struct IMsoLeaderLines * _result = 0;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLeaderLinesPtr(_result, false);
}

#pragma implementation_key(2068)
inline _variant_t Office::IMsoSeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2069)
inline Office::IMsoChartFormatPtr Office::IMsoSeries::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2070)
inline IDispatchPtr Office::IMsoSeries::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2071)
inline long Office::IMsoSeries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2072)
inline double Office::IMsoSeries::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2073)
inline void Office::IMsoSeries::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2074)
inline long Office::IMsoSeries::GetPlotColorIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2075)
inline long Office::IMsoSeries::GetInvertColor ( ) {
    long _result = 0;
    HRESULT _hr = get_InvertColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2076)
inline void Office::IMsoSeries::PutInvertColor ( long RHS ) {
    HRESULT _hr = put_InvertColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2077)
inline enum Office::XlColorIndex Office::IMsoSeries::GetInvertColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_InvertColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2078)
inline void Office::IMsoSeries::PutInvertColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_InvertColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SeriesCollection wrapper method implementations
//

#pragma implementation_key(2079)
inline IDispatchPtr Office::SeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2080)
inline Office::IMsoSeriesPtr Office::SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

#pragma implementation_key(2081)
inline long Office::SeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2082)
inline _variant_t Office::SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2083)
inline Office::IMsoSeriesPtr Office::SeriesCollection::Item ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

#pragma implementation_key(2084)
inline IUnknownPtr Office::SeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2085)
inline _variant_t Office::SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2086)
inline Office::IMsoSeriesPtr Office::SeriesCollection::NewSeries ( ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

#pragma implementation_key(2087)
inline IDispatchPtr Office::SeriesCollection::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2088)
inline long Office::SeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2089)
inline Office::IMsoSeriesPtr Office::SeriesCollection::Get_Default ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

//
// interface IMsoDataLabel wrapper method implementations
//

#pragma implementation_key(2090)
inline IDispatchPtr Office::IMsoDataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2091)
inline _bstr_t Office::IMsoDataLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2092)
inline _variant_t Office::IMsoDataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2093)
inline Office::IMsoBorderPtr Office::IMsoDataLabel::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2094)
inline _variant_t Office::IMsoDataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2095)
inline Office::IMsoInteriorPtr Office::IMsoDataLabel::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(2096)
inline Office::ChartFillFormatPtr Office::IMsoDataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2097)
inline _bstr_t Office::IMsoDataLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2098)
inline void Office::IMsoDataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2099)
inline Office::IMsoCharactersPtr Office::IMsoDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

#pragma implementation_key(2100)
inline Office::ChartFontPtr Office::IMsoDataLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(2101)
inline _variant_t Office::IMsoDataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2102)
inline void Office::IMsoDataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2103)
inline double Office::IMsoDataLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2104)
inline void Office::IMsoDataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2105)
inline _variant_t Office::IMsoDataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2106)
inline void Office::IMsoDataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2107)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2108)
inline void Office::IMsoDataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2109)
inline _bstr_t Office::IMsoDataLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2110)
inline void Office::IMsoDataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2111)
inline double Office::IMsoDataLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline void Office::IMsoDataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2113)
inline _variant_t Office::IMsoDataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2114)
inline void Office::IMsoDataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2115)
inline long Office::IMsoDataLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline void Office::IMsoDataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2117)
inline _variant_t Office::IMsoDataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2118)
inline void Office::IMsoDataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2119)
inline VARIANT_BOOL Office::IMsoDataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2120)
inline void Office::IMsoDataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2121)
inline _bstr_t Office::IMsoDataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2122)
inline void Office::IMsoDataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2123)
inline VARIANT_BOOL Office::IMsoDataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2124)
inline void Office::IMsoDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2125)
inline _variant_t Office::IMsoDataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2126)
inline void Office::IMsoDataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2127)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2128)
inline void Office::IMsoDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2129)
inline _variant_t Office::IMsoDataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2130)
inline void Office::IMsoDataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2131)
inline enum Office::XlDataLabelPosition Office::IMsoDataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2132)
inline void Office::IMsoDataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2133)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2134)
inline void Office::IMsoDataLabel::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2136)
inline void Office::IMsoDataLabel::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2137)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2138)
inline void Office::IMsoDataLabel::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2139)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2140)
inline void Office::IMsoDataLabel::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline VARIANT_BOOL Office::IMsoDataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2142)
inline void Office::IMsoDataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline _variant_t Office::IMsoDataLabel::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2144)
inline void Office::IMsoDataLabel::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2145)
inline Office::IMsoChartFormatPtr Office::IMsoDataLabel::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2146)
inline double Office::IMsoDataLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2147)
inline IDispatchPtr Office::IMsoDataLabel::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2148)
inline long Office::IMsoDataLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2149)
inline double Office::IMsoDataLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2150)
inline void Office::IMsoDataLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline _bstr_t Office::IMsoDataLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2152)
inline void Office::IMsoDataLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline _bstr_t Office::IMsoDataLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2154)
inline void Office::IMsoDataLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2155)
inline _bstr_t Office::IMsoDataLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2156)
inline void Office::IMsoDataLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2157)
inline _bstr_t Office::IMsoDataLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMsoTrendline wrapper method implementations
//

#pragma implementation_key(2158)
inline IDispatchPtr Office::IMsoTrendline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2159)
inline double Office::IMsoTrendline::GetBackward ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2160)
inline void Office::IMsoTrendline::PutBackward ( double RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2161)
inline Office::IMsoBorderPtr Office::IMsoTrendline::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2162)
inline _variant_t Office::IMsoTrendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2163)
inline Office::IMsoDataLabelPtr Office::IMsoTrendline::GetDataLabel ( ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

#pragma implementation_key(2164)
inline _variant_t Office::IMsoTrendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2165)
inline VARIANT_BOOL Office::IMsoTrendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline void Office::IMsoTrendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2167)
inline VARIANT_BOOL Office::IMsoTrendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2168)
inline void Office::IMsoTrendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2169)
inline double Office::IMsoTrendline::GetForward ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2170)
inline void Office::IMsoTrendline::PutForward ( double RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2171)
inline long Office::IMsoTrendline::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2172)
inline double Office::IMsoTrendline::GetIntercept ( ) {
    double _result = 0;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2173)
inline void Office::IMsoTrendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2174)
inline VARIANT_BOOL Office::IMsoTrendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2175)
inline void Office::IMsoTrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2176)
inline _bstr_t Office::IMsoTrendline::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2177)
inline void Office::IMsoTrendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2178)
inline VARIANT_BOOL Office::IMsoTrendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2179)
inline void Office::IMsoTrendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2180)
inline long Office::IMsoTrendline::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2181)
inline void Office::IMsoTrendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline long Office::IMsoTrendline::GetPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2183)
inline void Office::IMsoTrendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2184)
inline _variant_t Office::IMsoTrendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2185)
inline enum Office::XlTrendlineType Office::IMsoTrendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2186)
inline void Office::IMsoTrendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2187)
inline Office::IMsoChartFormatPtr Office::IMsoTrendline::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2188)
inline IDispatchPtr Office::IMsoTrendline::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2189)
inline long Office::IMsoTrendline::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2190)
inline double Office::IMsoTrendline::GetBackward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline void Office::IMsoTrendline::PutBackward2 ( double RHS ) {
    HRESULT _hr = put_Backward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2192)
inline double Office::IMsoTrendline::GetForward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void Office::IMsoTrendline::PutForward2 ( double RHS ) {
    HRESULT _hr = put_Forward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Trendlines wrapper method implementations
//

#pragma implementation_key(2194)
inline IDispatchPtr Office::Trendlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2195)
inline Office::IMsoTrendlinePtr Office::Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

#pragma implementation_key(2196)
inline long Office::Trendlines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2197)
inline Office::IMsoTrendlinePtr Office::Trendlines::Item ( const _variant_t & Index ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

#pragma implementation_key(2198)
inline IUnknownPtr Office::Trendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2199)
inline IDispatchPtr Office::Trendlines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2200)
inline long Office::Trendlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2201)
inline Office::IMsoTrendlinePtr Office::Trendlines::Get_Default ( const _variant_t & Index ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

//
// interface IMsoDataLabels wrapper method implementations
//

#pragma implementation_key(2202)
inline IDispatchPtr Office::IMsoDataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2203)
inline _bstr_t Office::IMsoDataLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2204)
inline _variant_t Office::IMsoDataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2205)
inline Office::IMsoBorderPtr Office::IMsoDataLabels::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2206)
inline _variant_t Office::IMsoDataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2207)
inline Office::IMsoInteriorPtr Office::IMsoDataLabels::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(2208)
inline Office::ChartFillFormatPtr Office::IMsoDataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2209)
inline Office::IMsoCharactersPtr Office::IMsoDataLabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

#pragma implementation_key(2210)
inline Office::ChartFontPtr Office::IMsoDataLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(2211)
inline _variant_t Office::IMsoDataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2212)
inline void Office::IMsoDataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2213)
inline _variant_t Office::IMsoDataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2214)
inline void Office::IMsoDataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2215)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2216)
inline void Office::IMsoDataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2217)
inline _variant_t Office::IMsoDataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2218)
inline void Office::IMsoDataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2219)
inline long Office::IMsoDataLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2220)
inline void Office::IMsoDataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2221)
inline _variant_t Office::IMsoDataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2222)
inline void Office::IMsoDataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2223)
inline VARIANT_BOOL Office::IMsoDataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline void Office::IMsoDataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2225)
inline _bstr_t Office::IMsoDataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2226)
inline void Office::IMsoDataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2227)
inline VARIANT_BOOL Office::IMsoDataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2228)
inline void Office::IMsoDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2229)
inline _variant_t Office::IMsoDataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2230)
inline void Office::IMsoDataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2231)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2232)
inline void Office::IMsoDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2233)
inline _variant_t Office::IMsoDataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2234)
inline void Office::IMsoDataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2235)
inline enum Office::XlDataLabelPosition Office::IMsoDataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline void Office::IMsoDataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2237)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2238)
inline void Office::IMsoDataLabels::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2239)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2240)
inline void Office::IMsoDataLabels::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2242)
inline void Office::IMsoDataLabels::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2243)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2244)
inline void Office::IMsoDataLabels::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2245)
inline VARIANT_BOOL Office::IMsoDataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2246)
inline void Office::IMsoDataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2247)
inline _variant_t Office::IMsoDataLabels::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2248)
inline void Office::IMsoDataLabels::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2249)
inline long Office::IMsoDataLabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2250)
inline Office::IMsoDataLabelPtr Office::IMsoDataLabels::Item ( const _variant_t & Index ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

#pragma implementation_key(2251)
inline IUnknownPtr Office::IMsoDataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2252)
inline Office::IMsoChartFormatPtr Office::IMsoDataLabels::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2253)
inline IDispatchPtr Office::IMsoDataLabels::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2254)
inline long Office::IMsoDataLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2255)
inline Office::IMsoDataLabelPtr Office::IMsoDataLabels::Get_Default ( const _variant_t & Index ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

//
// interface ChartPoint wrapper method implementations
//

#pragma implementation_key(2256)
inline IDispatchPtr Office::ChartPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2257)
inline _variant_t Office::ChartPoint::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2258)
inline Office::IMsoBorderPtr Office::ChartPoint::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2259)
inline _variant_t Office::ChartPoint::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2260)
inline _variant_t Office::ChartPoint::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2261)
inline Office::IMsoDataLabelPtr Office::ChartPoint::GetDataLabel ( ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

#pragma implementation_key(2262)
inline _variant_t Office::ChartPoint::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2263)
inline long Office::ChartPoint::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2264)
inline void Office::ChartPoint::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2265)
inline VARIANT_BOOL Office::ChartPoint::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2266)
inline void Office::ChartPoint::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2267)
inline Office::IMsoInteriorPtr Office::ChartPoint::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(2268)
inline VARIANT_BOOL Office::ChartPoint::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2269)
inline void Office::ChartPoint::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2270)
inline long Office::ChartPoint::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2271)
inline void Office::ChartPoint::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2272)
inline enum Office::XlColorIndex Office::ChartPoint::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2273)
inline void Office::ChartPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2274)
inline long Office::ChartPoint::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2275)
inline void Office::ChartPoint::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2276)
inline enum Office::XlColorIndex Office::ChartPoint::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2277)
inline void Office::ChartPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2278)
inline long Office::ChartPoint::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2279)
inline void Office::ChartPoint::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2280)
inline enum Office::XlMarkerStyle Office::ChartPoint::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline void Office::ChartPoint::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2282)
inline _variant_t Office::ChartPoint::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2283)
inline enum Office::XlChartPictureType Office::ChartPoint::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2284)
inline void Office::ChartPoint::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2285)
inline double Office::ChartPoint::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline void Office::ChartPoint::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2287)
inline _variant_t Office::ChartPoint::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2288)
inline VARIANT_BOOL Office::ChartPoint::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2289)
inline void Office::ChartPoint::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2290)
inline VARIANT_BOOL Office::ChartPoint::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2291)
inline void Office::ChartPoint::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2292)
inline VARIANT_BOOL Office::ChartPoint::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2293)
inline void Office::ChartPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2294)
inline VARIANT_BOOL Office::ChartPoint::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2295)
inline void Office::ChartPoint::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2296)
inline VARIANT_BOOL Office::ChartPoint::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2297)
inline void Office::ChartPoint::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2298)
inline Office::ChartFillFormatPtr Office::ChartPoint::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2299)
inline _variant_t Office::ChartPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2300)
inline VARIANT_BOOL Office::ChartPoint::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2301)
inline void Office::ChartPoint::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2302)
inline Office::IMsoChartFormatPtr Office::ChartPoint::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2303)
inline IDispatchPtr Office::ChartPoint::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2304)
inline long Office::ChartPoint::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2305)
inline double Office::ChartPoint::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2306)
inline void Office::ChartPoint::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2307)
inline _bstr_t Office::ChartPoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2308)
inline double Office::ChartPoint::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2309)
inline double Office::ChartPoint::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2310)
inline double Office::ChartPoint::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2311)
inline double Office::ChartPoint::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline double Office::ChartPoint::PieSliceLocation ( enum XlPieSliceLocation loc, enum XlPieSliceIndex Index ) {
    double _result = 0;
    HRESULT _hr = raw_PieSliceLocation(loc, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Points wrapper method implementations
//

#pragma implementation_key(2313)
inline IDispatchPtr Office::Points::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2314)
inline long Office::Points::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2315)
inline Office::ChartPointPtr Office::Points::Item ( long Index ) {
    struct ChartPoint * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPointPtr(_result, false);
}

#pragma implementation_key(2316)
inline IUnknownPtr Office::Points::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2317)
inline IDispatchPtr Office::Points::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2318)
inline long Office::Points::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2319)
inline Office::ChartPointPtr Office::Points::Get_Default ( long Index ) {
    struct ChartPoint * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPointPtr(_result, false);
}

//
// interface IMsoDataTable wrapper method implementations
//

#pragma implementation_key(2320)
inline void Office::IMsoDataTable::PutShowLegendKey ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_ShowLegendKey(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2321)
inline VARIANT_BOOL Office::IMsoDataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2322)
inline void Office::IMsoDataTable::PutHasBorderHorizontal ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderHorizontal(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2323)
inline VARIANT_BOOL Office::IMsoDataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline void Office::IMsoDataTable::PutHasBorderVertical ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderVertical(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline VARIANT_BOOL Office::IMsoDataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2326)
inline void Office::IMsoDataTable::PutHasBorderOutline ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderOutline(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2327)
inline VARIANT_BOOL Office::IMsoDataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2328)
inline Office::IMsoBorderPtr Office::IMsoDataTable::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2329)
inline Office::ChartFontPtr Office::IMsoDataTable::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(2330)
inline HRESULT Office::IMsoDataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2331)
inline HRESULT Office::IMsoDataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2332)
inline IDispatchPtr Office::IMsoDataTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2333)
inline _variant_t Office::IMsoDataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2334)
inline void Office::IMsoDataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2335)
inline Office::IMsoChartFormatPtr Office::IMsoDataTable::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2336)
inline IDispatchPtr Office::IMsoDataTable::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2337)
inline long Office::IMsoDataTable::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartTitle wrapper method implementations
//

#pragma implementation_key(2338)
inline void Office::IMsoChartTitle::PutCaption ( _bstr_t pbstr ) {
    HRESULT _hr = put_Caption(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2339)
inline _bstr_t Office::IMsoChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2340)
inline Office::IMsoCharactersPtr Office::IMsoChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

#pragma implementation_key(2341)
inline Office::ChartFontPtr Office::IMsoChartTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(2342)
inline void Office::IMsoChartTitle::PutHorizontalAlignment ( const _variant_t & Val ) {
    HRESULT _hr = put_HorizontalAlignment(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2343)
inline _variant_t Office::IMsoChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2344)
inline double Office::IMsoChartTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2345)
inline void Office::IMsoChartTitle::PutLeft ( double pval ) {
    HRESULT _hr = put_Left(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2346)
inline void Office::IMsoChartTitle::PutOrientation ( const _variant_t & Val ) {
    HRESULT _hr = put_Orientation(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2347)
inline _variant_t Office::IMsoChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2348)
inline VARIANT_BOOL Office::IMsoChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline void Office::IMsoChartTitle::PutShadow ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_Shadow(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2350)
inline void Office::IMsoChartTitle::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2351)
inline _bstr_t Office::IMsoChartTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2352)
inline double Office::IMsoChartTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2353)
inline void Office::IMsoChartTitle::PutTop ( double pval ) {
    HRESULT _hr = put_Top(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2354)
inline void Office::IMsoChartTitle::PutVerticalAlignment ( const _variant_t & Val ) {
    HRESULT _hr = put_VerticalAlignment(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2355)
inline _variant_t Office::IMsoChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2356)
inline int Office::IMsoChartTitle::GetReadingOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2357)
inline void Office::IMsoChartTitle::PutReadingOrder ( int pval ) {
    HRESULT _hr = put_ReadingOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline void Office::IMsoChartTitle::PutAutoScaleFont ( const _variant_t & Val ) {
    HRESULT _hr = put_AutoScaleFont(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2359)
inline _variant_t Office::IMsoChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2360)
inline Office::IMsoInteriorPtr Office::IMsoChartTitle::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

#pragma implementation_key(2361)
inline Office::ChartFillFormatPtr Office::IMsoChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

#pragma implementation_key(2362)
inline _variant_t Office::IMsoChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2363)
inline Office::IMsoBorderPtr Office::IMsoChartTitle::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2364)
inline _bstr_t Office::IMsoChartTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2365)
inline IDispatchPtr Office::IMsoChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2366)
inline _variant_t Office::IMsoChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2367)
inline VARIANT_BOOL Office::IMsoChartTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2368)
inline void Office::IMsoChartTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2369)
inline enum Office::XlChartElementPosition Office::IMsoChartTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2370)
inline void Office::IMsoChartTitle::PutPosition ( enum XlChartElementPosition pval ) {
    HRESULT _hr = put_Position(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2371)
inline Office::IMsoChartFormatPtr Office::IMsoChartTitle::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2372)
inline double Office::IMsoChartTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2373)
inline IDispatchPtr Office::IMsoChartTitle::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2374)
inline long Office::IMsoChartTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2375)
inline double Office::IMsoChartTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2376)
inline void Office::IMsoChartTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2377)
inline _bstr_t Office::IMsoChartTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2378)
inline void Office::IMsoChartTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2379)
inline _bstr_t Office::IMsoChartTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2380)
inline void Office::IMsoChartTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2381)
inline _bstr_t Office::IMsoChartTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2382)
inline void Office::IMsoChartTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2383)
inline _bstr_t Office::IMsoChartTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMsoTickLabels wrapper method implementations
//

#pragma implementation_key(2384)
inline IDispatchPtr Office::IMsoTickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2385)
inline _variant_t Office::IMsoTickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2386)
inline Office::ChartFontPtr Office::IMsoTickLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

#pragma implementation_key(2387)
inline _bstr_t Office::IMsoTickLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2388)
inline _bstr_t Office::IMsoTickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2389)
inline void Office::IMsoTickLabels::PutNumberFormat ( _bstr_t pval ) {
    HRESULT _hr = put_NumberFormat(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2390)
inline VARIANT_BOOL Office::IMsoTickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2391)
inline void Office::IMsoTickLabels::PutNumberFormatLinked ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_NumberFormatLinked(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2392)
inline _variant_t Office::IMsoTickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2393)
inline void Office::IMsoTickLabels::PutNumberFormatLocal ( const _variant_t & pval ) {
    HRESULT _hr = put_NumberFormatLocal(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2394)
inline enum Office::XlTickLabelOrientation Office::IMsoTickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2395)
inline void Office::IMsoTickLabels::PutOrientation ( enum XlTickLabelOrientation pval ) {
    HRESULT _hr = put_Orientation(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2396)
inline _variant_t Office::IMsoTickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2397)
inline int Office::IMsoTickLabels::GetReadingOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline void Office::IMsoTickLabels::PutReadingOrder ( int pval ) {
    HRESULT _hr = put_ReadingOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2399)
inline _variant_t Office::IMsoTickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2400)
inline void Office::IMsoTickLabels::PutAutoScaleFont ( const _variant_t & pval ) {
    HRESULT _hr = put_AutoScaleFont(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2401)
inline int Office::IMsoTickLabels::GetDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline int Office::IMsoTickLabels::GetOffset ( ) {
    int _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2403)
inline void Office::IMsoTickLabels::PutOffset ( int pval ) {
    HRESULT _hr = put_Offset(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2404)
inline int Office::IMsoTickLabels::GetAlignment ( ) {
    int _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2405)
inline void Office::IMsoTickLabels::PutAlignment ( int pval ) {
    HRESULT _hr = put_Alignment(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2406)
inline VARIANT_BOOL Office::IMsoTickLabels::GetMultiLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2407)
inline void Office::IMsoTickLabels::PutMultiLevel ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MultiLevel(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2408)
inline Office::IMsoChartFormatPtr Office::IMsoTickLabels::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2409)
inline IDispatchPtr Office::IMsoTickLabels::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2410)
inline long Office::IMsoTickLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoAxis wrapper method implementations
//

#pragma implementation_key(2411)
inline VARIANT_BOOL Office::IMsoAxis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2412)
inline void Office::IMsoAxis::PutAxisBetweenCategories ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_AxisBetweenCategories(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2413)
inline enum Office::XlAxisGroup Office::IMsoAxis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2414)
inline Office::IMsoAxisTitlePtr Office::IMsoAxis::GetAxisTitle ( ) {
    struct IMsoAxisTitle * _result = 0;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisTitlePtr(_result, false);
}

#pragma implementation_key(2415)
inline _variant_t Office::IMsoAxis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2416)
inline void Office::IMsoAxis::PutCategoryNames ( const _variant_t & pval ) {
    HRESULT _hr = put_CategoryNames(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2417)
inline enum Office::XlAxisCrosses Office::IMsoAxis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2418)
inline void Office::IMsoAxis::PutCrosses ( enum XlAxisCrosses pval ) {
    HRESULT _hr = put_Crosses(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2419)
inline double Office::IMsoAxis::GetCrossesAt ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2420)
inline void Office::IMsoAxis::PutCrossesAt ( double pval ) {
    HRESULT _hr = put_CrossesAt(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2421)
inline _variant_t Office::IMsoAxis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2422)
inline VARIANT_BOOL Office::IMsoAxis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2423)
inline void Office::IMsoAxis::PutHasMajorGridlines ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasMajorGridlines(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2424)
inline VARIANT_BOOL Office::IMsoAxis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2425)
inline void Office::IMsoAxis::PutHasMinorGridlines ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasMinorGridlines(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2426)
inline VARIANT_BOOL Office::IMsoAxis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline void Office::IMsoAxis::PutHasTitle ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasTitle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2428)
inline Office::GridLinesPtr Office::IMsoAxis::GetMajorGridlines ( ) {
    struct GridLines * _result = 0;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridLinesPtr(_result, false);
}

#pragma implementation_key(2429)
inline enum Office::XlTickMark Office::IMsoAxis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2430)
inline void Office::IMsoAxis::PutMajorTickMark ( enum XlTickMark pval ) {
    HRESULT _hr = put_MajorTickMark(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2431)
inline double Office::IMsoAxis::GetMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2432)
inline void Office::IMsoAxis::PutMajorUnit ( double pval ) {
    HRESULT _hr = put_MajorUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2433)
inline double Office::IMsoAxis::GetLogBase ( ) {
    double _result = 0;
    HRESULT _hr = get_LogBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2434)
inline void Office::IMsoAxis::PutLogBase ( double pval ) {
    HRESULT _hr = put_LogBase(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2435)
inline VARIANT_BOOL Office::IMsoAxis::GetTickLabelSpacingIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickLabelSpacingIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2436)
inline void Office::IMsoAxis::PutTickLabelSpacingIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_TickLabelSpacingIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2437)
inline VARIANT_BOOL Office::IMsoAxis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2438)
inline void Office::IMsoAxis::PutMajorUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MajorUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2439)
inline double Office::IMsoAxis::GetMaximumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2440)
inline void Office::IMsoAxis::PutMaximumScale ( double pval ) {
    HRESULT _hr = put_MaximumScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2441)
inline VARIANT_BOOL Office::IMsoAxis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2442)
inline void Office::IMsoAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MaximumScaleIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2443)
inline double Office::IMsoAxis::GetMinimumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2444)
inline void Office::IMsoAxis::PutMinimumScale ( double pval ) {
    HRESULT _hr = put_MinimumScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2445)
inline VARIANT_BOOL Office::IMsoAxis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2446)
inline void Office::IMsoAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MinimumScaleIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2447)
inline Office::GridLinesPtr Office::IMsoAxis::GetMinorGridlines ( ) {
    struct GridLines * _result = 0;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridLinesPtr(_result, false);
}

#pragma implementation_key(2448)
inline enum Office::XlTickMark Office::IMsoAxis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2449)
inline void Office::IMsoAxis::PutMinorTickMark ( enum XlTickMark pval ) {
    HRESULT _hr = put_MinorTickMark(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline double Office::IMsoAxis::GetMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2451)
inline void Office::IMsoAxis::PutMinorUnit ( double pval ) {
    HRESULT _hr = put_MinorUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline VARIANT_BOOL Office::IMsoAxis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2453)
inline void Office::IMsoAxis::PutMinorUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MinorUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2454)
inline VARIANT_BOOL Office::IMsoAxis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2455)
inline void Office::IMsoAxis::PutReversePlotOrder ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_ReversePlotOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline enum Office::XlScaleType Office::IMsoAxis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline void Office::IMsoAxis::PutScaleType ( enum XlScaleType pval ) {
    HRESULT _hr = put_ScaleType(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2458)
inline _variant_t Office::IMsoAxis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2459)
inline enum Office::XlTickLabelPosition Office::IMsoAxis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2460)
inline void Office::IMsoAxis::PutTickLabelPosition ( enum XlTickLabelPosition pval ) {
    HRESULT _hr = put_TickLabelPosition(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2461)
inline Office::IMsoTickLabelsPtr Office::IMsoAxis::GetTickLabels ( ) {
    struct IMsoTickLabels * _result = 0;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTickLabelsPtr(_result, false);
}

#pragma implementation_key(2462)
inline int Office::IMsoAxis::GetTickLabelSpacing ( ) {
    int _result = 0;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2463)
inline void Office::IMsoAxis::PutTickLabelSpacing ( int pval ) {
    HRESULT _hr = put_TickLabelSpacing(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2464)
inline int Office::IMsoAxis::GetTickMarkSpacing ( ) {
    int _result = 0;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2465)
inline void Office::IMsoAxis::PutTickMarkSpacing ( int pval ) {
    HRESULT _hr = put_TickMarkSpacing(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2466)
inline enum Office::XlAxisType Office::IMsoAxis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2467)
inline void Office::IMsoAxis::PutType ( enum XlAxisType pval ) {
    HRESULT _hr = put_Type(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2468)
inline enum Office::XlTimeUnit Office::IMsoAxis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2469)
inline void Office::IMsoAxis::PutBaseUnit ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_BaseUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2470)
inline VARIANT_BOOL Office::IMsoAxis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2471)
inline void Office::IMsoAxis::PutBaseUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BaseUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2472)
inline enum Office::XlTimeUnit Office::IMsoAxis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2473)
inline void Office::IMsoAxis::PutMajorUnitScale ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_MajorUnitScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2474)
inline enum Office::XlTimeUnit Office::IMsoAxis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2475)
inline void Office::IMsoAxis::PutMinorUnitScale ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_MinorUnitScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2476)
inline enum Office::XlCategoryType Office::IMsoAxis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2477)
inline void Office::IMsoAxis::PutCategoryType ( enum XlCategoryType pval ) {
    HRESULT _hr = put_CategoryType(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2478)
inline double Office::IMsoAxis::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2479)
inline double Office::IMsoAxis::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2480)
inline double Office::IMsoAxis::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2481)
inline double Office::IMsoAxis::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2482)
inline enum Office::XlDisplayUnit Office::IMsoAxis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2483)
inline void Office::IMsoAxis::PutDisplayUnit ( enum XlDisplayUnit pval ) {
    HRESULT _hr = put_DisplayUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2484)
inline double Office::IMsoAxis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2485)
inline void Office::IMsoAxis::PutDisplayUnitCustom ( double pval ) {
    HRESULT _hr = put_DisplayUnitCustom(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2486)
inline VARIANT_BOOL Office::IMsoAxis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2487)
inline void Office::IMsoAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasDisplayUnitLabel(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2488)
inline Office::IMsoDisplayUnitLabelPtr Office::IMsoAxis::GetDisplayUnitLabel ( ) {
    struct IMsoDisplayUnitLabel * _result = 0;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDisplayUnitLabelPtr(_result, false);
}

#pragma implementation_key(2489)
inline Office::IMsoBorderPtr Office::IMsoAxis::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2490)
inline _bstr_t Office::IMsoAxis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2491)
inline Office::IMsoChartFormatPtr Office::IMsoAxis::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2492)
inline IDispatchPtr Office::IMsoAxis::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2493)
inline long Office::IMsoAxis::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2494)
inline IDispatchPtr Office::IMsoAxis::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Axes wrapper method implementations
//

#pragma implementation_key(2495)
inline long Office::Axes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2496)
inline Office::IMsoAxisPtr Office::Axes::GetItem ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct IMsoAxis * _result = 0;
    HRESULT _hr = get_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisPtr(_result, false);
}

#pragma implementation_key(2497)
inline IUnknownPtr Office::Axes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2498)
inline IDispatchPtr Office::Axes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2499)
inline long Office::Axes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline Office::IMsoAxisPtr Office::Axes::Get_Default ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct IMsoAxis * _result = 0;
    HRESULT _hr = get__Default(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisPtr(_result, false);
}

#pragma implementation_key(2501)
inline IDispatchPtr Office::Axes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoDropLines wrapper method implementations
//

#pragma implementation_key(2502)
inline _bstr_t Office::IMsoDropLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2503)
inline HRESULT Office::IMsoDropLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2504)
inline IDispatchPtr Office::IMsoDropLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2505)
inline Office::IMsoBorderPtr Office::IMsoDropLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2506)
inline HRESULT Office::IMsoDropLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2507)
inline Office::IMsoChartFormatPtr Office::IMsoDropLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2508)
inline IDispatchPtr Office::IMsoDropLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2509)
inline long Office::IMsoDropLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoHiLoLines wrapper method implementations
//

#pragma implementation_key(2510)
inline IDispatchPtr Office::IMsoHiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2511)
inline _bstr_t Office::IMsoHiLoLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2512)
inline HRESULT Office::IMsoHiLoLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2513)
inline Office::IMsoBorderPtr Office::IMsoHiLoLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

#pragma implementation_key(2514)
inline HRESULT Office::IMsoHiLoLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2515)
inline Office::IMsoChartFormatPtr Office::IMsoHiLoLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(2516)
inline IDispatchPtr Office::IMsoHiLoLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2517)
inline long Office::IMsoHiLoLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartGroup wrapper method implementations
//

#pragma implementation_key(2518)
inline void Office::IMsoChartGroup::PutAxisGroup ( int piGroup ) {
    HRESULT _hr = put_AxisGroup(piGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2519)
inline int Office::IMsoChartGroup::GetAxisGroup ( ) {
    int _result = 0;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2520)
inline void Office::IMsoChartGroup::PutDoughnutHoleSize ( int pDoughnutHoleSize ) {
    HRESULT _hr = put_DoughnutHoleSize(pDoughnutHoleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2521)
inline int Office::IMsoChartGroup::GetDoughnutHoleSize ( ) {
    int _result = 0;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2522)
inline Office::IMsoDownBarsPtr Office::IMsoChartGroup::GetDownBars ( ) {
    struct IMsoDownBars * _result = 0;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDownBarsPtr(_result, false);
}

#pragma implementation_key(2523)
inline Office::IMsoDropLinesPtr Office::IMsoChartGroup::GetDropLines ( ) {
    struct IMsoDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDropLinesPtr(_result, false);
}

#pragma implementation_key(2524)
inline void Office::IMsoChartGroup::PutFirstSliceAngle ( int pFirstSliceAngle ) {
    HRESULT _hr = put_FirstSliceAngle(pFirstSliceAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2525)
inline int Office::IMsoChartGroup::GetFirstSliceAngle ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2526)
inline void Office::IMsoChartGroup::PutGapWidth ( int pGapWidth ) {
    HRESULT _hr = put_GapWidth(pGapWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2527)
inline int Office::IMsoChartGroup::GetGapWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2528)
inline void Office::IMsoChartGroup::PutHasDropLines ( VARIANT_BOOL pfHasDropLines ) {
    HRESULT _hr = put_HasDropLines(pfHasDropLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2529)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2530)
inline void Office::IMsoChartGroup::PutHasHiLoLines ( VARIANT_BOOL pfHasHiLoLines ) {
    HRESULT _hr = put_HasHiLoLines(pfHasHiLoLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2531)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2532)
inline void Office::IMsoChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL pfHasRadarAxisLabels ) {
    HRESULT _hr = put_HasRadarAxisLabels(pfHasRadarAxisLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2533)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2534)
inline void Office::IMsoChartGroup::PutHasSeriesLines ( VARIANT_BOOL pfHasSeriesLines ) {
    HRESULT _hr = put_HasSeriesLines(pfHasSeriesLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2535)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2536)
inline void Office::IMsoChartGroup::PutHasUpDownBars ( VARIANT_BOOL pfHasUpDownBars ) {
    HRESULT _hr = put_HasUpDownBars(pfHasUpDownBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2537)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2538)
inline Office::IMsoHiLoLinesPtr Office::IMsoChartGroup::GetHiLoLines ( ) {
    struct IMsoHiLoLines * _result = 0;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoHiLoLinesPtr(_result, false);
}

#pragma implementation_key(2539)
inline int Office::IMsoChartGroup::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2540)
inline void Office::IMsoChartGroup::PutOverlap ( int pOverlap ) {
    HRESULT _hr = put_Overlap(pOverlap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2541)
inline int Office::IMsoChartGroup::GetOverlap ( ) {
    int _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2542)
inline IDispatchPtr Office::IMsoChartGroup::GetRadarAxisLabels ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2543)
inline IDispatchPtr Office::IMsoChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2544)
inline Office::IMsoSeriesLinesPtr Office::IMsoChartGroup::GetSeriesLines ( ) {
    struct IMsoSeriesLines * _result = 0;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesLinesPtr(_result, false);
}

#pragma implementation_key(2545)
inline void Office::IMsoChartGroup::PutSubType ( int pSubType ) {
    HRESULT _hr = put_SubType(pSubType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2546)
inline int Office::IMsoChartGroup::GetSubType ( ) {
    int _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2547)
inline void Office::IMsoChartGroup::PutType ( int ptype ) {
    HRESULT _hr = put_Type(ptype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2548)
inline int Office::IMsoChartGroup::GetType ( ) {
    int _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2549)
inline Office::IMsoUpBarsPtr Office::IMsoChartGroup::GetUpBars ( ) {
    struct IMsoUpBars * _result = 0;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoUpBarsPtr(_result, false);
}

#pragma implementation_key(2550)
inline void Office::IMsoChartGroup::PutVaryByCategories ( VARIANT_BOOL pfVaryByCategories ) {
    HRESULT _hr = put_VaryByCategories(pfVaryByCategories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2551)
inline VARIANT_BOOL Office::IMsoChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2552)
inline enum Office::XlSizeRepresents Office::IMsoChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2553)
inline void Office::IMsoChartGroup::PutSizeRepresents ( enum XlSizeRepresents pXlSizeRepresents ) {
    HRESULT _hr = put_SizeRepresents(pXlSizeRepresents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2554)
inline void Office::IMsoChartGroup::PutBubbleScale ( int pbubblescale ) {
    HRESULT _hr = put_BubbleScale(pbubblescale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2555)
inline int Office::IMsoChartGroup::GetBubbleScale ( ) {
    int _result = 0;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2556)
inline void Office::IMsoChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL pfShowNegativeBubbles ) {
    HRESULT _hr = put_ShowNegativeBubbles(pfShowNegativeBubbles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2557)
inline VARIANT_BOOL Office::IMsoChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2558)
inline void Office::IMsoChartGroup::PutSplitType ( enum XlChartSplitType pChartSplitType ) {
    HRESULT _hr = put_SplitType(pChartSplitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2559)
inline enum Office::XlChartSplitType Office::IMsoChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2560)
inline _variant_t Office::IMsoChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2561)
inline void Office::IMsoChartGroup::PutSplitValue ( const _variant_t & pSplitValue ) {
    HRESULT _hr = put_SplitValue(pSplitValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2562)
inline int Office::IMsoChartGroup::GetSecondPlotSize ( ) {
    int _result = 0;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2563)
inline void Office::IMsoChartGroup::PutSecondPlotSize ( int pSecondPlotSize ) {
    HRESULT _hr = put_SecondPlotSize(pSecondPlotSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2564)
inline VARIANT_BOOL Office::IMsoChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2565)
inline void Office::IMsoChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2566)
inline IDispatchPtr Office::IMsoChartGroup::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2567)
inline long Office::IMsoChartGroup::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2568)
inline IDispatchPtr Office::IMsoChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartGroups wrapper method implementations
//

#pragma implementation_key(2569)
inline IDispatchPtr Office::ChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2570)
inline long Office::ChartGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2571)
inline Office::IMsoChartGroupPtr Office::ChartGroups::Item ( const _variant_t & Index ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(2572)
inline IUnknownPtr Office::ChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2573)
inline IDispatchPtr Office::ChartGroups::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2574)
inline long Office::ChartGroups::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ContactCard wrapper method implementations
//

#pragma implementation_key(2575)
inline HRESULT Office::ContactCard::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2576)
inline HRESULT Office::ContactCard::Show ( enum MsoContactCardStyle CardStyle, long RectangleLeft, long RectangleRight, long RectangleTop, long RectangleBottom, long HorizontalPosition, VARIANT_BOOL ShowWithDelay ) {
    HRESULT _hr = raw_Show(CardStyle, RectangleLeft, RectangleRight, RectangleTop, RectangleBottom, HorizontalPosition, ShowWithDelay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _CommandBars wrapper method implementations
//

#pragma implementation_key(2577)
inline Office::CommandBarControlPtr Office::_CommandBars::GetActionControl ( ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = get_ActionControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2578)
inline Office::CommandBarPtr Office::_CommandBars::GetActiveMenuBar ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2579)
inline Office::CommandBarPtr Office::_CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = raw_Add(Name, Position, MenuBar, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2580)
inline int Office::_CommandBars::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2581)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2582)
inline void Office::_CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips ) {
    HRESULT _hr = put_DisplayTooltips(pvarfDisplayTooltips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2583)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2584)
inline void Office::_CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pvarfDisplayKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2585)
inline Office::CommandBarControlPtr Office::_CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2586)
inline Office::CommandBarPtr Office::_CommandBars::GetItem ( const _variant_t & Index ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2587)
inline VARIANT_BOOL Office::_CommandBars::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2588)
inline void Office::_CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons ) {
    HRESULT _hr = put_LargeButtons(pvarfLargeButtons);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2589)
inline enum Office::MsoMenuAnimation Office::_CommandBars::GetMenuAnimationStyle ( ) {
    enum MsoMenuAnimation _result;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2590)
inline void Office::_CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma ) {
    HRESULT _hr = put_MenuAnimationStyle(pma);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2591)
inline IUnknownPtr Office::_CommandBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2592)
inline IDispatchPtr Office::_CommandBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2593)
inline HRESULT Office::_CommandBars::ReleaseFocus ( ) {
    HRESULT _hr = raw_ReleaseFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2594)
inline int Office::_CommandBars::GetIdsString ( int ids, BSTR * pbstrName ) {
    int _result = 0;
    HRESULT _hr = get_IdsString(ids, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2595)
inline int Office::_CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName ) {
    int _result = 0;
    HRESULT _hr = get_TmcGetName(tmc, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2596)
inline VARIANT_BOOL Office::_CommandBars::GetAdaptiveMenus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdaptiveMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2597)
inline void Office::_CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus ) {
    HRESULT _hr = put_AdaptiveMenus(pvarfAdaptiveMenus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2598)
inline Office::CommandBarControlsPtr Office::_CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = raw_FindControls(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(2599)
inline Office::CommandBarPtr Office::_CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = raw_AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2600)
inline VARIANT_BOOL Office::_CommandBars::GetDisplayFonts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2601)
inline void Office::_CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts ) {
    HRESULT _hr = put_DisplayFonts(pvarfDisplayFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2602)
inline VARIANT_BOOL Office::_CommandBars::GetDisableCustomize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableCustomize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2603)
inline void Office::_CommandBars::PutDisableCustomize ( VARIANT_BOOL pvarfDisableCustomize ) {
    HRESULT _hr = put_DisableCustomize(pvarfDisableCustomize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2604)
inline VARIANT_BOOL Office::_CommandBars::GetDisableAskAQuestionDropdown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableAskAQuestionDropdown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2605)
inline void Office::_CommandBars::PutDisableAskAQuestionDropdown ( VARIANT_BOOL pvarfDisableAskAQuestionDropdown ) {
    HRESULT _hr = put_DisableAskAQuestionDropdown(pvarfDisableAskAQuestionDropdown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2606)
inline HRESULT Office::_CommandBars::ExecuteMso ( _bstr_t idMso ) {
    HRESULT _hr = raw_ExecuteMso(idMso);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2607)
inline VARIANT_BOOL Office::_CommandBars::GetEnabledMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnabledMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2608)
inline VARIANT_BOOL Office::_CommandBars::GetVisibleMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVisibleMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline VARIANT_BOOL Office::_CommandBars::GetPressedMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPressedMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2610)
inline _bstr_t Office::_CommandBars::GetLabelMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLabelMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2611)
inline _bstr_t Office::_CommandBars::GetScreentipMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetScreentipMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2612)
inline _bstr_t Office::_CommandBars::GetSupertipMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSupertipMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2613)
inline IPictureDisp * Office::_CommandBars::GetImageMso ( _bstr_t idMso, int Width, int Height ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = raw_GetImageMso(idMso, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2614)
inline HRESULT Office::_CommandBars::CommitRenderingTransaction ( long hwnd ) {
    HRESULT _hr = raw_CommitRenderingTransaction(hwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CommandBar wrapper method implementations
//

#pragma implementation_key(2615)
inline VARIANT_BOOL Office::CommandBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2616)
inline _bstr_t Office::CommandBar::GetContext ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2617)
inline void Office::CommandBar::PutContext ( _bstr_t pbstrContext ) {
    HRESULT _hr = put_Context(pbstrContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2618)
inline Office::CommandBarControlsPtr Office::CommandBar::GetControls ( ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(2619)
inline HRESULT Office::CommandBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2620)
inline VARIANT_BOOL Office::CommandBar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2621)
inline void Office::CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2622)
inline Office::CommandBarControlPtr Office::CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, Recursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2623)
inline int Office::CommandBar::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2624)
inline void Office::CommandBar::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2625)
inline int Office::CommandBar::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2626)
inline long Office::CommandBar::GetInstanceId ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2627)
inline int Office::CommandBar::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2628)
inline void Office::CommandBar::PutLeft ( int pxpLeft ) {
    HRESULT _hr = put_Left(pxpLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2629)
inline _bstr_t Office::CommandBar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2630)
inline void Office::CommandBar::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2631)
inline _bstr_t Office::CommandBar::GetNameLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2632)
inline void Office::CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal ) {
    HRESULT _hr = put_NameLocal(pbstrNameLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2633)
inline IDispatchPtr Office::CommandBar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2634)
inline enum Office::MsoBarPosition Office::CommandBar::GetPosition ( ) {
    enum MsoBarPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2635)
inline void Office::CommandBar::PutPosition ( enum MsoBarPosition ppos ) {
    HRESULT _hr = put_Position(ppos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2636)
inline int Office::CommandBar::GetRowIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2637)
inline void Office::CommandBar::PutRowIndex ( int piRow ) {
    HRESULT _hr = put_RowIndex(piRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2638)
inline enum Office::MsoBarProtection Office::CommandBar::GetProtection ( ) {
    enum MsoBarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2639)
inline void Office::CommandBar::PutProtection ( enum MsoBarProtection pprot ) {
    HRESULT _hr = put_Protection(pprot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2640)
inline HRESULT Office::CommandBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2641)
inline HRESULT Office::CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y ) {
    HRESULT _hr = raw_ShowPopup(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2642)
inline int Office::CommandBar::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2643)
inline void Office::CommandBar::PutTop ( int pypTop ) {
    HRESULT _hr = put_Top(pypTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2644)
inline enum Office::MsoBarType Office::CommandBar::GetType ( ) {
    enum MsoBarType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2645)
inline VARIANT_BOOL Office::CommandBar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2646)
inline void Office::CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2647)
inline int Office::CommandBar::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2648)
inline void Office::CommandBar::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2649)
inline VARIANT_BOOL Office::CommandBar::GetAdaptiveMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdaptiveMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2650)
inline void Office::CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu ) {
    HRESULT _hr = put_AdaptiveMenu(pvarfAdaptiveMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2651)
inline int Office::CommandBar::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2652)
inline _variant_t Office::CommandBar::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface CommandBarControl wrapper method implementations
//

#pragma implementation_key(2653)
inline VARIANT_BOOL Office::CommandBarControl::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2654)
inline void Office::CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup ) {
    HRESULT _hr = put_BeginGroup(pvarfBeginGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2655)
inline VARIANT_BOOL Office::CommandBarControl::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2656)
inline _bstr_t Office::CommandBarControl::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2657)
inline void Office::CommandBarControl::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2658)
inline IDispatchPtr Office::CommandBarControl::GetControl ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2659)
inline Office::CommandBarControlPtr Office::CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Copy(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2660)
inline HRESULT Office::CommandBarControl::Delete ( const _variant_t & Temporary ) {
    HRESULT _hr = raw_Delete(Temporary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2661)
inline _bstr_t Office::CommandBarControl::GetDescriptionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DescriptionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2662)
inline void Office::CommandBarControl::PutDescriptionText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_DescriptionText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2663)
inline VARIANT_BOOL Office::CommandBarControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2664)
inline void Office::CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2665)
inline HRESULT Office::CommandBarControl::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2666)
inline int Office::CommandBarControl::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2667)
inline void Office::CommandBarControl::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2668)
inline int Office::CommandBarControl::GetHelpContextId ( ) {
    int _result = 0;
    HRESULT _hr = get_HelpContextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2669)
inline void Office::CommandBarControl::PutHelpContextId ( int pid ) {
    HRESULT _hr = put_HelpContextId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2670)
inline _bstr_t Office::CommandBarControl::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2671)
inline void Office::CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename ) {
    HRESULT _hr = put_HelpFile(pbstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2672)
inline int Office::CommandBarControl::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2673)
inline int Office::CommandBarControl::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2674)
inline long Office::CommandBarControl::GetInstanceId ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline Office::CommandBarControlPtr Office::CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Move(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2676)
inline int Office::CommandBarControl::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline enum Office::MsoControlOLEUsage Office::CommandBarControl::GetOLEUsage ( ) {
    enum MsoControlOLEUsage _result;
    HRESULT _hr = get_OLEUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2678)
inline void Office::CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou ) {
    HRESULT _hr = put_OLEUsage(pcou);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2679)
inline _bstr_t Office::CommandBarControl::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2680)
inline void Office::CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction ) {
    HRESULT _hr = put_OnAction(pbstrOnAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2681)
inline Office::CommandBarPtr Office::CommandBarControl::GetParent ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2682)
inline _bstr_t Office::CommandBarControl::GetParameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2683)
inline void Office::CommandBarControl::PutParameter ( _bstr_t pbstrParam ) {
    HRESULT _hr = put_Parameter(pbstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2684)
inline int Office::CommandBarControl::GetPriority ( ) {
    int _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline void Office::CommandBarControl::PutPriority ( int pnPri ) {
    HRESULT _hr = put_Priority(pnPri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline HRESULT Office::CommandBarControl::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2687)
inline HRESULT Office::CommandBarControl::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2688)
inline _bstr_t Office::CommandBarControl::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2689)
inline void Office::CommandBarControl::PutTag ( _bstr_t pbstrTag ) {
    HRESULT _hr = put_Tag(pbstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline _bstr_t Office::CommandBarControl::GetTooltipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TooltipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2691)
inline void Office::CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip ) {
    HRESULT _hr = put_TooltipText(pbstrTooltip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2692)
inline int Office::CommandBarControl::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2693)
inline enum Office::MsoControlType Office::CommandBarControl::GetType ( ) {
    enum MsoControlType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2694)
inline VARIANT_BOOL Office::CommandBarControl::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2695)
inline void Office::CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2696)
inline int Office::CommandBarControl::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2697)
inline void Office::CommandBarControl::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2698)
inline VARIANT_BOOL Office::CommandBarControl::GetIsPriorityDropped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPriorityDropped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2699)
inline HRESULT Office::CommandBarControl::Reserved1 ( ) {
    HRESULT _hr = raw_Reserved1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2700)
inline HRESULT Office::CommandBarControl::Reserved2 ( ) {
    HRESULT _hr = raw_Reserved2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2701)
inline HRESULT Office::CommandBarControl::Reserved3 ( ) {
    HRESULT _hr = raw_Reserved3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2702)
inline HRESULT Office::CommandBarControl::Reserved4 ( ) {
    HRESULT _hr = raw_Reserved4();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2703)
inline HRESULT Office::CommandBarControl::Reserved5 ( ) {
    HRESULT _hr = raw_Reserved5();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2704)
inline HRESULT Office::CommandBarControl::Reserved6 ( ) {
    HRESULT _hr = raw_Reserved6();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2705)
inline HRESULT Office::CommandBarControl::Reserved7 ( ) {
    HRESULT _hr = raw_Reserved7();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CommandBarControls wrapper method implementations
//

#pragma implementation_key(2706)
inline Office::CommandBarControlPtr Office::CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Add(Type, Id, Parameter, Before, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2707)
inline int Office::CommandBarControls::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2708)
inline Office::CommandBarControlPtr Office::CommandBarControls::GetItem ( const _variant_t & Index ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

#pragma implementation_key(2709)
inline IUnknownPtr Office::CommandBarControls::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2710)
inline Office::CommandBarPtr Office::CommandBarControls::GetParent ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

//
// interface _CommandBarButton wrapper method implementations
//

#pragma implementation_key(2711)
inline VARIANT_BOOL Office::_CommandBarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2712)
inline void Office::_CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn ) {
    HRESULT _hr = put_BuiltInFace(pvarfBuiltIn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2713)
inline HRESULT Office::_CommandBarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2714)
inline int Office::_CommandBarButton::GetFaceId ( ) {
    int _result = 0;
    HRESULT _hr = get_FaceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2715)
inline void Office::_CommandBarButton::PutFaceId ( int pid ) {
    HRESULT _hr = put_FaceId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline HRESULT Office::_CommandBarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2717)
inline _bstr_t Office::_CommandBarButton::GetShortcutText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortcutText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2718)
inline void Office::_CommandBarButton::PutShortcutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_ShortcutText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2719)
inline enum Office::MsoButtonState Office::_CommandBarButton::GetState ( ) {
    enum MsoButtonState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2720)
inline void Office::_CommandBarButton::PutState ( enum MsoButtonState pstate ) {
    HRESULT _hr = put_State(pstate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2721)
inline enum Office::MsoButtonStyle Office::_CommandBarButton::GetStyle ( ) {
    enum MsoButtonStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2722)
inline void Office::_CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2723)
inline enum Office::MsoCommandBarButtonHyperlinkType Office::_CommandBarButton::GetHyperlinkType ( ) {
    enum MsoCommandBarButtonHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2724)
inline void Office::_CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType ) {
    HRESULT _hr = put_HyperlinkType(phlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2725)
inline IPictureDisp * Office::_CommandBarButton::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2726)
inline void Office::_CommandBarButton::PutPicture ( IPictureDisp * ppdispPicture ) {
    HRESULT _hr = put_Picture(ppdispPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2727)
inline IPictureDisp * Office::_CommandBarButton::GetMask ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Mask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2728)
inline void Office::_CommandBarButton::PutMask ( IPictureDisp * ppipictdispMask ) {
    HRESULT _hr = put_Mask(ppipictdispMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2729)
inline _variant_t Office::_CommandBarButton::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface CommandBarPopup wrapper method implementations
//

#pragma implementation_key(2730)
inline Office::CommandBarPtr Office::CommandBarPopup::GetCommandBar ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_CommandBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

#pragma implementation_key(2731)
inline Office::CommandBarControlsPtr Office::CommandBarPopup::GetControls ( ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

#pragma implementation_key(2732)
inline enum Office::MsoOLEMenuGroup Office::CommandBarPopup::GetOLEMenuGroup ( ) {
    enum MsoOLEMenuGroup _result;
    HRESULT _hr = get_OLEMenuGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2733)
inline void Office::CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg ) {
    HRESULT _hr = put_OLEMenuGroup(pomg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2734)
inline _variant_t Office::CommandBarPopup::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface _CommandBarComboBox wrapper method implementations
//

#pragma implementation_key(2735)
inline HRESULT Office::_CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2736)
inline HRESULT Office::_CommandBarComboBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2737)
inline int Office::_CommandBarComboBox::GetDropDownLines ( ) {
    int _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2738)
inline void Office::_CommandBarComboBox::PutDropDownLines ( int pcLines ) {
    HRESULT _hr = put_DropDownLines(pcLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2739)
inline int Office::_CommandBarComboBox::GetDropDownWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_DropDownWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline void Office::_CommandBarComboBox::PutDropDownWidth ( int pdx ) {
    HRESULT _hr = put_DropDownWidth(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2741)
inline _bstr_t Office::_CommandBarComboBox::GetList ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2742)
inline void Office::_CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem ) {
    HRESULT _hr = put_List(Index, pbstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2743)
inline int Office::_CommandBarComboBox::GetListCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2744)
inline int Office::_CommandBarComboBox::GetListHeaderCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ListHeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2745)
inline void Office::_CommandBarComboBox::PutListHeaderCount ( int pcItems ) {
    HRESULT _hr = put_ListHeaderCount(pcItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2746)
inline int Office::_CommandBarComboBox::GetListIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2747)
inline void Office::_CommandBarComboBox::PutListIndex ( int pi ) {
    HRESULT _hr = put_ListIndex(pi);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2748)
inline HRESULT Office::_CommandBarComboBox::RemoveItem ( int Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2749)
inline enum Office::MsoComboStyle Office::_CommandBarComboBox::GetStyle ( ) {
    enum MsoComboStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline void Office::_CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2751)
inline _bstr_t Office::_CommandBarComboBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2752)
inline void Office::_CommandBarComboBox::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2753)
inline _variant_t Office::_CommandBarComboBox::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface _CommandBarActiveX wrapper method implementations
//

#pragma implementation_key(2754)
inline _bstr_t Office::_CommandBarActiveX::GetControlCLSID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2755)
inline void Office::_CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid ) {
    HRESULT _hr = put_ControlCLSID(pbstrClsid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2756)
inline IUnknownPtr Office::_CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_QueryControlInterface(bstrIid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2757)
inline HRESULT Office::_CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk ) {
    HRESULT _hr = raw_SetInnerObjectFactory(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2758)
inline HRESULT Office::_CommandBarActiveX::EnsureControl ( ) {
    HRESULT _hr = raw_EnsureControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2759)
inline void Office::_CommandBarActiveX::PutInitWith ( IUnknown * _arg1 ) {
    HRESULT _hr = put_InitWith(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2760)
inline _variant_t Office::_CommandBarActiveX::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(2761)
inline IDispatchPtr Office::ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2762)
inline HRESULT Office::ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2763)
inline HRESULT Office::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2764)
inline HRESULT Office::ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2765)
inline HRESULT Office::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2766)
inline enum Office::MsoTriState Office::ConnectorFormat::GetBeginConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2767)
inline Office::ShapePtr Office::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2768)
inline int Office::ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2769)
inline enum Office::MsoTriState Office::ConnectorFormat::GetEndConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2770)
inline Office::ShapePtr Office::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2771)
inline int Office::ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2772)
inline enum Office::MsoConnectorType Office::ConnectorFormat::GetType ( ) {
    enum MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2773)
inline void Office::ConnectorFormat::PutType ( enum MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(2774)
inline IDispatchPtr Office::FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2775)
inline HRESULT Office::FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2776)
inline Office::ShapePtr Office::FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(2777)
inline IDispatchPtr Office::GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2778)
inline int Office::GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2779)
inline Office::ShapePtr Office::GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2780)
inline IUnknownPtr Office::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2781)
inline Office::ShapeRangePtr Office::GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(2782)
inline IDispatchPtr Office::Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2783)
inline HRESULT Office::Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2784)
inline HRESULT Office::Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2785)
inline Office::ShapePtr Office::Shape::Duplicate ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2786)
inline HRESULT Office::Shape::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2787)
inline HRESULT Office::Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2788)
inline HRESULT Office::Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2789)
inline HRESULT Office::Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2790)
inline HRESULT Office::Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2791)
inline HRESULT Office::Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2792)
inline HRESULT Office::Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2793)
inline HRESULT Office::Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2794)
inline HRESULT Office::Shape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2795)
inline HRESULT Office::Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2796)
inline Office::ShapeRangePtr Office::Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2797)
inline HRESULT Office::Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2798)
inline Office::AdjustmentsPtr Office::Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(2799)
inline enum Office::MsoAutoShapeType Office::Shape::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2800)
inline void Office::Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2801)
inline enum Office::MsoBlackWhiteMode Office::Shape::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2802)
inline void Office::Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline Office::CalloutFormatPtr Office::Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(2804)
inline int Office::Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2805)
inline enum Office::MsoTriState Office::Shape::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2806)
inline Office::ConnectorFormatPtr Office::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(2807)
inline Office::FillFormatPtr Office::Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(2808)
inline Office::GroupShapesPtr Office::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(2809)
inline float Office::Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2810)
inline void Office::Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2811)
inline enum Office::MsoTriState Office::Shape::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2812)
inline float Office::Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2813)
inline void Office::Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2814)
inline Office::LineFormatPtr Office::Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(2815)
inline enum Office::MsoTriState Office::Shape::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2816)
inline void Office::Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2817)
inline _bstr_t Office::Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2818)
inline void Office::Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2819)
inline Office::ShapeNodesPtr Office::Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(2820)
inline float Office::Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void Office::Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline Office::PictureFormatPtr Office::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(2823)
inline Office::ShadowFormatPtr Office::Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(2824)
inline Office::TextEffectFormatPtr Office::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(2825)
inline Office::TextFramePtr Office::Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(2826)
inline Office::ThreeDFormatPtr Office::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(2827)
inline float Office::Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2828)
inline void Office::Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2829)
inline enum Office::MsoShapeType Office::Shape::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2830)
inline enum Office::MsoTriState Office::Shape::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline _variant_t Office::Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2832)
inline enum Office::MsoTriState Office::Shape::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void Office::Shape::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline float Office::Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2835)
inline void Office::Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2836)
inline int Office::Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2837)
inline Office::ScriptPtr Office::Shape::GetScript ( ) {
    struct Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(2838)
inline _bstr_t Office::Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2839)
inline void Office::Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2840)
inline enum Office::MsoTriState Office::Shape::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2841)
inline Office::IMsoDiagramPtr Office::Shape::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(2842)
inline enum Office::MsoTriState Office::Shape::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2843)
inline Office::DiagramNodePtr Office::Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(2844)
inline enum Office::MsoTriState Office::Shape::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2845)
inline Office::ShapePtr Office::Shape::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2846)
inline Office::CanvasShapesPtr Office::Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(2847)
inline int Office::Shape::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline HRESULT Office::Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2849)
inline HRESULT Office::Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2850)
inline HRESULT Office::Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2851)
inline HRESULT Office::Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2852)
inline void Office::Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2853)
inline Office::TextFrame2Ptr Office::Shape::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(2854)
inline HRESULT Office::Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2855)
inline HRESULT Office::Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2856)
inline enum Office::MsoTriState Office::Shape::GetHasChart ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2857)
inline Office::IMsoChartPtr Office::Shape::GetChart ( ) {
    struct IMsoChart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartPtr(_result, false);
}

#pragma implementation_key(2858)
inline enum Office::MsoShapeStyleIndex Office::Shape::GetShapeStyle ( ) {
    enum MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2859)
inline void Office::Shape::PutShapeStyle ( enum MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2860)
inline enum Office::MsoBackgroundStyleIndex Office::Shape::GetBackgroundStyle ( ) {
    enum MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2861)
inline void Office::Shape::PutBackgroundStyle ( enum MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2862)
inline Office::SoftEdgeFormatPtr Office::Shape::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(2863)
inline Office::GlowFormatPtr Office::Shape::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

#pragma implementation_key(2864)
inline Office::ReflectionFormatPtr Office::Shape::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(2865)
inline enum Office::MsoTriState Office::Shape::GetHasSmartArt ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2866)
inline Office::SmartArtPtr Office::Shape::GetSmartArt ( ) {
    struct SmartArt * _result = 0;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtPtr(_result, false);
}

#pragma implementation_key(2867)
inline HRESULT Office::Shape::ConvertTextToSmartArt ( struct SmartArtLayout * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2868)
inline _bstr_t Office::Shape::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2869)
inline void Office::Shape::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(2870)
inline IDispatchPtr Office::ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2871)
inline int Office::ShapeRange::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2872)
inline Office::ShapePtr Office::ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2873)
inline IUnknownPtr Office::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2874)
inline HRESULT Office::ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2875)
inline HRESULT Office::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2876)
inline HRESULT Office::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2877)
inline HRESULT Office::ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2878)
inline Office::ShapeRangePtr Office::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2879)
inline HRESULT Office::ShapeRange::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2880)
inline HRESULT Office::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2881)
inline HRESULT Office::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2882)
inline HRESULT Office::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2883)
inline Office::ShapePtr Office::ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2884)
inline HRESULT Office::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2885)
inline Office::ShapePtr Office::ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2886)
inline HRESULT Office::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2887)
inline HRESULT Office::ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2888)
inline HRESULT Office::ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2889)
inline HRESULT Office::ShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2890)
inline HRESULT Office::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2891)
inline Office::ShapeRangePtr Office::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2892)
inline HRESULT Office::ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2893)
inline Office::AdjustmentsPtr Office::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(2894)
inline enum Office::MsoAutoShapeType Office::ShapeRange::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2895)
inline void Office::ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2896)
inline enum Office::MsoBlackWhiteMode Office::ShapeRange::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2897)
inline void Office::ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2898)
inline Office::CalloutFormatPtr Office::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(2899)
inline int Office::ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2900)
inline enum Office::MsoTriState Office::ShapeRange::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2901)
inline Office::ConnectorFormatPtr Office::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(2902)
inline Office::FillFormatPtr Office::ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(2903)
inline Office::GroupShapesPtr Office::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(2904)
inline float Office::ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2905)
inline void Office::ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2906)
inline enum Office::MsoTriState Office::ShapeRange::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2907)
inline float Office::ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2908)
inline void Office::ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2909)
inline Office::LineFormatPtr Office::ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(2910)
inline enum Office::MsoTriState Office::ShapeRange::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2911)
inline void Office::ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2912)
inline _bstr_t Office::ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2913)
inline void Office::ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2914)
inline Office::ShapeNodesPtr Office::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(2915)
inline float Office::ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2916)
inline void Office::ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2917)
inline Office::PictureFormatPtr Office::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(2918)
inline Office::ShadowFormatPtr Office::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(2919)
inline Office::TextEffectFormatPtr Office::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(2920)
inline Office::TextFramePtr Office::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(2921)
inline Office::ThreeDFormatPtr Office::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(2922)
inline float Office::ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2923)
inline void Office::ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2924)
inline enum Office::MsoShapeType Office::ShapeRange::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2925)
inline enum Office::MsoTriState Office::ShapeRange::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2926)
inline _variant_t Office::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2927)
inline enum Office::MsoTriState Office::ShapeRange::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2928)
inline void Office::ShapeRange::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2929)
inline float Office::ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2930)
inline void Office::ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2931)
inline int Office::ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2932)
inline Office::ScriptPtr Office::ShapeRange::GetScript ( ) {
    struct Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

#pragma implementation_key(2933)
inline _bstr_t Office::ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2934)
inline void Office::ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2935)
inline enum Office::MsoTriState Office::ShapeRange::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2936)
inline Office::IMsoDiagramPtr Office::ShapeRange::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(2937)
inline enum Office::MsoTriState Office::ShapeRange::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2938)
inline Office::DiagramNodePtr Office::ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(2939)
inline enum Office::MsoTriState Office::ShapeRange::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2940)
inline Office::ShapePtr Office::ShapeRange::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2941)
inline Office::CanvasShapesPtr Office::ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

#pragma implementation_key(2942)
inline int Office::ShapeRange::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2943)
inline HRESULT Office::ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2944)
inline HRESULT Office::ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2945)
inline HRESULT Office::ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2946)
inline HRESULT Office::ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2947)
inline void Office::ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2948)
inline Office::TextFrame2Ptr Office::ShapeRange::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(2949)
inline HRESULT Office::ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2950)
inline HRESULT Office::ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2951)
inline enum Office::MsoTriState Office::ShapeRange::GetHasChart ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2952)
inline Office::IMsoChartPtr Office::ShapeRange::GetChart ( ) {
    struct IMsoChart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartPtr(_result, false);
}

#pragma implementation_key(2953)
inline enum Office::MsoShapeStyleIndex Office::ShapeRange::GetShapeStyle ( ) {
    enum MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2954)
inline void Office::ShapeRange::PutShapeStyle ( enum MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2955)
inline enum Office::MsoBackgroundStyleIndex Office::ShapeRange::GetBackgroundStyle ( ) {
    enum MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2956)
inline void Office::ShapeRange::PutBackgroundStyle ( enum MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2957)
inline Office::SoftEdgeFormatPtr Office::ShapeRange::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

#pragma implementation_key(2958)
inline Office::GlowFormatPtr Office::ShapeRange::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

#pragma implementation_key(2959)
inline Office::ReflectionFormatPtr Office::ShapeRange::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

#pragma implementation_key(2960)
inline _bstr_t Office::ShapeRange::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2961)
inline void Office::ShapeRange::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(2962)
inline IDispatchPtr Office::Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2963)
inline int Office::Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2964)
inline Office::ShapePtr Office::Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2965)
inline IUnknownPtr Office::Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2966)
inline Office::ShapePtr Office::Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2967)
inline Office::ShapePtr Office::Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2968)
inline Office::ShapePtr Office::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2969)
inline Office::ShapePtr Office::Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2970)
inline Office::ShapePtr Office::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2971)
inline Office::ShapePtr Office::Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2972)
inline Office::ShapePtr Office::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2973)
inline Office::ShapePtr Office::Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2974)
inline Office::ShapePtr Office::Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2975)
inline Office::ShapePtr Office::Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2976)
inline Office::FreeformBuilderPtr Office::Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(2977)
inline Office::ShapeRangePtr Office::Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(2978)
inline HRESULT Office::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2979)
inline Office::ShapePtr Office::Shapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2980)
inline Office::ShapePtr Office::Shapes::GetDefault ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2981)
inline Office::ShapePtr Office::Shapes::AddDiagram ( enum MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2982)
inline Office::ShapePtr Office::Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2983)
inline Office::ShapePtr Office::Shapes::AddChart ( enum XlChartType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2984)
inline Office::ShapePtr Office::Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2985)
inline Office::ShapePtr Office::Shapes::AddSmartArt ( struct SmartArtLayout * Layout, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddSmartArt(Layout, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

#pragma implementation_key(2986)
inline IDispatchPtr Office::CanvasShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2987)
inline int Office::CanvasShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2988)
inline Office::ShapePtr Office::CanvasShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2989)
inline IUnknownPtr Office::CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2990)
inline Office::ShapePtr Office::CanvasShapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2991)
inline Office::ShapePtr Office::CanvasShapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2992)
inline Office::ShapePtr Office::CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2993)
inline Office::ShapePtr Office::CanvasShapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2994)
inline Office::ShapePtr Office::CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2995)
inline Office::ShapePtr Office::CanvasShapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2996)
inline Office::ShapePtr Office::CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2997)
inline Office::ShapePtr Office::CanvasShapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2998)
inline Office::ShapePtr Office::CanvasShapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(2999)
inline Office::ShapePtr Office::CanvasShapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3000)
inline Office::FreeformBuilderPtr Office::CanvasShapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(3001)
inline Office::ShapeRangePtr Office::CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3002)
inline HRESULT Office::CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3003)
inline Office::ShapePtr Office::CanvasShapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IMsoChart wrapper method implementations
//

#pragma implementation_key(3004)
inline IDispatchPtr Office::IMsoChart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3005)
inline void Office::IMsoChart::PutHasTitle ( VARIANT_BOOL fTitle ) {
    HRESULT _hr = put_HasTitle(fTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3006)
inline VARIANT_BOOL Office::IMsoChart::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3007)
inline Office::IMsoChartTitlePtr Office::IMsoChart::GetChartTitle ( ) {
    struct IMsoChartTitle * _result = 0;
    HRESULT _hr = get_ChartTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartTitlePtr(_result, false);
}

#pragma implementation_key(3008)
inline int Office::IMsoChart::GetDepthPercent ( ) {
    int _result = 0;
    HRESULT _hr = get_DepthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3009)
inline void Office::IMsoChart::PutDepthPercent ( int pwDepthPercent ) {
    HRESULT _hr = put_DepthPercent(pwDepthPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3010)
inline int Office::IMsoChart::GetElevation ( ) {
    int _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3011)
inline void Office::IMsoChart::PutElevation ( int pwElevation ) {
    HRESULT _hr = put_Elevation(pwElevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3012)
inline int Office::IMsoChart::GetGapDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_GapDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3013)
inline void Office::IMsoChart::PutGapDepth ( int pwGapDepth ) {
    HRESULT _hr = put_GapDepth(pwGapDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3014)
inline int Office::IMsoChart::GetHeightPercent ( ) {
    int _result = 0;
    HRESULT _hr = get_HeightPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3015)
inline void Office::IMsoChart::PutHeightPercent ( int pwHeightPercent ) {
    HRESULT _hr = put_HeightPercent(pwHeightPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3016)
inline int Office::IMsoChart::GetPerspective ( ) {
    int _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3017)
inline void Office::IMsoChart::PutPerspective ( int pwPerspective ) {
    HRESULT _hr = put_Perspective(pwPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3018)
inline _variant_t Office::IMsoChart::GetRightAngleAxes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3019)
inline void Office::IMsoChart::PutRightAngleAxes ( const _variant_t & pvarRightAngleAxes ) {
    HRESULT _hr = put_RightAngleAxes(pvarRightAngleAxes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3020)
inline _variant_t Office::IMsoChart::GetRotation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3021)
inline void Office::IMsoChart::PutRotation ( const _variant_t & pvarRotation ) {
    HRESULT _hr = put_Rotation(pvarRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3022)
inline void Office::IMsoChart::PutDisplayBlanksAs ( enum XlDisplayBlanksAs pres ) {
    HRESULT _hr = put_DisplayBlanksAs(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3023)
inline enum Office::XlDisplayBlanksAs Office::IMsoChart::GetDisplayBlanksAs ( ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3024)
inline void Office::IMsoChart::PutProtectData ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectData(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3025)
inline VARIANT_BOOL Office::IMsoChart::GetProtectData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3026)
inline void Office::IMsoChart::PutProtectFormatting ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectFormatting(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3027)
inline VARIANT_BOOL Office::IMsoChart::GetProtectFormatting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3028)
inline void Office::IMsoChart::PutProtectGoalSeek ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectGoalSeek(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3029)
inline VARIANT_BOOL Office::IMsoChart::GetProtectGoalSeek ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectGoalSeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3030)
inline void Office::IMsoChart::PutProtectSelection ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectSelection(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3031)
inline VARIANT_BOOL Office::IMsoChart::GetProtectSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3032)
inline void Office::IMsoChart::PutProtectChartObjects ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectChartObjects(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3033)
inline VARIANT_BOOL Office::IMsoChart::GetProtectChartObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectChartObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3034)
inline HRESULT Office::IMsoChart::UnProtect ( const _variant_t & Password ) {
    HRESULT _hr = raw_UnProtect(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3035)
inline HRESULT Office::IMsoChart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3036)
inline IDispatchPtr Office::IMsoChart::GetChartGroups ( VARIANT * pvarIndex, const _variant_t & varIgallery, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ChartGroups(pvarIndex, varIgallery, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3037)
inline IDispatchPtr Office::IMsoChart::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3038)
inline HRESULT Office::IMsoChart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3039)
inline long Office::IMsoChart::GetSubType ( ) {
    long _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3040)
inline void Office::IMsoChart::PutSubType ( long RHS ) {
    HRESULT _hr = put_SubType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3041)
inline long Office::IMsoChart::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3042)
inline void Office::IMsoChart::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3043)
inline Office::IMsoCornersPtr Office::IMsoChart::GetCorners ( ) {
    struct IMsoCorners * _result = 0;
    HRESULT _hr = get_Corners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCornersPtr(_result, false);
}

#pragma implementation_key(3044)
inline HRESULT Office::IMsoChart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3045)
inline enum Office::XlChartType Office::IMsoChart::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3046)
inline void Office::IMsoChart::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3047)
inline VARIANT_BOOL Office::IMsoChart::GetHasDataTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3048)
inline void Office::IMsoChart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3049)
inline HRESULT Office::IMsoChart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3050)
inline HRESULT Office::IMsoChart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(x, y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3051)
inline HRESULT Office::IMsoChart::SetSourceData ( _bstr_t Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3052)
inline enum Office::XlRowCol Office::IMsoChart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3053)
inline void Office::IMsoChart::PutPlotBy ( enum XlRowCol PlotBy ) {
    HRESULT _hr = put_PlotBy(PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3054)
inline VARIANT_BOOL Office::IMsoChart::GetHasLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3055)
inline void Office::IMsoChart::PutHasLegend ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3056)
inline Office::IMsoLegendPtr Office::IMsoChart::GetLegend ( ) {
    struct IMsoLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLegendPtr(_result, false);
}

#pragma implementation_key(3057)
inline IDispatchPtr Office::IMsoChart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Axes(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3058)
inline void Office::IMsoChart::PutHasAxis ( const _variant_t & axisType, const _variant_t & AxisGroup, const _variant_t & pval ) {
    HRESULT _hr = put_HasAxis(axisType, AxisGroup, pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3059)
inline _variant_t Office::IMsoChart::GetHasAxis ( const _variant_t & axisType, const _variant_t & AxisGroup ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(axisType, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3060)
inline Office::IMsoWallsPtr Office::IMsoChart::GetWalls ( VARIANT_BOOL fBackWall ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_Walls(fBackWall, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

#pragma implementation_key(3061)
inline Office::IMsoFloorPtr Office::IMsoChart::GetFloor ( ) {
    struct IMsoFloor * _result = 0;
    HRESULT _hr = get_Floor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoFloorPtr(_result, false);
}

#pragma implementation_key(3062)
inline Office::IMsoPlotAreaPtr Office::IMsoChart::GetPlotArea ( ) {
    struct IMsoPlotArea * _result = 0;
    HRESULT _hr = get_PlotArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoPlotAreaPtr(_result, false);
}

#pragma implementation_key(3063)
inline VARIANT_BOOL Office::IMsoChart::GetPlotVisibleOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotVisibleOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3064)
inline void Office::IMsoChart::PutPlotVisibleOnly ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3065)
inline Office::IMsoChartAreaPtr Office::IMsoChart::GetChartArea ( ) {
    struct IMsoChartArea * _result = 0;
    HRESULT _hr = get_ChartArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartAreaPtr(_result, false);
}

#pragma implementation_key(3066)
inline HRESULT Office::IMsoChart::AutoFormat ( long rGallery, const _variant_t & varFormat ) {
    HRESULT _hr = raw_AutoFormat(rGallery, varFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3067)
inline VARIANT_BOOL Office::IMsoChart::GetAutoScaling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3068)
inline void Office::IMsoChart::PutAutoScaling ( VARIANT_BOOL f ) {
    HRESULT _hr = put_AutoScaling(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3069)
inline HRESULT Office::IMsoChart::SetBackgroundPicture ( _bstr_t bstr ) {
    HRESULT _hr = raw_SetBackgroundPicture(bstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3070)
inline HRESULT Office::IMsoChart::ChartWizard ( const _variant_t & varSource, const _variant_t & varGallery, const _variant_t & varFormat, const _variant_t & varPlotBy, const _variant_t & varCategoryLabels, const _variant_t & varSeriesLabels, const _variant_t & varHasLegend, const _variant_t & varTitle, const _variant_t & varCategoryTitle, const _variant_t & varValueTitle, const _variant_t & varExtraTitle, long LocaleID ) {
    HRESULT _hr = raw_ChartWizard(varSource, varGallery, varFormat, varPlotBy, varCategoryLabels, varSeriesLabels, varHasLegend, varTitle, varCategoryTitle, varValueTitle, varExtraTitle, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3071)
inline HRESULT Office::IMsoChart::CopyPicture ( int Appearance, int Format, int Size, long LocaleID ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3072)
inline Office::IMsoDataTablePtr Office::IMsoChart::GetDataTable ( ) {
    struct IMsoDataTable * _result = 0;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataTablePtr(_result, false);
}

#pragma implementation_key(3073)
inline _variant_t Office::IMsoChart::Evaluate ( const _variant_t & varName, long LocaleID, long * ObjType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(varName, LocaleID, ObjType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3074)
inline _variant_t Office::IMsoChart::_Evaluate ( const _variant_t & varName, long LocaleID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(varName, LocaleID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3075)
inline HRESULT Office::IMsoChart::Paste ( const _variant_t & varType, long LocaleID ) {
    HRESULT _hr = raw_Paste(varType, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3076)
inline enum Office::XlBarShape Office::IMsoChart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3077)
inline void Office::IMsoChart::PutBarShape ( enum XlBarShape pShape ) {
    HRESULT _hr = put_BarShape(pShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3078)
inline VARIANT_BOOL Office::IMsoChart::Export ( _bstr_t bstr, const _variant_t & varFilterName, const _variant_t & varInteractive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(bstr, varFilterName, varInteractive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3079)
inline HRESULT Office::IMsoChart::SetDefaultChart ( const _variant_t & varName ) {
    HRESULT _hr = raw_SetDefaultChart(varName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3080)
inline HRESULT Office::IMsoChart::ApplyChartTemplate ( _bstr_t bstrFileName ) {
    HRESULT _hr = raw_ApplyChartTemplate(bstrFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3081)
inline HRESULT Office::IMsoChart::SaveChartTemplate ( _bstr_t bstrFileName ) {
    HRESULT _hr = raw_SaveChartTemplate(bstrFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3082)
inline Office::IMsoWallsPtr Office::IMsoChart::GetSideWall ( ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_SideWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

#pragma implementation_key(3083)
inline Office::IMsoWallsPtr Office::IMsoChart::GetBackWall ( ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_BackWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

#pragma implementation_key(3084)
inline _variant_t Office::IMsoChart::GetChartStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3085)
inline void Office::IMsoChart::PutChartStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ChartStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3086)
inline HRESULT Office::IMsoChart::ClearToMatchStyle ( ) {
    HRESULT _hr = raw_ClearToMatchStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3087)
inline IDispatchPtr Office::IMsoChart::GetPivotLayout ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PivotLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3088)
inline VARIANT_BOOL Office::IMsoChart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3089)
inline void Office::IMsoChart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3090)
inline HRESULT Office::IMsoChart::RefreshPivotTable ( ) {
    HRESULT _hr = raw_RefreshPivotTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3091)
inline void Office::IMsoChart::PutShowDataLabelsOverMaximum ( VARIANT_BOOL pRHS ) {
    HRESULT _hr = put_ShowDataLabelsOverMaximum(pRHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3092)
inline VARIANT_BOOL Office::IMsoChart::GetShowDataLabelsOverMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDataLabelsOverMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3093)
inline HRESULT Office::IMsoChart::ApplyLayout ( long Layout, const _variant_t & varChartType ) {
    HRESULT _hr = raw_ApplyLayout(Layout, varChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3094)
inline IDispatchPtr Office::IMsoChart::GetSelection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3095)
inline HRESULT Office::IMsoChart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3096)
inline HRESULT Office::IMsoChart::SetElement ( enum MsoChartElementType RHS ) {
    HRESULT _hr = raw_SetElement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3097)
inline Office::IMsoChartDataPtr Office::IMsoChart::GetChartData ( ) {
    struct IMsoChartData * _result = 0;
    HRESULT _hr = get_ChartData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartDataPtr(_result, false);
}

#pragma implementation_key(3098)
inline Office::IMsoChartFormatPtr Office::IMsoChart::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

#pragma implementation_key(3099)
inline Office::ShapesPtr Office::IMsoChart::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(3100)
inline IDispatchPtr Office::IMsoChart::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3101)
inline long Office::IMsoChart::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3102)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetArea3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3103)
inline IDispatchPtr Office::IMsoChart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3104)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetBar3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3105)
inline IDispatchPtr Office::IMsoChart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3106)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetColumn3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3107)
inline IDispatchPtr Office::IMsoChart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3108)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetLine3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3109)
inline IDispatchPtr Office::IMsoChart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3110)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetPie3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3111)
inline IDispatchPtr Office::IMsoChart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3112)
inline IDispatchPtr Office::IMsoChart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3113)
inline IDispatchPtr Office::IMsoChart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3114)
inline Office::IMsoChartGroupPtr Office::IMsoChart::GetSurfaceGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

#pragma implementation_key(3115)
inline IDispatchPtr Office::IMsoChart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3116)
inline _variant_t Office::IMsoChart::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3117)
inline _variant_t Office::IMsoChart::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3118)
inline _variant_t Office::IMsoChart::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3119)
inline VARIANT_BOOL Office::IMsoChart::GetShowReportFilterFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowReportFilterFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3120)
inline void Office::IMsoChart::PutShowReportFilterFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowReportFilterFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3121)
inline VARIANT_BOOL Office::IMsoChart::GetShowLegendFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3122)
inline void Office::IMsoChart::PutShowLegendFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowLegendFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3123)
inline VARIANT_BOOL Office::IMsoChart::GetShowAxisFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAxisFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3124)
inline void Office::IMsoChart::PutShowAxisFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAxisFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3125)
inline VARIANT_BOOL Office::IMsoChart::GetShowValueFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValueFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3126)
inline void Office::IMsoChart::PutShowValueFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowValueFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3127)
inline VARIANT_BOOL Office::IMsoChart::GetShowAllFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3128)
inline void Office::IMsoChart::PutShowAllFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAllFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FileSearch wrapper method implementations
//

#pragma implementation_key(3129)
inline VARIANT_BOOL Office::FileSearch::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3130)
inline void Office::FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal ) {
    HRESULT _hr = put_SearchSubFolders(SearchSubFoldersRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3131)
inline VARIANT_BOOL Office::FileSearch::GetMatchTextExactly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchTextExactly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3132)
inline void Office::FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal ) {
    HRESULT _hr = put_MatchTextExactly(MatchTextRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3133)
inline VARIANT_BOOL Office::FileSearch::GetMatchAllWordForms ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchAllWordForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3134)
inline void Office::FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal ) {
    HRESULT _hr = put_MatchAllWordForms(MatchAllWordFormsRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3135)
inline _bstr_t Office::FileSearch::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3136)
inline void Office::FileSearch::PutFileName ( _bstr_t FileNameRetVal ) {
    HRESULT _hr = put_FileName(FileNameRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3137)
inline enum Office::MsoFileType Office::FileSearch::GetFileType ( ) {
    enum MsoFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3138)
inline void Office::FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal ) {
    HRESULT _hr = put_FileType(FileTypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3139)
inline enum Office::MsoLastModified Office::FileSearch::GetLastModified ( ) {
    enum MsoLastModified _result;
    HRESULT _hr = get_LastModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3140)
inline void Office::FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal ) {
    HRESULT _hr = put_LastModified(LastModifiedRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3141)
inline _bstr_t Office::FileSearch::GetTextOrProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextOrProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3142)
inline void Office::FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty ) {
    HRESULT _hr = put_TextOrProperty(TextOrProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3143)
inline _bstr_t Office::FileSearch::GetLookIn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LookIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3144)
inline void Office::FileSearch::PutLookIn ( _bstr_t LookInRetVal ) {
    HRESULT _hr = put_LookIn(LookInRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3145)
inline int Office::FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate ) {
    int _result = 0;
    HRESULT _hr = raw_Execute(SortBy, SortOrder, AlwaysAccurate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3146)
inline HRESULT Office::FileSearch::NewSearch ( ) {
    HRESULT _hr = raw_NewSearch();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3147)
inline Office::FoundFilesPtr Office::FileSearch::GetFoundFiles ( ) {
    struct FoundFiles * _result = 0;
    HRESULT _hr = get_FoundFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FoundFilesPtr(_result, false);
}

#pragma implementation_key(3148)
inline Office::PropertyTestsPtr Office::FileSearch::GetPropertyTests ( ) {
    struct PropertyTests * _result = 0;
    HRESULT _hr = get_PropertyTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestsPtr(_result, false);
}

#pragma implementation_key(3149)
inline Office::SearchScopesPtr Office::FileSearch::GetSearchScopes ( ) {
    struct SearchScopes * _result = 0;
    HRESULT _hr = get_SearchScopes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopesPtr(_result, false);
}

#pragma implementation_key(3150)
inline Office::SearchFoldersPtr Office::FileSearch::GetSearchFolders ( ) {
    struct SearchFolders * _result = 0;
    HRESULT _hr = get_SearchFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchFoldersPtr(_result, false);
}

#pragma implementation_key(3151)
inline Office::FileTypesPtr Office::FileSearch::GetFileTypes ( ) {
    struct FileTypes * _result = 0;
    HRESULT _hr = get_FileTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileTypesPtr(_result, false);
}

#pragma implementation_key(3152)
inline HRESULT Office::FileSearch::RefreshScopes ( ) {
    HRESULT _hr = raw_RefreshScopes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchFolders wrapper method implementations
//

#pragma implementation_key(3153)
inline Office::ScopeFolderPtr Office::SearchFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

#pragma implementation_key(3154)
inline int Office::SearchFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3155)
inline HRESULT Office::SearchFolders::Add ( struct ScopeFolder * ScopeFolder ) {
    HRESULT _hr = raw_Add(ScopeFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3156)
inline HRESULT Office::SearchFolders::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3157)
inline IUnknownPtr Office::SearchFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolders wrapper method implementations
//

#pragma implementation_key(3158)
inline Office::ScopeFolderPtr Office::ScopeFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

#pragma implementation_key(3159)
inline int Office::ScopeFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3160)
inline IUnknownPtr Office::ScopeFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolder wrapper method implementations
//

#pragma implementation_key(3161)
inline _bstr_t Office::ScopeFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3162)
inline _bstr_t Office::ScopeFolder::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3163)
inline Office::ScopeFoldersPtr Office::ScopeFolder::GetScopeFolders ( ) {
    struct ScopeFolders * _result = 0;
    HRESULT _hr = get_ScopeFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFoldersPtr(_result, false);
}

#pragma implementation_key(3164)
inline HRESULT Office::ScopeFolder::AddToSearchFolders ( ) {
    HRESULT _hr = raw_AddToSearchFolders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchScope wrapper method implementations
//

#pragma implementation_key(3165)
inline enum Office::MsoSearchIn Office::SearchScope::GetType ( ) {
    enum MsoSearchIn _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3166)
inline Office::ScopeFolderPtr Office::SearchScope::GetScopeFolder ( ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_ScopeFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

//
// interface SearchScopes wrapper method implementations
//

#pragma implementation_key(3167)
inline Office::SearchScopePtr Office::SearchScopes::GetItem ( int Index ) {
    struct SearchScope * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopePtr(_result, false);
}

#pragma implementation_key(3168)
inline int Office::SearchScopes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3169)
inline IUnknownPtr Office::SearchScopes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMsoDiagram wrapper method implementations
//

#pragma implementation_key(3170)
inline IDispatchPtr Office::IMsoDiagram::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3171)
inline Office::DiagramNodesPtr Office::IMsoDiagram::GetNodes ( ) {
    struct DiagramNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

#pragma implementation_key(3172)
inline enum Office::MsoDiagramType Office::IMsoDiagram::GetType ( ) {
    enum MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3173)
inline enum Office::MsoTriState Office::IMsoDiagram::GetAutoLayout ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3174)
inline void Office::IMsoDiagram::PutAutoLayout ( enum MsoTriState AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3175)
inline enum Office::MsoTriState Office::IMsoDiagram::GetReverse ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3176)
inline void Office::IMsoDiagram::PutReverse ( enum MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3177)
inline enum Office::MsoTriState Office::IMsoDiagram::GetAutoFormat ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3178)
inline void Office::IMsoDiagram::PutAutoFormat ( enum MsoTriState AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3179)
inline HRESULT Office::IMsoDiagram::Convert ( enum MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3180)
inline HRESULT Office::IMsoDiagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DiagramNodes wrapper method implementations
//

#pragma implementation_key(3181)
inline IUnknownPtr Office::DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3182)
inline Office::DiagramNodePtr Office::DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3183)
inline HRESULT Office::DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3184)
inline IDispatchPtr Office::DiagramNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3185)
inline int Office::DiagramNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNodeChildren wrapper method implementations
//

#pragma implementation_key(3186)
inline IUnknownPtr Office::DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3187)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3188)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::AddNode ( const _variant_t & Index, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3189)
inline HRESULT Office::DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3190)
inline IDispatchPtr Office::DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3191)
inline int Office::DiagramNodeChildren::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3192)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3193)
inline Office::DiagramNodePtr Office::DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

#pragma implementation_key(3194)
inline Office::DiagramNodePtr Office::DiagramNode::AddNode ( enum MsoRelativeNodePosition Pos, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3195)
inline HRESULT Office::DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3196)
inline HRESULT Office::DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3197)
inline HRESULT Office::DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3198)
inline HRESULT Office::DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3199)
inline Office::DiagramNodePtr Office::DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3200)
inline HRESULT Office::DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3201)
inline Office::DiagramNodePtr Office::DiagramNode::NextNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3202)
inline Office::DiagramNodePtr Office::DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3203)
inline IDispatchPtr Office::DiagramNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3204)
inline Office::DiagramNodeChildrenPtr Office::DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

#pragma implementation_key(3205)
inline Office::ShapePtr Office::DiagramNode::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(3206)
inline Office::DiagramNodePtr Office::DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

#pragma implementation_key(3207)
inline Office::IMsoDiagramPtr Office::DiagramNode::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

#pragma implementation_key(3208)
inline enum Office::MsoOrgChartLayoutType Office::DiagramNode::GetLayout ( ) {
    enum MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3209)
inline void Office::DiagramNode::PutLayout ( enum MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3210)
inline Office::ShapePtr Office::DiagramNode::GetTextShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CustomXMLNodes wrapper method implementations
//

#pragma implementation_key(3211)
inline IDispatchPtr Office::CustomXMLNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3212)
inline long Office::CustomXMLNodes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3213)
inline Office::CustomXMLNodePtr Office::CustomXMLNodes::GetItem ( long Index ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3214)
inline IUnknownPtr Office::CustomXMLNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface CustomXMLNode wrapper method implementations
//

#pragma implementation_key(3215)
inline IDispatchPtr Office::CustomXMLNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3216)
inline Office::CustomXMLNodesPtr Office::CustomXMLNode::GetAttributes ( ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

#pragma implementation_key(3217)
inline _bstr_t Office::CustomXMLNode::GetBaseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3218)
inline Office::CustomXMLNodesPtr Office::CustomXMLNode::GetChildNodes ( ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = get_ChildNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

#pragma implementation_key(3219)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::GetFirstChild ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3220)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::GetLastChild ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3221)
inline _bstr_t Office::CustomXMLNode::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3222)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::GetNextSibling ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_NextSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3223)
inline enum Office::MsoCustomXMLNodeType Office::CustomXMLNode::GetNodeType ( ) {
    enum MsoCustomXMLNodeType _result;
    HRESULT _hr = get_NodeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3224)
inline _bstr_t Office::CustomXMLNode::GetNodeValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NodeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3225)
inline void Office::CustomXMLNode::PutNodeValue ( _bstr_t pbstrNodeValue ) {
    HRESULT _hr = put_NodeValue(pbstrNodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3226)
inline IDispatchPtr Office::CustomXMLNode::GetOwnerDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_OwnerDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3227)
inline Office::_CustomXMLPartPtr Office::CustomXMLNode::GetOwnerPart ( ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = get_OwnerPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

#pragma implementation_key(3228)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::GetPreviousSibling ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_PreviousSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3229)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::GetParentNode ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_ParentNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3230)
inline _bstr_t Office::CustomXMLNode::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3231)
inline void Office::CustomXMLNode::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3232)
inline _bstr_t Office::CustomXMLNode::GetXPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3233)
inline _bstr_t Office::CustomXMLNode::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3234)
inline HRESULT Office::CustomXMLNode::AppendChildNode ( _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_AppendChildNode(Name, NamespaceURI, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3235)
inline HRESULT Office::CustomXMLNode::AppendChildSubtree ( _bstr_t XML ) {
    HRESULT _hr = raw_AppendChildSubtree(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3236)
inline HRESULT Office::CustomXMLNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3237)
inline VARIANT_BOOL Office::CustomXMLNode::HasChildNodes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasChildNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3238)
inline HRESULT Office::CustomXMLNode::InsertNodeBefore ( _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue, struct CustomXMLNode * NextSibling ) {
    HRESULT _hr = raw_InsertNodeBefore(Name, NamespaceURI, NodeType, NodeValue, NextSibling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3239)
inline HRESULT Office::CustomXMLNode::InsertSubtreeBefore ( _bstr_t XML, struct CustomXMLNode * NextSibling ) {
    HRESULT _hr = raw_InsertSubtreeBefore(XML, NextSibling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3240)
inline HRESULT Office::CustomXMLNode::RemoveChild ( struct CustomXMLNode * Child ) {
    HRESULT _hr = raw_RemoveChild(Child);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3241)
inline HRESULT Office::CustomXMLNode::ReplaceChildNode ( struct CustomXMLNode * OldNode, _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_ReplaceChildNode(OldNode, Name, NamespaceURI, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3242)
inline HRESULT Office::CustomXMLNode::ReplaceChildSubtree ( _bstr_t XML, struct CustomXMLNode * OldNode ) {
    HRESULT _hr = raw_ReplaceChildSubtree(XML, OldNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3243)
inline Office::CustomXMLNodesPtr Office::CustomXMLNode::SelectNodes ( _bstr_t XPath ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = raw_SelectNodes(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

#pragma implementation_key(3244)
inline Office::CustomXMLNodePtr Office::CustomXMLNode::SelectSingleNode ( _bstr_t XPath ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = raw_SelectSingleNode(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

//
// interface CustomXMLValidationError wrapper method implementations
//

#pragma implementation_key(3245)
inline IDispatchPtr Office::CustomXMLValidationError::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3246)
inline _bstr_t Office::CustomXMLValidationError::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3247)
inline Office::CustomXMLNodePtr Office::CustomXMLValidationError::GetNode ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_Node(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3248)
inline _bstr_t Office::CustomXMLValidationError::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3249)
inline enum Office::MsoCustomXMLValidationErrorType Office::CustomXMLValidationError::GetType ( ) {
    enum MsoCustomXMLValidationErrorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3250)
inline HRESULT Office::CustomXMLValidationError::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3251)
inline long Office::CustomXMLValidationError::GetErrorCode ( ) {
    long _result = 0;
    HRESULT _hr = get_ErrorCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CustomXMLValidationErrors wrapper method implementations
//

#pragma implementation_key(3252)
inline IDispatchPtr Office::CustomXMLValidationErrors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3253)
inline long Office::CustomXMLValidationErrors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3254)
inline Office::CustomXMLValidationErrorPtr Office::CustomXMLValidationErrors::GetItem ( long Index ) {
    struct CustomXMLValidationError * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLValidationErrorPtr(_result, false);
}

#pragma implementation_key(3255)
inline HRESULT Office::CustomXMLValidationErrors::Add ( struct CustomXMLNode * Node, _bstr_t ErrorName, _bstr_t ErrorText, VARIANT_BOOL ClearedOnUpdate ) {
    HRESULT _hr = raw_Add(Node, ErrorName, ErrorText, ClearedOnUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3256)
inline IUnknownPtr Office::CustomXMLValidationErrors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _CustomXMLPart wrapper method implementations
//

#pragma implementation_key(3257)
inline IDispatchPtr Office::_CustomXMLPart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3258)
inline Office::CustomXMLNodePtr Office::_CustomXMLPart::GetDocumentElement ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_DocumentElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3259)
inline _bstr_t Office::_CustomXMLPart::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3260)
inline _bstr_t Office::_CustomXMLPart::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3261)
inline Office::_CustomXMLSchemaCollectionPtr Office::_CustomXMLPart::GetSchemaCollection ( ) {
    struct _CustomXMLSchemaCollection * _result = 0;
    HRESULT _hr = get_SchemaCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLSchemaCollectionPtr(_result, false);
}

#pragma implementation_key(3262)
inline void Office::_CustomXMLPart::PutSchemaCollection ( struct _CustomXMLSchemaCollection * ppSchemaCollection ) {
    HRESULT _hr = put_SchemaCollection(ppSchemaCollection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3263)
inline Office::CustomXMLPrefixMappingsPtr Office::_CustomXMLPart::GetNamespaceManager ( ) {
    struct CustomXMLPrefixMappings * _result = 0;
    HRESULT _hr = get_NamespaceManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLPrefixMappingsPtr(_result, false);
}

#pragma implementation_key(3264)
inline _bstr_t Office::_CustomXMLPart::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(3265)
inline HRESULT Office::_CustomXMLPart::AddNode ( struct CustomXMLNode * Parent, _bstr_t Name, _bstr_t NamespaceURI, struct CustomXMLNode * NextSibling, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_AddNode(Parent, Name, NamespaceURI, NextSibling, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3266)
inline HRESULT Office::_CustomXMLPart::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3267)
inline VARIANT_BOOL Office::_CustomXMLPart::Load ( _bstr_t FilePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Load(FilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3268)
inline VARIANT_BOOL Office::_CustomXMLPart::LoadXML ( _bstr_t XML ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadXML(XML, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3269)
inline Office::CustomXMLNodesPtr Office::_CustomXMLPart::SelectNodes ( _bstr_t XPath ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = raw_SelectNodes(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

#pragma implementation_key(3270)
inline Office::CustomXMLNodePtr Office::_CustomXMLPart::SelectSingleNode ( _bstr_t XPath ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = raw_SelectSingleNode(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

#pragma implementation_key(3271)
inline Office::CustomXMLValidationErrorsPtr Office::_CustomXMLPart::GetErrors ( ) {
    struct CustomXMLValidationErrors * _result = 0;
    HRESULT _hr = get_Errors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLValidationErrorsPtr(_result, false);
}

#pragma implementation_key(3272)
inline VARIANT_BOOL Office::_CustomXMLPart::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArt wrapper method implementations
//

#pragma implementation_key(3273)
inline IDispatchPtr Office::SmartArt::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3274)
inline Office::SmartArtNodesPtr Office::SmartArt::GetAllNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_AllNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

#pragma implementation_key(3275)
inline Office::SmartArtNodesPtr Office::SmartArt::GetNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

#pragma implementation_key(3276)
inline Office::SmartArtLayoutPtr Office::SmartArt::GetLayout ( ) {
    struct SmartArtLayout * _result = 0;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtLayoutPtr(_result, false);
}

#pragma implementation_key(3277)
inline void Office::SmartArt::PutLayout ( struct SmartArtLayout * Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3278)
inline Office::SmartArtQuickStylePtr Office::SmartArt::GetQuickStyle ( ) {
    struct SmartArtQuickStyle * _result = 0;
    HRESULT _hr = get_QuickStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtQuickStylePtr(_result, false);
}

#pragma implementation_key(3279)
inline void Office::SmartArt::PutQuickStyle ( struct SmartArtQuickStyle * Style ) {
    HRESULT _hr = put_QuickStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3280)
inline Office::SmartArtColorPtr Office::SmartArt::GetColor ( ) {
    struct SmartArtColor * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtColorPtr(_result, false);
}

#pragma implementation_key(3281)
inline void Office::SmartArt::PutColor ( struct SmartArtColor * ColorStyle ) {
    HRESULT _hr = put_Color(ColorStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3282)
inline enum Office::MsoTriState Office::SmartArt::GetReverse ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3283)
inline void Office::SmartArt::PutReverse ( enum MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3284)
inline HRESULT Office::SmartArt::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SmartArtNodes wrapper method implementations
//

#pragma implementation_key(3285)
inline IUnknownPtr Office::SmartArtNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(3286)
inline Office::SmartArtNodePtr Office::SmartArtNodes::Item ( const _variant_t & Index ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

#pragma implementation_key(3287)
inline IDispatchPtr Office::SmartArtNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3288)
inline int Office::SmartArtNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3289)
inline Office::SmartArtNodePtr Office::SmartArtNodes::Add ( ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

//
// interface SmartArtNode wrapper method implementations
//

#pragma implementation_key(3290)
inline IDispatchPtr Office::SmartArtNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(3291)
inline Office::SmartArtNodePtr Office::SmartArtNode::AddNode ( enum MsoSmartArtNodePosition Position, enum MsoSmartArtNodeType Type ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_AddNode(Position, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

#pragma implementation_key(3292)
inline HRESULT Office::SmartArtNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3293)
inline HRESULT Office::SmartArtNode::Promote ( ) {
    HRESULT _hr = raw_Promote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3294)
inline HRESULT Office::SmartArtNode::Demote ( ) {
    HRESULT _hr = raw_Demote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3295)
inline enum Office::MsoOrgChartLayoutType Office::SmartArtNode::GetOrgChartLayout ( ) {
    enum MsoOrgChartLayoutType _result;
    HRESULT _hr = get_OrgChartLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3296)
inline void Office::SmartArtNode::PutOrgChartLayout ( enum MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_OrgChartLayout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(3297)
inline Office::ShapeRangePtr Office::SmartArtNode::GetShapes ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(3298)
inline Office::TextFrame2Ptr Office::SmartArtNode::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

#pragma implementation_key(3299)
inline HRESULT Office::SmartArtNode::Larger ( ) {
    HRESULT _hr = raw_Larger();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3300)
inline HRESULT Office::SmartArtNode::Smaller ( ) {
    HRESULT _hr = raw_Smaller();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3301)
inline int Office::SmartArtNode::GetLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3302)
inline enum Office::MsoTriState Office::SmartArtNode::GetHidden ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3303)
inline Office::SmartArtNodesPtr Office::SmartArtNode::GetNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

#pragma implementation_key(3304)
inline Office::SmartArtNodePtr Office::SmartArtNode::GetParentNode ( ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = get_ParentNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

#pragma implementation_key(3305)
inline enum Office::MsoSmartArtNodeType Office::SmartArtNode::GetType ( ) {
    enum MsoSmartArtNodeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3306)
inline HRESULT Office::SmartArtNode::ReorderUp ( ) {
    HRESULT _hr = raw_ReorderUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(3307)
inline HRESULT Office::SmartArtNode::ReorderDown ( ) {
    HRESULT _hr = raw_ReorderDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
